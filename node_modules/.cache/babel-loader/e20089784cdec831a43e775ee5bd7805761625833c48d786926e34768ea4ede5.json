{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nfunction hasIssuer(options) {\n  return typeof options.oidcIssuer === \"string\";\n}\nfunction hasRedirectUrl(options) {\n  return typeof options.redirectUrl === \"string\";\n}\nvar OidcLoginHandler = /*#__PURE__*/function () {\n  function OidcLoginHandler(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {\n    _classCallCheck(this, OidcLoginHandler);\n    this.storageUtility = storageUtility;\n    this.oidcHandler = oidcHandler;\n    this.issuerConfigFetcher = issuerConfigFetcher;\n    this.clientRegistrar = clientRegistrar;\n  }\n  _createClass(OidcLoginHandler, [{\n    key: \"canHandle\",\n    value: function () {\n      var _canHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", hasIssuer(options) && hasRedirectUrl(options));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function canHandle(_x) {\n        return _canHandle.apply(this, arguments);\n      }\n      return canHandle;\n    }()\n  }, {\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options) {\n        var issuerConfig, clientRegistration, OidcOptions;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (hasIssuer(options)) {\n                _context2.next = 2;\n                break;\n              }\n              throw new solid_client_authn_core_1.ConfigurationError(\"OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in \".concat(JSON.stringify(options)));\n            case 2:\n              if (hasRedirectUrl(options)) {\n                _context2.next = 4;\n                break;\n              }\n              throw new solid_client_authn_core_1.ConfigurationError(\"OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in \".concat(JSON.stringify(options)));\n            case 4:\n              _context2.next = 6;\n              return this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n            case 6:\n              issuerConfig = _context2.sent;\n              _context2.next = 9;\n              return (0, solid_client_authn_core_1.handleRegistration)(options, issuerConfig, this.storageUtility, this.clientRegistrar);\n            case 9:\n              clientRegistration = _context2.sent;\n              OidcOptions = _objectSpread(_objectSpread({\n                issuer: issuerConfig.issuer,\n                dpop: options.tokenType.toLowerCase() === \"dpop\"\n              }, options), {}, {\n                issuerConfiguration: issuerConfig,\n                client: clientRegistration\n              });\n              return _context2.abrupt(\"return\", this.oidcHandler.handle(OidcOptions));\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function handle(_x2) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n  }]);\n  return OidcLoginHandler;\n}();\nexports.default = OidcLoginHandler;","map":{"version":3,"mappings":";;;;;;;;;;AA8BA;AAcA,SAASA,SAAS,CAChBC,OAAsB;EAEtB,OAAO,OAAOA,OAAO,CAACC,UAAU,KAAK,QAAQ;AAC/C;AAEA,SAASC,cAAc,CACrBF,OAAsB;EAEtB,OAAO,OAAOA,OAAO,CAACG,WAAW,KAAK,QAAQ;AAChD;AAAC,IAKoBC,gBAAgB;EACnC,0BACUC,cAA+B,EAC/BC,WAAyB,EACzBC,mBAAyC,EACzCC,eAAiC;IAAA;IAHjC,mBAAc,GAAdH,cAAc;IACd,gBAAW,GAAXC,WAAW;IACX,wBAAmB,GAAnBC,mBAAmB;IACnB,oBAAe,GAAfC,eAAe;EACtB;EAAC;IAAA;IAAA;MAAA,4EAEJ,iBAAgBR,OAAsB;QAAA;UAAA;YAAA;cAAA,iCAC7BD,SAAS,CAACC,OAAO,CAAC,IAAIE,cAAc,CAACF,OAAO,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACrD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yEAED,kBAAaA,OAAsB;QAAA;QAAA;UAAA;YAAA;cAAA,IAC5BD,SAAS,CAACC,OAAO,CAAC;gBAAA;gBAAA;cAAA;cAAA,MACf,IAAIS,4CAAkB,sFACoDC,IAAI,CAACC,SAAS,CAC1FX,OAAO,CACR,EACF;YAAA;cAAA,IAEEE,cAAc,CAACF,OAAO,CAAC;gBAAA;gBAAA;cAAA;cAAA,MACpB,IAAIS,4CAAkB,uFACqDC,IAAI,CAACC,SAAS,CAC3FX,OAAO,CACR,EACF;YAAA;cAAA;cAAA,OAKK,IAAI,CAACO,mBAAmB,CAACK,WAAW,CAACZ,OAAO,CAACC,UAAU,CAAC;YAAA;cAD1DY,YAAY;cAAA;cAAA,OAGe,gDAAkB,EACjDb,OAAO,EACPa,YAAY,EACZ,IAAI,CAACR,cAAc,EACnB,IAAI,CAACG,eAAe,CACrB;YAAA;cALKM,kBAAkB;cAQlBC,WAAW;gBAMfC,MAAM,EAAEH,YAAY,CAACG,MAAM;gBAE3BC,IAAI,EAAEjB,OAAO,CAACkB,SAAS,CAACC,WAAW,EAAE,KAAK;cAAM,GAC7CnB,OAAO;gBACVoB,mBAAmB,EAAEP,YAAY;gBACjCQ,MAAM,EAAEP;cAAkB;cAAA,kCAIrB,IAAI,CAACR,WAAW,CAACgB,MAAM,CAACP,WAAW,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAC5C;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAxDHQ","names":["hasIssuer","options","oidcIssuer","hasRedirectUrl","redirectUrl","OidcLoginHandler","storageUtility","oidcHandler","issuerConfigFetcher","clientRegistrar","solid_client_authn_core_1","JSON","stringify","fetchConfig","issuerConfig","clientRegistration","OidcOptions","issuer","dpop","tokenType","toLowerCase","issuerConfiguration","client","handle","exports"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\OidcLoginHandler.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handles Common Oidc login functions (Like fetching the configuration)\n */\n\nimport {\n  IClientRegistrar,\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  ILoginOptions,\n  ILoginHandler,\n  IOidcHandler,\n  IOidcOptions,\n  IStorageUtility,\n  ConfigurationError,\n  LoginResult,\n  handleRegistration,\n} from \"@inrupt/solid-client-authn-core\";\n\nfunction hasIssuer(\n  options: ILoginOptions\n): options is ILoginOptions & { oidcIssuer: string } {\n  return typeof options.oidcIssuer === \"string\";\n}\n\nfunction hasRedirectUrl(\n  options: ILoginOptions\n): options is ILoginOptions & { redirectUrl: string } {\n  return typeof options.redirectUrl === \"string\";\n}\n\n/**\n * @hidden\n */\nexport default class OidcLoginHandler implements ILoginHandler {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private oidcHandler: IOidcHandler,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async canHandle(options: ILoginOptions): Promise<boolean> {\n    return hasIssuer(options) && hasRedirectUrl(options);\n  }\n\n  async handle(options: ILoginOptions): Promise<LoginResult> {\n    if (!hasIssuer(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n    if (!hasRedirectUrl(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n\n    // Fetch issuer config.\n    const issuerConfig: IIssuerConfig =\n      await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n\n    const clientRegistration = await handleRegistration(\n      options,\n      issuerConfig,\n      this.storageUtility,\n      this.clientRegistrar\n    );\n\n    // Construct OIDC Options\n    const OidcOptions: IOidcOptions = {\n      // Note that here, the issuer is not the one from the received options, but\n      // from the issuer's config. This enforces the canonical URL is used and stored,\n      // which is also the one present in the ID token, so storing a technically\n      // valid, but different issuer URL (e.g. using a trailing slash or not) now\n      // could prevent from validating the ID token later.\n      issuer: issuerConfig.issuer,\n      // TODO: differentiate if DPoP should be true\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      ...options,\n      issuerConfiguration: issuerConfig,\n      client: clientRegistration,\n    };\n\n    // Call proper OIDC Handler\n    return this.oidcHandler.handle(OidcOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}