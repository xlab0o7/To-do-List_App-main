{"ast":null,"code":"var _objectWithoutProperties = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _objectSpread = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _excluded = [\"documentLoader\"];\n/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2019 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar canonize = require('rdf-canonize');\nvar platform = require('./platform');\nvar util = require('./util');\nvar ContextResolver = require('./ContextResolver');\nvar IdentifierIssuer = util.IdentifierIssuer;\nvar JsonLdError = require('./JsonLdError');\nvar LRU = require('lru-cache');\nvar NQuads = require('./NQuads');\nvar _require = require('./expand'),\n  _expand = _require.expand;\nvar _require2 = require('./flatten'),\n  _flatten = _require2.flatten;\nvar _require3 = require('./fromRdf'),\n  _fromRDF = _require3.fromRDF;\nvar _require4 = require('./toRdf'),\n  _toRDF = _require4.toRDF;\nvar _require5 = require('./frame'),\n  _frameMergedOrDefault = _require5.frameMergedOrDefault,\n  _cleanupNull = _require5.cleanupNull;\nvar _require6 = require('./types'),\n  _isArray = _require6.isArray,\n  _isObject = _require6.isObject,\n  _isString = _require6.isString;\nvar _require7 = require('./graphTypes'),\n  _isSubjectReference = _require7.isSubjectReference;\nvar _require8 = require('./context'),\n  _expandIri = _require8.expandIri,\n  _getInitialContext = _require8.getInitialContext,\n  _processContext = _require8.process,\n  _processingMode = _require8.processingMode;\nvar _require9 = require('./compact'),\n  _compact = _require9.compact,\n  _compactIri = _require9.compactIri;\nvar _require10 = require('./nodeMap'),\n  _createNodeMap = _require10.createNodeMap,\n  _createMergedNodeMap = _require10.createMergedNodeMap,\n  _mergeNodeMaps = _require10.mergeNodeMaps;\n\n/* eslint-disable indent */\n// attaches jsonld API to the given object\nvar wrapper = function wrapper(jsonld) {\n  /** Registered RDF dataset parsers hashed by content-type. */\n  var _rdfParsers = {};\n\n  // resolved context cache\n  // TODO: consider basing max on context size rather than number\n  var RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;\n  var _resolvedContextCache = new LRU({\n    max: RESOLVED_CONTEXT_CACHE_MAX_SIZE\n  });\n\n  /* Core API */\n\n  /**\n   * Performs JSON-LD compaction.\n   *\n   * @param input the JSON-LD input to compact.\n   * @param ctx the context to compact with.\n   * @param [options] options to use:\n   *          [base] the base IRI to use.\n   *          [compactArrays] true to compact arrays to single values when\n   *            appropriate, false not to (default: true).\n   *          [compactToRelative] true to compact IRIs to be relative to document\n   *            base, false to keep absolute (default: true)\n   *          [graph] true to always output a top-level graph (default: false).\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [documentLoader(url, options)] the document loader.\n   *          [expansionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [framing] true if compaction is occuring during a framing operation.\n   *          [compactionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the compacted output.\n   */\n  jsonld.compact = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input, ctx, options) {\n      var expanded,\n        activeCtx,\n        compacted,\n        tmp,\n        i,\n        hasContext,\n        graphAlias,\n        graph,\n        _graph,\n        key,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(_args.length < 2)) {\n              _context.next = 2;\n              break;\n            }\n            throw new TypeError('Could not compact, too few arguments.');\n          case 2:\n            if (!(ctx === null)) {\n              _context.next = 4;\n              break;\n            }\n            throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {\n              code: 'invalid local context'\n            });\n          case 4:\n            if (!(input === null)) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt(\"return\", null);\n          case 6:\n            // set default options\n            options = _setDefaults(options, {\n              base: _isString(input) ? input : '',\n              compactArrays: true,\n              compactToRelative: true,\n              graph: false,\n              skipExpansion: false,\n              link: false,\n              issuer: new IdentifierIssuer('_:b'),\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n            if (options.link) {\n              // force skip expansion when linking, \"link\" is not part of the public\n              // API, it should only be called from framing\n              options.skipExpansion = true;\n            }\n            if (!options.compactToRelative) {\n              delete options.base;\n            }\n\n            // expand input\n            if (!options.skipExpansion) {\n              _context.next = 13;\n              break;\n            }\n            expanded = input;\n            _context.next = 16;\n            break;\n          case 13:\n            _context.next = 15;\n            return jsonld.expand(input, options);\n          case 15:\n            expanded = _context.sent;\n          case 16:\n            _context.next = 18;\n            return jsonld.processContext(_getInitialContext(options), ctx, options);\n          case 18:\n            activeCtx = _context.sent;\n            _context.next = 21;\n            return _compact({\n              activeCtx: activeCtx,\n              element: expanded,\n              options: options,\n              compactionMap: options.compactionMap\n            });\n          case 21:\n            compacted = _context.sent;\n            // perform clean up\n            if (options.compactArrays && !options.graph && _isArray(compacted)) {\n              if (compacted.length === 1) {\n                // simplify to a single item\n                compacted = compacted[0];\n              } else if (compacted.length === 0) {\n                // simplify to an empty object\n                compacted = {};\n              }\n            } else if (options.graph && _isObject(compacted)) {\n              // always use array if graph option is on\n              compacted = [compacted];\n            }\n\n            // follow @context key\n            if (_isObject(ctx) && '@context' in ctx) {\n              ctx = ctx['@context'];\n            }\n\n            // build output context\n            ctx = util.clone(ctx);\n            if (!_isArray(ctx)) {\n              ctx = [ctx];\n            }\n            // remove empty contexts\n            tmp = ctx;\n            ctx = [];\n            for (i = 0; i < tmp.length; ++i) {\n              if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n                ctx.push(tmp[i]);\n              }\n            }\n\n            // remove array if only one context\n            hasContext = ctx.length > 0;\n            if (ctx.length === 1) {\n              ctx = ctx[0];\n            }\n\n            // add context and/or @graph\n            if (_isArray(compacted)) {\n              // use '@graph' keyword\n              graphAlias = _compactIri({\n                activeCtx: activeCtx,\n                iri: '@graph',\n                relativeTo: {\n                  vocab: true\n                }\n              });\n              graph = compacted;\n              compacted = {};\n              if (hasContext) {\n                compacted['@context'] = ctx;\n              }\n              compacted[graphAlias] = graph;\n            } else if (_isObject(compacted) && hasContext) {\n              // reorder keys so @context is first\n              _graph = compacted;\n              compacted = {\n                '@context': ctx\n              };\n              for (key in _graph) {\n                compacted[key] = _graph[key];\n              }\n            }\n            return _context.abrupt(\"return\", compacted);\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Performs JSON-LD expansion.\n   *\n   * @param input the JSON-LD input to expand.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n   *            false not to, defaults to false.\n   *          [documentLoader(url, options)] the document loader.\n   *          [expansionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the expanded output.\n   */\n  jsonld.expand = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input, options) {\n      var toResolve,\n        contextsToProcess,\n        expandContext,\n        defaultBase,\n        remoteDoc,\n        activeCtx,\n        _i,\n        _contextsToProcess,\n        localCtx,\n        expanded,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_args2.length < 1)) {\n              _context2.next = 2;\n              break;\n            }\n            throw new TypeError('Could not expand, too few arguments.');\n          case 2:\n            // set default options\n            options = _setDefaults(options, {\n              keepFreeFloatingNodes: false,\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n            if (options.expansionMap === false) {\n              options.expansionMap = undefined;\n            }\n\n            // build set of objects that may have @contexts to resolve\n            toResolve = {}; // build set of contexts to process prior to expansion\n            contextsToProcess = []; // if an `expandContext` has been given ensure it gets resolved\n            if ('expandContext' in options) {\n              expandContext = util.clone(options.expandContext);\n              if (_isObject(expandContext) && '@context' in expandContext) {\n                toResolve.expandContext = expandContext;\n              } else {\n                toResolve.expandContext = {\n                  '@context': expandContext\n                };\n              }\n              contextsToProcess.push(toResolve.expandContext);\n            }\n\n            // if input is a string, attempt to dereference remote document\n            if (_isString(input)) {\n              _context2.next = 11;\n              break;\n            }\n            // input is not a URL, do not need to retrieve it first\n            toResolve.input = util.clone(input);\n            _context2.next = 17;\n            break;\n          case 11:\n            _context2.next = 13;\n            return jsonld.get(input, options);\n          case 13:\n            remoteDoc = _context2.sent;\n            defaultBase = remoteDoc.documentUrl;\n            toResolve.input = remoteDoc.document;\n            if (remoteDoc.contextUrl) {\n              // context included in HTTP link header and must be resolved\n              toResolve.remoteContext = {\n                '@context': remoteDoc.contextUrl\n              };\n              contextsToProcess.push(toResolve.remoteContext);\n            }\n          case 17:\n            // set default base\n            if (!('base' in options)) {\n              options.base = defaultBase || '';\n            }\n\n            // process any additional contexts\n            activeCtx = _getInitialContext(options);\n            _i = 0, _contextsToProcess = contextsToProcess;\n          case 20:\n            if (!(_i < _contextsToProcess.length)) {\n              _context2.next = 28;\n              break;\n            }\n            localCtx = _contextsToProcess[_i];\n            _context2.next = 24;\n            return _processContext({\n              activeCtx: activeCtx,\n              localCtx: localCtx,\n              options: options\n            });\n          case 24:\n            activeCtx = _context2.sent;\n          case 25:\n            _i++;\n            _context2.next = 20;\n            break;\n          case 28:\n            _context2.next = 30;\n            return _expand({\n              activeCtx: activeCtx,\n              element: toResolve.input,\n              options: options,\n              expansionMap: options.expansionMap\n            });\n          case 30:\n            expanded = _context2.sent;\n            // optimize away @graph with no other properties\n            if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) {\n              expanded = expanded['@graph'];\n            } else if (expanded === null) {\n              expanded = [];\n            }\n\n            // normalize to an array\n            if (!_isArray(expanded)) {\n              expanded = [expanded];\n            }\n            return _context2.abrupt(\"return\", expanded);\n          case 34:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Performs JSON-LD flattening.\n   *\n   * @param input the JSON-LD to flatten.\n   * @param ctx the context to use to compact the flattened output, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the flattened output.\n   */\n  jsonld.flatten = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(input, ctx, options) {\n      var expanded,\n        flattened,\n        compacted,\n        _args3 = arguments;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(_args3.length < 1)) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt(\"return\", new TypeError('Could not flatten, too few arguments.'));\n          case 2:\n            if (typeof ctx === 'function') {\n              ctx = null;\n            } else {\n              ctx = ctx || null;\n            }\n\n            // set default options\n            options = _setDefaults(options, {\n              base: _isString(input) ? input : '',\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n\n            // expand input\n            _context3.next = 6;\n            return jsonld.expand(input, options);\n          case 6:\n            expanded = _context3.sent;\n            // do flattening\n            flattened = _flatten(expanded);\n            if (!(ctx === null)) {\n              _context3.next = 10;\n              break;\n            }\n            return _context3.abrupt(\"return\", flattened);\n          case 10:\n            // compact result (force @graph option to true, skip expansion)\n            options.graph = true;\n            options.skipExpansion = true;\n            _context3.next = 14;\n            return jsonld.compact(flattened, ctx, options);\n          case 14:\n            compacted = _context3.sent;\n            return _context3.abrupt(\"return\", compacted);\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x6, _x7, _x8) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Performs JSON-LD framing.\n   *\n   * @param input the JSON-LD input to frame.\n   * @param frame the JSON-LD frame to use.\n   * @param [options] the framing options.\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n   *            (default: '@last').\n   *          [explicit] default @explicit flag (default: false).\n   *          [requireAll] default @requireAll flag (default: true).\n   *          [omitDefault] default @omitDefault flag (default: false).\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the framed output.\n   */\n  jsonld.frame = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(input, frame, options) {\n      var remoteDoc,\n        ctx,\n        frameContext,\n        activeCtx,\n        expanded,\n        opts,\n        expandedFrame,\n        frameKeys,\n        framed,\n        compacted,\n        _args4 = arguments;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(_args4.length < 2)) {\n              _context4.next = 2;\n              break;\n            }\n            throw new TypeError('Could not frame, too few arguments.');\n          case 2:\n            // set default options\n            options = _setDefaults(options, {\n              base: _isString(input) ? input : '',\n              embed: '@once',\n              explicit: false,\n              requireAll: false,\n              omitDefault: false,\n              bnodesToClear: [],\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n\n            // if frame is a string, attempt to dereference remote document\n            if (!_isString(frame)) {\n              _context4.next = 9;\n              break;\n            }\n            _context4.next = 6;\n            return jsonld.get(frame, options);\n          case 6:\n            remoteDoc = _context4.sent;\n            frame = remoteDoc.document;\n            if (remoteDoc.contextUrl) {\n              // inject link header @context into frame\n              ctx = frame['@context'];\n              if (!ctx) {\n                ctx = remoteDoc.contextUrl;\n              } else if (_isArray(ctx)) {\n                ctx.push(remoteDoc.contextUrl);\n              } else {\n                ctx = [ctx, remoteDoc.contextUrl];\n              }\n              frame['@context'] = ctx;\n            }\n          case 9:\n            frameContext = frame ? frame['@context'] || {} : {}; // process context\n            _context4.next = 12;\n            return jsonld.processContext(_getInitialContext(options), frameContext, options);\n          case 12:\n            activeCtx = _context4.sent;\n            // mode specific defaults\n            if (!options.hasOwnProperty('omitGraph')) {\n              options.omitGraph = _processingMode(activeCtx, 1.1);\n            }\n            if (!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {\n              options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);\n            }\n\n            // expand input\n            _context4.next = 17;\n            return jsonld.expand(input, options);\n          case 17:\n            expanded = _context4.sent;\n            // expand frame\n            opts = _objectSpread({}, options);\n            opts.isFrame = true;\n            opts.keepFreeFloatingNodes = true;\n            _context4.next = 23;\n            return jsonld.expand(frame, opts);\n          case 23:\n            expandedFrame = _context4.sent;\n            // if the unexpanded frame includes a key expanding to @graph, frame the\n            // default graph, otherwise, the merged graph\n            frameKeys = Object.keys(frame).map(function (key) {\n              return _expandIri(activeCtx, key, {\n                vocab: true\n              });\n            });\n            opts.merged = !frameKeys.includes('@graph');\n            opts.is11 = _processingMode(activeCtx, 1.1);\n\n            // do framing\n            framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n            opts.graph = !options.omitGraph;\n            opts.skipExpansion = true;\n            opts.link = {};\n            opts.framing = true;\n            _context4.next = 34;\n            return jsonld.compact(framed, frameContext, opts);\n          case 34:\n            compacted = _context4.sent;\n            // replace @null with null, compacting arrays\n            opts.link = {};\n            compacted = _cleanupNull(compacted, opts);\n            return _context4.abrupt(\"return\", compacted);\n          case 38:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x9, _x10, _x11) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * **Experimental**\n   *\n   * Links a JSON-LD document's nodes in memory.\n   *\n   * @param input the JSON-LD document to link.\n   * @param [ctx] the JSON-LD context to apply.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the linked output.\n   */\n  jsonld.link = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(input, ctx, options) {\n      var frame;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // API matches running frame with a wildcard frame and embed: '@link'\n            // get arguments\n            frame = {};\n            if (ctx) {\n              frame['@context'] = ctx;\n            }\n            frame['@embed'] = '@link';\n            return _context5.abrupt(\"return\", jsonld.frame(input, frame, options));\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return function (_x12, _x13, _x14) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Performs RDF dataset normalization on the given input. The input is JSON-LD\n   * unless the 'inputFormat' option is used. The output is an RDF dataset\n   * unless the 'format' option is used.\n   *\n   * @param input the input to normalize as JSON-LD or as a format specified by\n   *          the 'inputFormat' option.\n   * @param [options] the options to use:\n   *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n   *            `URGNA2012` (default: `URDNA2015`).\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [inputFormat] the format if input is not JSON-LD:\n   *            'application/n-quads' for N-Quads.\n   *          [format] the format if output is a string:\n   *            'application/n-quads' for N-Quads.\n   *          [documentLoader(url, options)] the document loader.\n   *          [useNative] true to use a native canonize algorithm\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the normalized output.\n   */\n  jsonld.normalize = jsonld.canonize = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(input, options) {\n      var parsedInput,\n        opts,\n        dataset,\n        _args6 = arguments;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!(_args6.length < 1)) {\n              _context6.next = 2;\n              break;\n            }\n            throw new TypeError('Could not canonize, too few arguments.');\n          case 2:\n            // set default options\n            options = _setDefaults(options, {\n              base: _isString(input) ? input : '',\n              algorithm: 'URDNA2015',\n              skipExpansion: false,\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n            if (!('inputFormat' in options)) {\n              _context6.next = 8;\n              break;\n            }\n            if (!(options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads')) {\n              _context6.next = 6;\n              break;\n            }\n            throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');\n          case 6:\n            // TODO: `await` for async parsers\n            parsedInput = NQuads.parse(input); // do canonicalization\n            return _context6.abrupt(\"return\", canonize.canonize(parsedInput, options));\n          case 8:\n            // convert to RDF dataset then do normalization\n            opts = _objectSpread({}, options);\n            delete opts.format;\n            opts.produceGeneralizedRdf = false;\n            _context6.next = 13;\n            return jsonld.toRDF(input, opts);\n          case 13:\n            dataset = _context6.sent;\n            return _context6.abrupt(\"return\", canonize.canonize(dataset, options));\n          case 15:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return function (_x15, _x16) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Converts an RDF dataset to JSON-LD.\n   *\n   * @param dataset a serialized string of RDF in a format specified by the\n   *          format option or an RDF dataset to convert.\n   * @param [options] the options to use:\n   *          [format] the format if dataset param must first be parsed:\n   *            'application/n-quads' for N-Quads (default).\n   *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n   *          [useRdfType] true to use rdf:type, false to use @type\n   *            (default: false).\n   *          [useNativeTypes] true to convert XSD types into native types\n   *            (boolean, integer, double), false not to (default: false).\n   *\n   * @return a Promise that resolves to the JSON-LD document.\n   */\n  jsonld.fromRDF = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(dataset, options) {\n      var _options,\n        format,\n        _options2,\n        rdfParser,\n        parsedDataset,\n        _args7 = arguments;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            if (!(_args7.length < 1)) {\n              _context7.next = 2;\n              break;\n            }\n            throw new TypeError('Could not convert from RDF, too few arguments.');\n          case 2:\n            // set default options\n            options = _setDefaults(options, {\n              format: _isString(dataset) ? 'application/n-quads' : undefined\n            });\n            _options = options, format = _options.format;\n            _options2 = options, rdfParser = _options2.rdfParser; // handle special format\n            if (!format) {\n              _context7.next = 11;\n              break;\n            }\n            // check supported formats\n            rdfParser = rdfParser || _rdfParsers[format];\n            if (rdfParser) {\n              _context7.next = 9;\n              break;\n            }\n            throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {\n              format: format\n            });\n          case 9:\n            _context7.next = 12;\n            break;\n          case 11:\n            // no-op parser, assume dataset already parsed\n            rdfParser = function rdfParser() {\n              return dataset;\n            };\n          case 12:\n            _context7.next = 14;\n            return rdfParser(dataset);\n          case 14:\n            parsedDataset = _context7.sent;\n            return _context7.abrupt(\"return\", _fromRDF(parsedDataset, options));\n          case 16:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return function (_x17, _x18) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Outputs the RDF dataset found in the given JSON-LD object.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [format] the format to use to output a string:\n   *            'application/n-quads' for N-Quads.\n   *          [produceGeneralizedRdf] true to output generalized RDF, false\n   *            to produce only standard RDF (default: false).\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the RDF dataset.\n   */\n  jsonld.toRDF = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(input, options) {\n      var expanded,\n        dataset,\n        _args8 = arguments;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(_args8.length < 1)) {\n              _context8.next = 2;\n              break;\n            }\n            throw new TypeError('Could not convert to RDF, too few arguments.');\n          case 2:\n            // set default options\n            options = _setDefaults(options, {\n              base: _isString(input) ? input : '',\n              skipExpansion: false,\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n\n            // TODO: support toRDF custom map?\n            if (!options.skipExpansion) {\n              _context8.next = 7;\n              break;\n            }\n            expanded = input;\n            _context8.next = 10;\n            break;\n          case 7:\n            _context8.next = 9;\n            return jsonld.expand(input, options);\n          case 9:\n            expanded = _context8.sent;\n          case 10:\n            // output RDF dataset\n            dataset = _toRDF(expanded, options);\n            if (!options.format) {\n              _context8.next = 15;\n              break;\n            }\n            if (!(options.format === 'application/n-quads' || options.format === 'application/nquads')) {\n              _context8.next = 14;\n              break;\n            }\n            return _context8.abrupt(\"return\", NQuads.serialize(dataset));\n          case 14:\n            throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {\n              format: options.format\n            });\n          case 15:\n            return _context8.abrupt(\"return\", dataset);\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return function (_x19, _x20) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * **Experimental**\n   *\n   * Recursively flattens the nodes in the given JSON-LD input into a merged\n   * map of node ID => node. All graphs will be merged into the default graph.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the merged node map.\n   */\n  jsonld.createNodeMap = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(input, options) {\n      var expanded,\n        _args9 = arguments;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!(_args9.length < 1)) {\n              _context9.next = 2;\n              break;\n            }\n            throw new TypeError('Could not create node map, too few arguments.');\n          case 2:\n            // set default options\n            options = _setDefaults(options, {\n              base: _isString(input) ? input : '',\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n\n            // expand input\n            _context9.next = 5;\n            return jsonld.expand(input, options);\n          case 5:\n            expanded = _context9.sent;\n            return _context9.abrupt(\"return\", _createMergedNodeMap(expanded, options));\n          case 7:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return function (_x21, _x22) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * **Experimental**\n   *\n   * Merges two or more JSON-LD documents into a single flattened document.\n   *\n   * @param docs the JSON-LD documents to merge together.\n   * @param ctx the context to use to compact the merged result, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [mergeNodes] true to merge properties for nodes with the same ID,\n   *            false to ignore new properties for nodes with the same ID once\n   *            the ID has been defined; note that this may not prevent merging\n   *            new properties where a node is in the `object` position\n   *            (default: true).\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the merged output.\n   */\n  jsonld.merge = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(docs, ctx, options) {\n      var expanded,\n        mergeNodes,\n        issuer,\n        graphs,\n        i,\n        doc,\n        _graphs,\n        graphName,\n        _nodeMap,\n        nodeMap,\n        key,\n        defaultGraph,\n        flattened,\n        keys,\n        ki,\n        node,\n        compacted,\n        _args10 = arguments;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            if (!(_args10.length < 1)) {\n              _context10.next = 2;\n              break;\n            }\n            throw new TypeError('Could not merge, too few arguments.');\n          case 2:\n            if (_isArray(docs)) {\n              _context10.next = 4;\n              break;\n            }\n            throw new TypeError('Could not merge, \"docs\" must be an array.');\n          case 4:\n            if (typeof ctx === 'function') {\n              ctx = null;\n            } else {\n              ctx = ctx || null;\n            }\n\n            // set default options\n            options = _setDefaults(options, {\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n\n            // expand all documents\n            _context10.next = 8;\n            return Promise.all(docs.map(function (doc) {\n              var opts = _objectSpread({}, options);\n              return jsonld.expand(doc, opts);\n            }));\n          case 8:\n            expanded = _context10.sent;\n            mergeNodes = true;\n            if ('mergeNodes' in options) {\n              mergeNodes = options.mergeNodes;\n            }\n            issuer = options.issuer || new IdentifierIssuer('_:b');\n            graphs = {\n              '@default': {}\n            };\n            i = 0;\n          case 14:\n            if (!(i < expanded.length)) {\n              _context10.next = 33;\n              break;\n            }\n            // uniquely relabel blank nodes\n            doc = util.relabelBlankNodes(expanded[i], {\n              issuer: new IdentifierIssuer('_:b' + i + '-')\n            }); // add nodes to the shared node map graphs if merging nodes, to a\n            // separate graph set if not\n            _graphs = mergeNodes || i === 0 ? graphs : {\n              '@default': {}\n            };\n            _createNodeMap(doc, _graphs, '@default', issuer);\n            if (!(_graphs !== graphs)) {\n              _context10.next = 30;\n              break;\n            }\n            _context10.t0 = _regeneratorRuntime().keys(_graphs);\n          case 20:\n            if ((_context10.t1 = _context10.t0()).done) {\n              _context10.next = 30;\n              break;\n            }\n            graphName = _context10.t1.value;\n            _nodeMap = _graphs[graphName];\n            if (graphName in graphs) {\n              _context10.next = 26;\n              break;\n            }\n            graphs[graphName] = _nodeMap;\n            return _context10.abrupt(\"continue\", 20);\n          case 26:\n            nodeMap = graphs[graphName];\n            for (key in _nodeMap) {\n              if (!(key in nodeMap)) {\n                nodeMap[key] = _nodeMap[key];\n              }\n            }\n            _context10.next = 20;\n            break;\n          case 30:\n            ++i;\n            _context10.next = 14;\n            break;\n          case 33:\n            // add all non-default graphs to default graph\n            defaultGraph = _mergeNodeMaps(graphs); // produce flattened output\n            flattened = [];\n            keys = Object.keys(defaultGraph).sort();\n            for (ki = 0; ki < keys.length; ++ki) {\n              node = defaultGraph[keys[ki]]; // only add full subjects to top-level\n              if (!_isSubjectReference(node)) {\n                flattened.push(node);\n              }\n            }\n            if (!(ctx === null)) {\n              _context10.next = 39;\n              break;\n            }\n            return _context10.abrupt(\"return\", flattened);\n          case 39:\n            // compact result (force @graph option to true, skip expansion)\n            options.graph = true;\n            options.skipExpansion = true;\n            _context10.next = 43;\n            return jsonld.compact(flattened, ctx, options);\n          case 43:\n            compacted = _context10.sent;\n            return _context10.abrupt(\"return\", compacted);\n          case 45:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return function (_x23, _x24, _x25) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * The default document loader for external documents.\n   *\n   * @param url the URL to load.\n   *\n   * @return a promise that resolves to the remote document.\n   */\n  Object.defineProperty(jsonld, 'documentLoader', {\n    get: function get() {\n      return jsonld._documentLoader;\n    },\n    set: function set(v) {\n      return jsonld._documentLoader = v;\n    }\n  });\n  // default document loader not implemented\n  jsonld.documentLoader = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(url) {\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            throw new JsonLdError('Could not retrieve a JSON-LD document from the URL. URL ' + 'dereferencing not implemented.', 'jsonld.LoadDocumentError', {\n              code: 'loading document failed',\n              url: url\n            });\n          case 1:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return function (_x26) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Gets a remote JSON-LD document using the default document loader or\n   * one given in the passed options.\n   *\n   * @param url the URL to fetch.\n   * @param [options] the options to use:\n   *          [documentLoader] the document loader to use.\n   *\n   * @return a Promise that resolves to the retrieved remote document.\n   */\n  jsonld.get = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(url, options) {\n      var load, remoteDoc;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            if (typeof options.documentLoader === 'function') {\n              load = options.documentLoader;\n            } else {\n              load = jsonld.documentLoader;\n            }\n            _context12.next = 3;\n            return load(url);\n          case 3:\n            remoteDoc = _context12.sent;\n            _context12.prev = 4;\n            if (remoteDoc.document) {\n              _context12.next = 7;\n              break;\n            }\n            throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');\n          case 7:\n            if (_isString(remoteDoc.document)) {\n              remoteDoc.document = JSON.parse(remoteDoc.document);\n            }\n            _context12.next = 13;\n            break;\n          case 10:\n            _context12.prev = 10;\n            _context12.t0 = _context12[\"catch\"](4);\n            throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {\n              code: 'loading document failed',\n              cause: _context12.t0,\n              remoteDoc: remoteDoc\n            });\n          case 13:\n            return _context12.abrupt(\"return\", remoteDoc);\n          case 14:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[4, 10]]);\n    }));\n    return function (_x27, _x28) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Processes a local context, resolving any URLs as necessary, and returns a\n   * new active context.\n   *\n   * @param activeCtx the current active context.\n   * @param localCtx the local context to process.\n   * @param [options] the options to use:\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the new active context.\n   */\n  jsonld.processContext = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(activeCtx, localCtx, options) {\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            // set default options\n            options = _setDefaults(options, {\n              base: '',\n              contextResolver: new ContextResolver({\n                sharedCache: _resolvedContextCache\n              })\n            });\n\n            // return initial context early for null context\n            if (!(localCtx === null)) {\n              _context13.next = 3;\n              break;\n            }\n            return _context13.abrupt(\"return\", _getInitialContext(options));\n          case 3:\n            // get URLs in localCtx\n            localCtx = util.clone(localCtx);\n            if (!(_isObject(localCtx) && '@context' in localCtx)) {\n              localCtx = {\n                '@context': localCtx\n              };\n            }\n            return _context13.abrupt(\"return\", _processContext({\n              activeCtx: activeCtx,\n              localCtx: localCtx,\n              options: options\n            }));\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13);\n    }));\n    return function (_x29, _x30, _x31) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  // backwards compatibility\n  jsonld.getContextValue = require('./context').getContextValue;\n\n  /**\n   * Document loaders.\n   */\n  jsonld.documentLoaders = {};\n\n  /**\n   * Assigns the default document loader for external document URLs to a built-in\n   * default. Supported types currently include: 'xhr' and 'node'.\n   *\n   * @param type the type to set.\n   * @param [params] the parameters required to use the document loader.\n   */\n  jsonld.useDocumentLoader = function (type) {\n    if (!(type in jsonld.documentLoaders)) {\n      throw new JsonLdError('Unknown document loader type: \"' + type + '\"', 'jsonld.UnknownDocumentLoader', {\n        type: type\n      });\n    }\n\n    // set document loader\n    jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));\n  };\n\n  /**\n   * Registers an RDF dataset parser by content-type, for use with\n   * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,\n   * a string of input. An RDF dataset parser can be synchronous or\n   * asynchronous (by returning a promise).\n   *\n   * @param contentType the content-type for the parser.\n   * @param parser(input) the parser function (takes a string as a parameter\n   *          and either returns an RDF dataset or a Promise that resolves to one.\n   */\n  jsonld.registerRDFParser = function (contentType, parser) {\n    _rdfParsers[contentType] = parser;\n  };\n\n  /**\n   * Unregisters an RDF dataset parser by content-type.\n   *\n   * @param contentType the content-type for the parser.\n   */\n  jsonld.unregisterRDFParser = function (contentType) {\n    delete _rdfParsers[contentType];\n  };\n\n  // register the N-Quads RDF parser\n  jsonld.registerRDFParser('application/n-quads', NQuads.parse);\n  jsonld.registerRDFParser('application/nquads', NQuads.parse);\n\n  /* URL API */\n  jsonld.url = require('./url');\n\n  /* Utility API */\n  jsonld.util = util;\n  // backwards compatibility\n  Object.assign(jsonld, util);\n\n  // reexpose API as jsonld.promises for backwards compatability\n  jsonld.promises = jsonld;\n\n  // backwards compatibility\n  jsonld.RequestQueue = require('./RequestQueue');\n\n  /* WebIDL API */\n  jsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);\n  platform.setupGlobals(jsonld);\n  platform.setupDocumentLoaders(jsonld);\n  function _setDefaults(options, _ref14) {\n    var _ref14$documentLoader = _ref14.documentLoader,\n      documentLoader = _ref14$documentLoader === void 0 ? jsonld.documentLoader : _ref14$documentLoader,\n      defaults = _objectWithoutProperties(_ref14, _excluded);\n    return Object.assign({}, {\n      documentLoader: documentLoader\n    }, defaults, options);\n  }\n\n  // end of jsonld API `wrapper` factory\n  return jsonld;\n};\n\n// external APIs:\n\n// used to generate a new jsonld API instance\nvar factory = function factory() {\n  return wrapper(function () {\n    return factory();\n  });\n};\n\n// wrap the main jsonld API instance\nwrapper(factory);\n// export API\nmodule.exports = factory;","map":{"version":3,"names":["canonize","require","platform","util","ContextResolver","IdentifierIssuer","JsonLdError","LRU","NQuads","_expand","expand","_flatten","flatten","_fromRDF","fromRDF","_toRDF","toRDF","_frameMergedOrDefault","frameMergedOrDefault","_cleanupNull","cleanupNull","_isArray","isArray","_isObject","isObject","_isString","isString","_isSubjectReference","isSubjectReference","_expandIri","expandIri","_getInitialContext","getInitialContext","_processContext","process","_processingMode","processingMode","_compact","compact","_compactIri","compactIri","_createNodeMap","createNodeMap","_createMergedNodeMap","createMergedNodeMap","_mergeNodeMaps","mergeNodeMaps","wrapper","jsonld","_rdfParsers","RESOLVED_CONTEXT_CACHE_MAX_SIZE","_resolvedContextCache","max","input","ctx","options","length","TypeError","code","_setDefaults","base","compactArrays","compactToRelative","graph","skipExpansion","link","issuer","contextResolver","sharedCache","expanded","processContext","activeCtx","element","compactionMap","compacted","clone","tmp","i","Object","keys","push","hasContext","graphAlias","iri","relativeTo","vocab","key","keepFreeFloatingNodes","expansionMap","undefined","toResolve","contextsToProcess","expandContext","get","remoteDoc","defaultBase","documentUrl","document","contextUrl","remoteContext","localCtx","flattened","frame","embed","explicit","requireAll","omitDefault","bnodesToClear","frameContext","hasOwnProperty","omitGraph","pruneBlankNodeIdentifiers","opts","isFrame","expandedFrame","frameKeys","map","merged","includes","is11","framed","framing","normalize","algorithm","inputFormat","parsedInput","parse","format","produceGeneralizedRdf","dataset","rdfParser","parsedDataset","serialize","merge","docs","Promise","all","doc","mergeNodes","graphs","relabelBlankNodes","_graphs","graphName","_nodeMap","nodeMap","defaultGraph","sort","ki","node","defineProperty","_documentLoader","set","v","documentLoader","url","load","JSON","cause","getContextValue","documentLoaders","useDocumentLoader","type","apply","Array","prototype","slice","call","arguments","registerRDFParser","contentType","parser","unregisterRDFParser","assign","promises","RequestQueue","JsonLdProcessor","setupGlobals","setupDocumentLoaders","defaults","factory","module","exports"],"sources":["E:/react-todo-app/node_modules/jsonld/lib/jsonld.js"],"sourcesContent":["/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2019 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst canonize = require('rdf-canonize');\nconst platform = require('./platform');\nconst util = require('./util');\nconst ContextResolver = require('./ContextResolver');\nconst IdentifierIssuer = util.IdentifierIssuer;\nconst JsonLdError = require('./JsonLdError');\nconst LRU = require('lru-cache');\nconst NQuads = require('./NQuads');\n\nconst {expand: _expand} = require('./expand');\nconst {flatten: _flatten} = require('./flatten');\nconst {fromRDF: _fromRDF} = require('./fromRdf');\nconst {toRDF: _toRDF} = require('./toRdf');\n\nconst {\n  frameMergedOrDefault: _frameMergedOrDefault,\n  cleanupNull: _cleanupNull\n} = require('./frame');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = require('./types');\n\nconst {\n  isSubjectReference: _isSubjectReference,\n} = require('./graphTypes');\n\nconst {\n  expandIri: _expandIri,\n  getInitialContext: _getInitialContext,\n  process: _processContext,\n  processingMode: _processingMode\n} = require('./context');\n\nconst {\n  compact: _compact,\n  compactIri: _compactIri\n} = require('./compact');\n\nconst {\n  createNodeMap: _createNodeMap,\n  createMergedNodeMap: _createMergedNodeMap,\n  mergeNodeMaps: _mergeNodeMaps\n} = require('./nodeMap');\n\n/* eslint-disable indent */\n// attaches jsonld API to the given object\nconst wrapper = function(jsonld) {\n\n/** Registered RDF dataset parsers hashed by content-type. */\nconst _rdfParsers = {};\n\n// resolved context cache\n// TODO: consider basing max on context size rather than number\nconst RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;\nconst _resolvedContextCache = new LRU({max: RESOLVED_CONTEXT_CACHE_MAX_SIZE});\n\n/* Core API */\n\n/**\n * Performs JSON-LD compaction.\n *\n * @param input the JSON-LD input to compact.\n * @param ctx the context to compact with.\n * @param [options] options to use:\n *          [base] the base IRI to use.\n *          [compactArrays] true to compact arrays to single values when\n *            appropriate, false not to (default: true).\n *          [compactToRelative] true to compact IRIs to be relative to document\n *            base, false to keep absolute (default: true)\n *          [graph] true to always output a top-level graph (default: false).\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [documentLoader(url, options)] the document loader.\n *          [expansionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [framing] true if compaction is occuring during a framing operation.\n *          [compactionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the compacted output.\n */\njsonld.compact = async function(input, ctx, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not compact, too few arguments.');\n  }\n\n  if(ctx === null) {\n    throw new JsonLdError(\n      'The compaction context must not be null.',\n      'jsonld.CompactError', {code: 'invalid local context'});\n  }\n\n  // nothing to compact\n  if(input === null) {\n    return null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    compactArrays: true,\n    compactToRelative: true,\n    graph: false,\n    skipExpansion: false,\n    link: false,\n    issuer: new IdentifierIssuer('_:b'),\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if(options.link) {\n    // force skip expansion when linking, \"link\" is not part of the public\n    // API, it should only be called from framing\n    options.skipExpansion = true;\n  }\n  if(!options.compactToRelative) {\n    delete options.base;\n  }\n\n  // expand input\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), ctx, options);\n\n  // do compaction\n  let compacted = await _compact({\n    activeCtx,\n    element: expanded,\n    options,\n    compactionMap: options.compactionMap\n  });\n\n  // perform clean up\n  if(options.compactArrays && !options.graph && _isArray(compacted)) {\n    if(compacted.length === 1) {\n      // simplify to a single item\n      compacted = compacted[0];\n    } else if(compacted.length === 0) {\n      // simplify to an empty object\n      compacted = {};\n    }\n  } else if(options.graph && _isObject(compacted)) {\n    // always use array if graph option is on\n    compacted = [compacted];\n  }\n\n  // follow @context key\n  if(_isObject(ctx) && '@context' in ctx) {\n    ctx = ctx['@context'];\n  }\n\n  // build output context\n  ctx = util.clone(ctx);\n  if(!_isArray(ctx)) {\n    ctx = [ctx];\n  }\n  // remove empty contexts\n  const tmp = ctx;\n  ctx = [];\n  for(let i = 0; i < tmp.length; ++i) {\n    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n      ctx.push(tmp[i]);\n    }\n  }\n\n  // remove array if only one context\n  const hasContext = (ctx.length > 0);\n  if(ctx.length === 1) {\n    ctx = ctx[0];\n  }\n\n  // add context and/or @graph\n  if(_isArray(compacted)) {\n    // use '@graph' keyword\n    const graphAlias = _compactIri({\n      activeCtx, iri: '@graph', relativeTo: {vocab: true}\n    });\n    const graph = compacted;\n    compacted = {};\n    if(hasContext) {\n      compacted['@context'] = ctx;\n    }\n    compacted[graphAlias] = graph;\n  } else if(_isObject(compacted) && hasContext) {\n    // reorder keys so @context is first\n    const graph = compacted;\n    compacted = {'@context': ctx};\n    for(const key in graph) {\n      compacted[key] = graph[key];\n    }\n  }\n\n  return compacted;\n};\n\n/**\n * Performs JSON-LD expansion.\n *\n * @param input the JSON-LD input to expand.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n *            false not to, defaults to false.\n *          [documentLoader(url, options)] the document loader.\n *          [expansionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the expanded output.\n */\njsonld.expand = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not expand, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    keepFreeFloatingNodes: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if(options.expansionMap === false) {\n    options.expansionMap = undefined;\n  }\n\n  // build set of objects that may have @contexts to resolve\n  const toResolve = {};\n\n  // build set of contexts to process prior to expansion\n  const contextsToProcess = [];\n\n  // if an `expandContext` has been given ensure it gets resolved\n  if('expandContext' in options) {\n    const expandContext = util.clone(options.expandContext);\n    if(_isObject(expandContext) && '@context' in expandContext) {\n      toResolve.expandContext = expandContext;\n    } else {\n      toResolve.expandContext = {'@context': expandContext};\n    }\n    contextsToProcess.push(toResolve.expandContext);\n  }\n\n  // if input is a string, attempt to dereference remote document\n  let defaultBase;\n  if(!_isString(input)) {\n    // input is not a URL, do not need to retrieve it first\n    toResolve.input = util.clone(input);\n  } else {\n    // load remote doc\n    const remoteDoc = await jsonld.get(input, options);\n    defaultBase = remoteDoc.documentUrl;\n    toResolve.input = remoteDoc.document;\n    if(remoteDoc.contextUrl) {\n      // context included in HTTP link header and must be resolved\n      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};\n      contextsToProcess.push(toResolve.remoteContext);\n    }\n  }\n\n  // set default base\n  if(!('base' in options)) {\n    options.base = defaultBase || '';\n  }\n\n  // process any additional contexts\n  let activeCtx = _getInitialContext(options);\n  for(const localCtx of contextsToProcess) {\n    activeCtx = await _processContext({activeCtx, localCtx, options});\n  }\n\n  // expand resolved input\n  let expanded = await _expand({\n    activeCtx,\n    element: toResolve.input,\n    options,\n    expansionMap: options.expansionMap\n  });\n\n  // optimize away @graph with no other properties\n  if(_isObject(expanded) && ('@graph' in expanded) &&\n    Object.keys(expanded).length === 1) {\n    expanded = expanded['@graph'];\n  } else if(expanded === null) {\n    expanded = [];\n  }\n\n  // normalize to an array\n  if(!_isArray(expanded)) {\n    expanded = [expanded];\n  }\n\n  return expanded;\n};\n\n/**\n * Performs JSON-LD flattening.\n *\n * @param input the JSON-LD to flatten.\n * @param ctx the context to use to compact the flattened output, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the flattened output.\n */\njsonld.flatten = async function(input, ctx, options) {\n  if(arguments.length < 1) {\n    return new TypeError('Could not flatten, too few arguments.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // do flattening\n  const flattened = _flatten(expanded);\n\n  if(ctx === null) {\n    // no compaction required\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n};\n\n/**\n * Performs JSON-LD framing.\n *\n * @param input the JSON-LD input to frame.\n * @param frame the JSON-LD frame to use.\n * @param [options] the framing options.\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n *            (default: '@last').\n *          [explicit] default @explicit flag (default: false).\n *          [requireAll] default @requireAll flag (default: true).\n *          [omitDefault] default @omitDefault flag (default: false).\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the framed output.\n */\njsonld.frame = async function(input, frame, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not frame, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    embed: '@once',\n    explicit: false,\n    requireAll: false,\n    omitDefault: false,\n    bnodesToClear: [],\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // if frame is a string, attempt to dereference remote document\n  if(_isString(frame)) {\n    // load remote doc\n    const remoteDoc = await jsonld.get(frame, options);\n    frame = remoteDoc.document;\n\n    if(remoteDoc.contextUrl) {\n      // inject link header @context into frame\n      let ctx = frame['@context'];\n      if(!ctx) {\n        ctx = remoteDoc.contextUrl;\n      } else if(_isArray(ctx)) {\n        ctx.push(remoteDoc.contextUrl);\n      } else {\n        ctx = [ctx, remoteDoc.contextUrl];\n      }\n      frame['@context'] = ctx;\n    }\n  }\n\n  const frameContext = frame ? frame['@context'] || {} : {};\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), frameContext, options);\n\n  // mode specific defaults\n  if(!options.hasOwnProperty('omitGraph')) {\n    options.omitGraph = _processingMode(activeCtx, 1.1);\n  }\n  if(!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {\n    options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);\n  }\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // expand frame\n  const opts = {...options};\n  opts.isFrame = true;\n  opts.keepFreeFloatingNodes = true;\n  const expandedFrame = await jsonld.expand(frame, opts);\n\n  // if the unexpanded frame includes a key expanding to @graph, frame the\n  // default graph, otherwise, the merged graph\n  const frameKeys = Object.keys(frame)\n    .map(key => _expandIri(activeCtx, key, {vocab: true}));\n  opts.merged = !frameKeys.includes('@graph');\n  opts.is11 = _processingMode(activeCtx, 1.1);\n\n  // do framing\n  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n\n  opts.graph = !options.omitGraph;\n  opts.skipExpansion = true;\n  opts.link = {};\n  opts.framing = true;\n  let compacted = await jsonld.compact(framed, frameContext, opts);\n\n  // replace @null with null, compacting arrays\n  opts.link = {};\n  compacted = _cleanupNull(compacted, opts);\n\n  return compacted;\n};\n\n/**\n * **Experimental**\n *\n * Links a JSON-LD document's nodes in memory.\n *\n * @param input the JSON-LD document to link.\n * @param [ctx] the JSON-LD context to apply.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the linked output.\n */\njsonld.link = async function(input, ctx, options) {\n  // API matches running frame with a wildcard frame and embed: '@link'\n  // get arguments\n  const frame = {};\n  if(ctx) {\n    frame['@context'] = ctx;\n  }\n  frame['@embed'] = '@link';\n  return jsonld.frame(input, frame, options);\n};\n\n/**\n * Performs RDF dataset normalization on the given input. The input is JSON-LD\n * unless the 'inputFormat' option is used. The output is an RDF dataset\n * unless the 'format' option is used.\n *\n * @param input the input to normalize as JSON-LD or as a format specified by\n *          the 'inputFormat' option.\n * @param [options] the options to use:\n *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n *            `URGNA2012` (default: `URDNA2015`).\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [inputFormat] the format if input is not JSON-LD:\n *            'application/n-quads' for N-Quads.\n *          [format] the format if output is a string:\n *            'application/n-quads' for N-Quads.\n *          [documentLoader(url, options)] the document loader.\n *          [useNative] true to use a native canonize algorithm\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the normalized output.\n */\njsonld.normalize = jsonld.canonize = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not canonize, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    algorithm: 'URDNA2015',\n    skipExpansion: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if('inputFormat' in options) {\n    if(options.inputFormat !== 'application/n-quads' &&\n      options.inputFormat !== 'application/nquads') {\n      throw new JsonLdError(\n        'Unknown canonicalization input format.',\n        'jsonld.CanonizeError');\n    }\n    // TODO: `await` for async parsers\n    const parsedInput = NQuads.parse(input);\n\n    // do canonicalization\n    return canonize.canonize(parsedInput, options);\n  }\n\n  // convert to RDF dataset then do normalization\n  const opts = {...options};\n  delete opts.format;\n  opts.produceGeneralizedRdf = false;\n  const dataset = await jsonld.toRDF(input, opts);\n\n  // do canonicalization\n  return canonize.canonize(dataset, options);\n};\n\n/**\n * Converts an RDF dataset to JSON-LD.\n *\n * @param dataset a serialized string of RDF in a format specified by the\n *          format option or an RDF dataset to convert.\n * @param [options] the options to use:\n *          [format] the format if dataset param must first be parsed:\n *            'application/n-quads' for N-Quads (default).\n *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n *          [useRdfType] true to use rdf:type, false to use @type\n *            (default: false).\n *          [useNativeTypes] true to convert XSD types into native types\n *            (boolean, integer, double), false not to (default: false).\n *\n * @return a Promise that resolves to the JSON-LD document.\n */\njsonld.fromRDF = async function(dataset, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert from RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    format: _isString(dataset) ? 'application/n-quads' : undefined\n  });\n\n  const {format} = options;\n  let {rdfParser} = options;\n\n  // handle special format\n  if(format) {\n    // check supported formats\n    rdfParser = rdfParser || _rdfParsers[format];\n    if(!rdfParser) {\n      throw new JsonLdError(\n        'Unknown input format.',\n        'jsonld.UnknownFormat', {format});\n    }\n  } else {\n    // no-op parser, assume dataset already parsed\n    rdfParser = () => dataset;\n  }\n\n  // rdfParser must be synchronous or return a promise, no callback support\n  const parsedDataset = await rdfParser(dataset);\n  return _fromRDF(parsedDataset, options);\n};\n\n/**\n * Outputs the RDF dataset found in the given JSON-LD object.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [format] the format to use to output a string:\n *            'application/n-quads' for N-Quads.\n *          [produceGeneralizedRdf] true to output generalized RDF, false\n *            to produce only standard RDF (default: false).\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the RDF dataset.\n */\njsonld.toRDF = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert to RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    skipExpansion: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // TODO: support toRDF custom map?\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    // expand input\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // output RDF dataset\n  const dataset = _toRDF(expanded, options);\n  if(options.format) {\n    if(options.format === 'application/n-quads' ||\n      options.format === 'application/nquads') {\n      return NQuads.serialize(dataset);\n    }\n    throw new JsonLdError(\n      'Unknown output format.',\n      'jsonld.UnknownFormat', {format: options.format});\n  }\n\n  return dataset;\n};\n\n/**\n * **Experimental**\n *\n * Recursively flattens the nodes in the given JSON-LD input into a merged\n * map of node ID => node. All graphs will be merged into the default graph.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the merged node map.\n */\njsonld.createNodeMap = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not create node map, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  return _createMergedNodeMap(expanded, options);\n};\n\n/**\n * **Experimental**\n *\n * Merges two or more JSON-LD documents into a single flattened document.\n *\n * @param docs the JSON-LD documents to merge together.\n * @param ctx the context to use to compact the merged result, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [mergeNodes] true to merge properties for nodes with the same ID,\n *            false to ignore new properties for nodes with the same ID once\n *            the ID has been defined; note that this may not prevent merging\n *            new properties where a node is in the `object` position\n *            (default: true).\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the merged output.\n */\njsonld.merge = async function(docs, ctx, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not merge, too few arguments.');\n  }\n  if(!_isArray(docs)) {\n    throw new TypeError('Could not merge, \"docs\" must be an array.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand all documents\n  const expanded = await Promise.all(docs.map(doc => {\n    const opts = {...options};\n    return jsonld.expand(doc, opts);\n  }));\n\n  let mergeNodes = true;\n  if('mergeNodes' in options) {\n    mergeNodes = options.mergeNodes;\n  }\n\n  const issuer = options.issuer || new IdentifierIssuer('_:b');\n  const graphs = {'@default': {}};\n\n  for(let i = 0; i < expanded.length; ++i) {\n    // uniquely relabel blank nodes\n    const doc = util.relabelBlankNodes(expanded[i], {\n      issuer: new IdentifierIssuer('_:b' + i + '-')\n    });\n\n    // add nodes to the shared node map graphs if merging nodes, to a\n    // separate graph set if not\n    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};\n    _createNodeMap(doc, _graphs, '@default', issuer);\n\n    if(_graphs !== graphs) {\n      // merge document graphs but don't merge existing nodes\n      for(const graphName in _graphs) {\n        const _nodeMap = _graphs[graphName];\n        if(!(graphName in graphs)) {\n          graphs[graphName] = _nodeMap;\n          continue;\n        }\n        const nodeMap = graphs[graphName];\n        for(const key in _nodeMap) {\n          if(!(key in nodeMap)) {\n            nodeMap[key] = _nodeMap[key];\n          }\n        }\n      }\n    }\n  }\n\n  // add all non-default graphs to default graph\n  const defaultGraph = _mergeNodeMaps(graphs);\n\n  // produce flattened output\n  const flattened = [];\n  const keys = Object.keys(defaultGraph).sort();\n  for(let ki = 0; ki < keys.length; ++ki) {\n    const node = defaultGraph[keys[ki]];\n    // only add full subjects to top-level\n    if(!_isSubjectReference(node)) {\n      flattened.push(node);\n    }\n  }\n\n  if(ctx === null) {\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n};\n\n/**\n * The default document loader for external documents.\n *\n * @param url the URL to load.\n *\n * @return a promise that resolves to the remote document.\n */\nObject.defineProperty(jsonld, 'documentLoader', {\n  get: () => jsonld._documentLoader,\n  set: v => jsonld._documentLoader = v\n});\n// default document loader not implemented\njsonld.documentLoader = async url => {\n  throw new JsonLdError(\n    'Could not retrieve a JSON-LD document from the URL. URL ' +\n    'dereferencing not implemented.', 'jsonld.LoadDocumentError',\n    {code: 'loading document failed', url});\n};\n\n/**\n * Gets a remote JSON-LD document using the default document loader or\n * one given in the passed options.\n *\n * @param url the URL to fetch.\n * @param [options] the options to use:\n *          [documentLoader] the document loader to use.\n *\n * @return a Promise that resolves to the retrieved remote document.\n */\njsonld.get = async function(url, options) {\n  let load;\n  if(typeof options.documentLoader === 'function') {\n    load = options.documentLoader;\n  } else {\n    load = jsonld.documentLoader;\n  }\n\n  const remoteDoc = await load(url);\n\n  try {\n    if(!remoteDoc.document) {\n      throw new JsonLdError(\n        'No remote document found at the given URL.',\n        'jsonld.NullRemoteDocument');\n    }\n    if(_isString(remoteDoc.document)) {\n      remoteDoc.document = JSON.parse(remoteDoc.document);\n    }\n  } catch(e) {\n    throw new JsonLdError(\n      'Could not retrieve a JSON-LD document from the URL.',\n      'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        cause: e,\n        remoteDoc\n      });\n  }\n\n  return remoteDoc;\n};\n\n/**\n * Processes a local context, resolving any URLs as necessary, and returns a\n * new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param [options] the options to use:\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the new active context.\n */\njsonld.processContext = async function(\n  activeCtx, localCtx, options) {\n  // set default options\n  options = _setDefaults(options, {\n    base: '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // return initial context early for null context\n  if(localCtx === null) {\n    return _getInitialContext(options);\n  }\n\n  // get URLs in localCtx\n  localCtx = util.clone(localCtx);\n  if(!(_isObject(localCtx) && '@context' in localCtx)) {\n    localCtx = {'@context': localCtx};\n  }\n\n  return _processContext({activeCtx, localCtx, options});\n};\n\n// backwards compatibility\njsonld.getContextValue = require('./context').getContextValue;\n\n/**\n * Document loaders.\n */\njsonld.documentLoaders = {};\n\n/**\n * Assigns the default document loader for external document URLs to a built-in\n * default. Supported types currently include: 'xhr' and 'node'.\n *\n * @param type the type to set.\n * @param [params] the parameters required to use the document loader.\n */\njsonld.useDocumentLoader = function(type) {\n  if(!(type in jsonld.documentLoaders)) {\n    throw new JsonLdError(\n      'Unknown document loader type: \"' + type + '\"',\n      'jsonld.UnknownDocumentLoader',\n      {type});\n  }\n\n  // set document loader\n  jsonld.documentLoader = jsonld.documentLoaders[type].apply(\n    jsonld, Array.prototype.slice.call(arguments, 1));\n};\n\n/**\n * Registers an RDF dataset parser by content-type, for use with\n * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,\n * a string of input. An RDF dataset parser can be synchronous or\n * asynchronous (by returning a promise).\n *\n * @param contentType the content-type for the parser.\n * @param parser(input) the parser function (takes a string as a parameter\n *          and either returns an RDF dataset or a Promise that resolves to one.\n */\njsonld.registerRDFParser = function(contentType, parser) {\n  _rdfParsers[contentType] = parser;\n};\n\n/**\n * Unregisters an RDF dataset parser by content-type.\n *\n * @param contentType the content-type for the parser.\n */\njsonld.unregisterRDFParser = function(contentType) {\n  delete _rdfParsers[contentType];\n};\n\n// register the N-Quads RDF parser\njsonld.registerRDFParser('application/n-quads', NQuads.parse);\njsonld.registerRDFParser('application/nquads', NQuads.parse);\n\n/* URL API */\njsonld.url = require('./url');\n\n/* Utility API */\njsonld.util = util;\n// backwards compatibility\nObject.assign(jsonld, util);\n\n// reexpose API as jsonld.promises for backwards compatability\njsonld.promises = jsonld;\n\n// backwards compatibility\njsonld.RequestQueue = require('./RequestQueue');\n\n/* WebIDL API */\njsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);\n\nplatform.setupGlobals(jsonld);\nplatform.setupDocumentLoaders(jsonld);\n\nfunction _setDefaults(options, {\n  documentLoader = jsonld.documentLoader,\n  ...defaults\n}) {\n  return Object.assign({}, {documentLoader}, defaults, options);\n}\n\n// end of jsonld API `wrapper` factory\nreturn jsonld;\n};\n\n// external APIs:\n\n// used to generate a new jsonld API instance\nconst factory = function() {\n  return wrapper(function() {\n    return factory();\n  });\n};\n\n// wrap the main jsonld API instance\nwrapper(factory);\n// export API\nmodule.exports = factory;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}