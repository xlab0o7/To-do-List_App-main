{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FallbackRedirectHandler = void 0;\nconst SessionInfoManager_1 = require(\"../../../sessionInfo/SessionInfoManager\");\nclass FallbackRedirectHandler {\n  async canHandle(redirectUrl) {\n    try {\n      new URL(redirectUrl);\n      return true;\n    } catch (e) {\n      throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);\n    }\n  }\n  async handle(_redirectUrl) {\n    return (0, SessionInfoManager_1.getUnauthenticatedSession)();\n  }\n}\nexports.FallbackRedirectHandler = FallbackRedirectHandler;","map":{"version":3,"mappings":";;;;;;AA+BA;AAQA,MAAaA,uBAAuB;EAClC,MAAMC,SAAS,CAACC,WAAmB;IACjC,IAAI;MAGF,IAAIC,GAAG,CAACD,WAAW,CAAC;MACpB,OAAO,IAAI;KACZ,CAAC,OAAOE,CAAC,EAAE;MACV,MAAM,IAAIC,KAAK,CACb,IAAIH,WAAW,+DAA+DE,CAAC,EAAE,CAClF;;EAEL;EAEA,MAAME,MAAM,CAEVC,YAAoB;IAEpB,OAAO,kDAAyB,GAAE;EACpC;;AAnBFC","names":["FallbackRedirectHandler","canHandle","redirectUrl","URL","e","Error","handle","_redirectUrl","exports"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\incomingRedirectHandler\\FallbackRedirectHandler.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  IIncomingRedirectHandler,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\n\nimport { getUnauthenticatedSession } from \"../../../sessionInfo/SessionInfoManager\";\n\n/**\n * This class handles redirect IRIs without any query params, and returns an unauthenticated\n * session. It serves as a fallback so that consuming libraries don't have to test\n * for the query params themselves, and can always try to use them as a redirect IRI.\n * @hidden\n */\nexport class FallbackRedirectHandler implements IIncomingRedirectHandler {\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      // The next URL object is built for validating it.\n      // eslint-disable-next-line no-new\n      new URL(redirectUrl);\n      return true;\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`\n      );\n    }\n  }\n\n  async handle(\n    // The argument is ignored, but must be present to implement the interface\n    _redirectUrl: string\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\n    return getUnauthenticatedSession();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}