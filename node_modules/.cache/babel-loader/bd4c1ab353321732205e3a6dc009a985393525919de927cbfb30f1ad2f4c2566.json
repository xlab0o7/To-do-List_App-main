{"ast":null,"code":"function fromTerm(original) {\n  if (!original) {\n    return null;\n  }\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value);\n  }\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph();\n  }\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value));\n  }\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value);\n  }\n  if (original.termType === 'Quad') {\n    var subject = this.fromTerm(original.subject);\n    var predicate = this.fromTerm(original.predicate);\n    var object = this.fromTerm(original.object);\n    var graph = this.fromTerm(original.graph);\n    return this.quad(subject, predicate, object, graph);\n  }\n  if (original.termType === 'Variable') {\n    return this.variable(original.value);\n  }\n  throw new Error(\"unknown termType \".concat(original.termType));\n}\nmodule.exports = fromTerm;","map":{"version":3,"names":["fromTerm","original","termType","blankNode","value","defaultGraph","literal","language","namedNode","datatype","subject","predicate","object","graph","quad","variable","Error","module","exports"],"sources":["E:/react-todo-app/node_modules/@rdfjs/data-model/lib/fromTerm.js"],"sourcesContent":["function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n"],"mappings":"AAAA,SAASA,QAAQ,CAAEC,QAAQ,EAAE;EAC3B,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,IAAI;EACb;EAEA,IAAIA,QAAQ,CAACC,QAAQ,KAAK,WAAW,EAAE;IACrC,OAAO,IAAI,CAACC,SAAS,CAACF,QAAQ,CAACG,KAAK,CAAC;EACvC;EAEA,IAAIH,QAAQ,CAACC,QAAQ,KAAK,cAAc,EAAE;IACxC,OAAO,IAAI,CAACG,YAAY,EAAE;EAC5B;EAEA,IAAIJ,QAAQ,CAACC,QAAQ,KAAK,SAAS,EAAE;IACnC,OAAO,IAAI,CAACI,OAAO,CAACL,QAAQ,CAACG,KAAK,EAAEH,QAAQ,CAACM,QAAQ,IAAI,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACQ,QAAQ,CAACL,KAAK,CAAC,CAAC;EACnG;EAEA,IAAIH,QAAQ,CAACC,QAAQ,KAAK,WAAW,EAAE;IACrC,OAAO,IAAI,CAACM,SAAS,CAACP,QAAQ,CAACG,KAAK,CAAC;EACvC;EAEA,IAAIH,QAAQ,CAACC,QAAQ,KAAK,MAAM,EAAE;IAChC,IAAMQ,OAAO,GAAG,IAAI,CAACV,QAAQ,CAACC,QAAQ,CAACS,OAAO,CAAC;IAC/C,IAAMC,SAAS,GAAG,IAAI,CAACX,QAAQ,CAACC,QAAQ,CAACU,SAAS,CAAC;IACnD,IAAMC,MAAM,GAAG,IAAI,CAACZ,QAAQ,CAACC,QAAQ,CAACW,MAAM,CAAC;IAC7C,IAAMC,KAAK,GAAG,IAAI,CAACb,QAAQ,CAACC,QAAQ,CAACY,KAAK,CAAC;IAE3C,OAAO,IAAI,CAACC,IAAI,CAACJ,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,CAAC;EACrD;EAEA,IAAIZ,QAAQ,CAACC,QAAQ,KAAK,UAAU,EAAE;IACpC,OAAO,IAAI,CAACa,QAAQ,CAACd,QAAQ,CAACG,KAAK,CAAC;EACtC;EAEA,MAAM,IAAIY,KAAK,4BAAqBf,QAAQ,CAACC,QAAQ,EAAG;AAC1D;AAEAe,MAAM,CAACC,OAAO,GAAGlB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}