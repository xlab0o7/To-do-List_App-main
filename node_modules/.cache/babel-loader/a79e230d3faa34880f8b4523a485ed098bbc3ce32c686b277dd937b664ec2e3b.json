{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectWithoutProperties from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _excluded = [\"encryptedKey\"],\n  _excluded2 = [\"encryptedKey\"];\nimport { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\nfunction encryptKeyManagement(_x, _x2, _x3, _x4) {\n  return _encryptKeyManagement.apply(this, arguments);\n}\nfunction _encryptKeyManagement() {\n  _encryptKeyManagement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(alg, enc, key, providedCek) {\n    var providedParameters,\n      encryptedKey,\n      parameters,\n      cek,\n      apu,\n      apv,\n      ephemeralKey,\n      _yield$exportJWK,\n      x,\n      y,\n      crv,\n      kty,\n      sharedSecret,\n      kwAlg,\n      p2c,\n      p2s,\n      _yield$pbes2Kw,\n      iv,\n      _yield$aesGcmKw,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          providedParameters = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};\n          checkKeyType(alg, key, 'encrypt');\n          _context.t0 = alg;\n          _context.next = _context.t0 === 'dir' ? 5 : _context.t0 === 'ECDH-ES' ? 7 : _context.t0 === 'ECDH-ES+A128KW' ? 7 : _context.t0 === 'ECDH-ES+A192KW' ? 7 : _context.t0 === 'ECDH-ES+A256KW' ? 7 : _context.t0 === 'RSA1_5' ? 39 : _context.t0 === 'RSA-OAEP' ? 39 : _context.t0 === 'RSA-OAEP-256' ? 39 : _context.t0 === 'RSA-OAEP-384' ? 39 : _context.t0 === 'RSA-OAEP-512' ? 39 : _context.t0 === 'PBES2-HS256+A128KW' ? 44 : _context.t0 === 'PBES2-HS384+A192KW' ? 44 : _context.t0 === 'PBES2-HS512+A256KW' ? 44 : _context.t0 === 'A128KW' ? 53 : _context.t0 === 'A192KW' ? 53 : _context.t0 === 'A256KW' ? 53 : _context.t0 === 'A128GCMKW' ? 58 : _context.t0 === 'A192GCMKW' ? 58 : _context.t0 === 'A256GCMKW' ? 58 : 67;\n          break;\n        case 5:\n          cek = key;\n          return _context.abrupt(\"break\", 68);\n        case 7:\n          if (ECDH.ecdhAllowed(key)) {\n            _context.next = 9;\n            break;\n          }\n          throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n        case 9:\n          apu = providedParameters.apu, apv = providedParameters.apv;\n          ephemeralKey = providedParameters.epk;\n          _context.t1 = ephemeralKey;\n          if (_context.t1) {\n            _context.next = 16;\n            break;\n          }\n          _context.next = 15;\n          return ECDH.generateEpk(key);\n        case 15:\n          ephemeralKey = _context.sent.privateKey;\n        case 16:\n          _context.next = 18;\n          return exportJWK(ephemeralKey);\n        case 18:\n          _yield$exportJWK = _context.sent;\n          x = _yield$exportJWK.x;\n          y = _yield$exportJWK.y;\n          crv = _yield$exportJWK.crv;\n          kty = _yield$exportJWK.kty;\n          _context.next = 25;\n          return ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n        case 25:\n          sharedSecret = _context.sent;\n          parameters = {\n            epk: {\n              x: x,\n              crv: crv,\n              kty: kty\n            }\n          };\n          if (kty === 'EC') parameters.epk.y = y;\n          if (apu) parameters.apu = base64url(apu);\n          if (apv) parameters.apv = base64url(apv);\n          if (!(alg === 'ECDH-ES')) {\n            _context.next = 33;\n            break;\n          }\n          cek = sharedSecret;\n          return _context.abrupt(\"break\", 68);\n        case 33:\n          cek = providedCek || generateCek(enc);\n          kwAlg = alg.slice(-6);\n          _context.next = 37;\n          return aesKw(kwAlg, sharedSecret, cek);\n        case 37:\n          encryptedKey = _context.sent;\n          return _context.abrupt(\"break\", 68);\n        case 39:\n          cek = providedCek || generateCek(enc);\n          _context.next = 42;\n          return rsaEs(alg, key, cek);\n        case 42:\n          encryptedKey = _context.sent;\n          return _context.abrupt(\"break\", 68);\n        case 44:\n          cek = providedCek || generateCek(enc);\n          p2c = providedParameters.p2c, p2s = providedParameters.p2s;\n          _context.next = 48;\n          return pbes2Kw(alg, key, cek, p2c, p2s);\n        case 48:\n          _yield$pbes2Kw = _context.sent;\n          encryptedKey = _yield$pbes2Kw.encryptedKey;\n          parameters = _objectWithoutProperties(_yield$pbes2Kw, _excluded);\n          _yield$pbes2Kw;\n          return _context.abrupt(\"break\", 68);\n        case 53:\n          cek = providedCek || generateCek(enc);\n          _context.next = 56;\n          return aesKw(alg, key, cek);\n        case 56:\n          encryptedKey = _context.sent;\n          return _context.abrupt(\"break\", 68);\n        case 58:\n          cek = providedCek || generateCek(enc);\n          iv = providedParameters.iv;\n          _context.next = 62;\n          return aesGcmKw(alg, key, cek, iv);\n        case 62:\n          _yield$aesGcmKw = _context.sent;\n          encryptedKey = _yield$aesGcmKw.encryptedKey;\n          parameters = _objectWithoutProperties(_yield$aesGcmKw, _excluded2);\n          _yield$aesGcmKw;\n          return _context.abrupt(\"break\", 68);\n        case 67:\n          throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n        case 68:\n          return _context.abrupt(\"return\", {\n            cek: cek,\n            encryptedKey: encryptedKey,\n            parameters: parameters\n          });\n        case 69:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _encryptKeyManagement.apply(this, arguments);\n}\nexport default encryptKeyManagement;","map":{"version":3,"names":["wrap","aesKw","ECDH","encrypt","pbes2Kw","rsaEs","encode","base64url","generateCek","bitLength","cekLength","JOSENotSupported","exportJWK","checkKeyType","aesGcmKw","encryptKeyManagement","alg","enc","key","providedCek","providedParameters","cek","ecdhAllowed","apu","apv","ephemeralKey","epk","generateEpk","privateKey","x","y","crv","kty","deriveKey","parseInt","slice","sharedSecret","parameters","kwAlg","encryptedKey","p2c","p2s","iv"],"sources":["E:/react-todo-app/node_modules/jose/dist/browser/lib/encrypt_key_management.js"],"sourcesContent":["import { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\nasync function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {\n    let encryptedKey;\n    let parameters;\n    let cek;\n    checkKeyType(alg, key, 'encrypt');\n    switch (alg) {\n        case 'dir': {\n            cek = key;\n            break;\n        }\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            if (!ECDH.ecdhAllowed(key)) {\n                throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n            }\n            const { apu, apv } = providedParameters;\n            let { epk: ephemeralKey } = providedParameters;\n            ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n            const { x, y, crv, kty } = await exportJWK(ephemeralKey);\n            const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n            parameters = { epk: { x, crv, kty } };\n            if (kty === 'EC')\n                parameters.epk.y = y;\n            if (apu)\n                parameters.apu = base64url(apu);\n            if (apv)\n                parameters.apv = base64url(apv);\n            if (alg === 'ECDH-ES') {\n                cek = sharedSecret;\n                break;\n            }\n            cek = providedCek || generateCek(enc);\n            const kwAlg = alg.slice(-6);\n            encryptedKey = await aesKw(kwAlg, sharedSecret, cek);\n            break;\n        }\n        case 'RSA1_5':\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await rsaEs(alg, key, cek);\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW': {\n            cek = providedCek || generateCek(enc);\n            const { p2c, p2s } = providedParameters;\n            ({ encryptedKey, ...parameters } = await pbes2Kw(alg, key, cek, p2c, p2s));\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await aesKw(alg, key, cek);\n            break;\n        }\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW': {\n            cek = providedCek || generateCek(enc);\n            const { iv } = providedParameters;\n            ({ encryptedKey, ...parameters } = await aesGcmKw(alg, key, cek, iv));\n            break;\n        }\n        default: {\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n        }\n    }\n    return { cek, encryptedKey, parameters };\n}\nexport default encryptKeyManagement;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}