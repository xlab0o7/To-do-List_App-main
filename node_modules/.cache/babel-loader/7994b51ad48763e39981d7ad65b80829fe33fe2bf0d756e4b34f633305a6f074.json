{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _objectSpread = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _defineProperty = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _createForOfIteratorHelper = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _require = require('./context'),\n  isKeyword = _require.isKeyword;\nvar graphTypes = require('./graphTypes');\nvar types = require('./types');\nvar util = require('./util');\nvar url = require('./url');\nvar JsonLdError = require('./JsonLdError');\nvar _require2 = require('./nodeMap'),\n  _createNodeMap = _require2.createNodeMap,\n  _mergeNodeMapGraphs = _require2.mergeNodeMapGraphs;\nvar api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = function (input, frame, options) {\n  // create framing state\n  var state = {\n    options: options,\n    embedded: false,\n    graph: '@default',\n    graphMap: {\n      '@default': {}\n    },\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  var issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if (options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  var framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if (options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear = Object.keys(state.bnodeMap).filter(function (id) {\n      return state.bnodeMap[id].length === 1;\n    });\n  }\n\n  // remove @preserve from results\n  options.link = {};\n  return _cleanupPreserve(framed, options);\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = function (state, subjects, frame, parent) {\n  var property = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  var options = state.options;\n  var flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // get link for current graph\n  if (!state.link.hasOwnProperty(state.graph)) {\n    state.link[state.graph] = {};\n  }\n  var link = state.link[state.graph];\n\n  // filter out subjects that match the frame\n  var matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  var ids = Object.keys(matches).sort();\n  var _iterator = _createForOfIteratorHelper(ids),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var id = _step.value;\n      var subject = matches[id];\n\n      /* Note: In order to treat each top-level match as a compartmentalized\n      result, clear the unique embedded subjects map when the property is null,\n      which only occurs at the top-level. */\n      if (property === null) {\n        state.uniqueEmbeds = _defineProperty({}, state.graph, {});\n      } else {\n        state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n      }\n      if (flags.embed === '@link' && id in link) {\n        // TODO: may want to also match an existing linked subject against\n        // the current frame ... so different frames could produce different\n        // subjects that are only shared in-memory when the frames are the same\n\n        // add existing linked subject\n        _addFrameOutput(parent, property, link[id]);\n        return \"continue\";\n      }\n\n      // start output for subject\n      var output = {\n        '@id': id\n      };\n      if (id.indexOf('_:') === 0) {\n        util.addValue(state.bnodeMap, id, output, {\n          propertyIsArray: true\n        });\n      }\n      link[id] = output;\n\n      // validate @embed\n      if ((flags.embed === '@first' || flags.embed === '@last') && state.is11) {\n        throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {\n          code: 'invalid @embed value',\n          frame: frame\n        });\n      }\n      if (!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n        // skip adding this node object to the top level, as it was\n        // already included in another node object\n        return \"continue\";\n      }\n\n      // if embed is @never or if a circular reference would be created by an\n      // embed, the subject cannot be embedded, just add the reference;\n      // note that a circular reference won't occur when the embed flag is\n      // `@link` as the above check will short-circuit before reaching this point\n      if (state.embedded && (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack))) {\n        _addFrameOutput(parent, property, output);\n        return \"continue\";\n      }\n\n      // if only the first (or once) should be embedded\n      if (state.embedded && (flags.embed == '@first' || flags.embed == '@once') && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n        _addFrameOutput(parent, property, output);\n        return \"continue\";\n      }\n\n      // if only the last match should be embedded\n      if (flags.embed === '@last') {\n        // remove any existing embed\n        if (id in state.uniqueEmbeds[state.graph]) {\n          _removeEmbed(state, id);\n        }\n      }\n      state.uniqueEmbeds[state.graph][id] = {\n        parent: parent,\n        property: property\n      };\n\n      // push matching subject onto stack to enable circular embed checks\n      state.subjectStack.push({\n        subject: subject,\n        graph: state.graph\n      });\n\n      // subject is also the name of a graph\n      if (id in state.graphMap) {\n        var recurse = false;\n        var subframe = null;\n        if (!('@graph' in frame)) {\n          recurse = state.graph !== '@merged';\n          subframe = {};\n        } else {\n          subframe = frame['@graph'][0];\n          recurse = !(id === '@merged' || id === '@default');\n          if (!types.isObject(subframe)) {\n            subframe = {};\n          }\n        }\n        if (recurse) {\n          // recurse into graph\n          api.frame(_objectSpread(_objectSpread({}, state), {}, {\n            graph: id,\n            embedded: false\n          }), Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n        }\n      }\n\n      // if frame has @included, recurse over its sub-frame\n      if ('@included' in frame) {\n        api.frame(_objectSpread(_objectSpread({}, state), {}, {\n          embedded: false\n        }), subjects, frame['@included'], output, '@included');\n      }\n\n      // iterate over subject properties\n      var _iterator2 = _createForOfIteratorHelper(Object.keys(subject).sort()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var prop = _step2.value;\n          // copy keywords to output\n          if (isKeyword(prop)) {\n            output[prop] = util.clone(subject[prop]);\n            if (prop === '@type') {\n              // count bnode values of @type\n              var _iterator5 = _createForOfIteratorHelper(subject['@type']),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var type = _step5.value;\n                  if (type.indexOf('_:') === 0) {\n                    util.addValue(state.bnodeMap, type, output, {\n                      propertyIsArray: true\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n            continue;\n          }\n\n          // explicit is on and property isn't in the frame, skip processing\n          if (flags.explicit && !(prop in frame)) {\n            continue;\n          }\n\n          // add objects\n          var _iterator6 = _createForOfIteratorHelper(subject[prop]),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var o = _step6.value;\n              var _subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags);\n\n              // recurse into list\n              if (graphTypes.isList(o)) {\n                var _subframe2 = frame[prop] && frame[prop][0] && frame[prop][0]['@list'] ? frame[prop][0]['@list'] : _createImplicitFrame(flags);\n\n                // add empty list\n                var list = {\n                  '@list': []\n                };\n                _addFrameOutput(output, prop, list);\n\n                // add list objects\n                var src = o['@list'];\n                var _iterator7 = _createForOfIteratorHelper(src),\n                  _step7;\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    var oo = _step7.value;\n                    if (graphTypes.isSubjectReference(oo)) {\n                      // recurse into subject reference\n                      api.frame(_objectSpread(_objectSpread({}, state), {}, {\n                        embedded: true\n                      }), [oo['@id']], _subframe2, list, '@list');\n                    } else {\n                      // include other values automatically\n                      _addFrameOutput(list, '@list', util.clone(oo));\n                    }\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n              } else if (graphTypes.isSubjectReference(o)) {\n                // recurse into subject reference\n                api.frame(_objectSpread(_objectSpread({}, state), {}, {\n                  embedded: true\n                }), [o['@id']], _subframe, output, prop);\n              } else if (_valueMatch(_subframe[0], o)) {\n                // include other values, if they match\n                _addFrameOutput(output, prop, util.clone(o));\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n\n        // handle defaults\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(Object.keys(frame).sort()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _prop = _step3.value;\n          // skip keywords\n          if (_prop === '@type') {\n            if (!types.isObject(frame[_prop][0]) || !('@default' in frame[_prop][0])) {\n              continue;\n            }\n            // allow through default types\n          } else if (isKeyword(_prop)) {\n            continue;\n          }\n\n          // if omit default is off, then include default values for properties\n          // that appear in the next frame but are not in the matching subject\n          var next = frame[_prop][0] || {};\n          var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n          if (!omitDefaultOn && !(_prop in output)) {\n            var preserve = '@null';\n            if ('@default' in next) {\n              preserve = util.clone(next['@default']);\n            }\n            if (!types.isArray(preserve)) {\n              preserve = [preserve];\n            }\n            output[_prop] = [{\n              '@preserve': preserve\n            }];\n          }\n        }\n\n        // if embed reverse values by finding nodes having this subject as a value\n        // of the associated property\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var _iterator4 = _createForOfIteratorHelper(Object.keys(frame['@reverse'] || {}).sort()),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var reverseProp = _step4.value;\n          var _subframe3 = frame['@reverse'][reverseProp];\n          for (var _i = 0, _Object$keys = Object.keys(state.subjects); _i < _Object$keys.length; _i++) {\n            var _subject = _Object$keys[_i];\n            var nodeValues = util.getValues(state.subjects[_subject], reverseProp);\n            if (nodeValues.some(function (v) {\n              return v['@id'] === id;\n            })) {\n              // node has property referencing this subject, recurse\n              output['@reverse'] = output['@reverse'] || {};\n              util.addValue(output['@reverse'], reverseProp, [], {\n                propertyIsArray: true\n              });\n              api.frame(_objectSpread(_objectSpread({}, state), {}, {\n                embedded: true\n              }), [_subject], _subframe3, output['@reverse'][reverseProp], property);\n            }\n          }\n        }\n\n        // add output to parent\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      _addFrameOutput(parent, property, output);\n\n      // pop matching subject from circular ref-checking stack\n      state.subjectStack.pop();\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\n/**\n * Replace `@null` with `null`, removing it from arrays.\n *\n * @param input the framed, compacted output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\napi.cleanupNull = function (input, options) {\n  // recurse through arrays\n  if (types.isArray(input)) {\n    var noNulls = input.map(function (v) {\n      return api.cleanupNull(v, options);\n    });\n    return noNulls.filter(function (v) {\n      return v;\n    }); // removes nulls from array\n  }\n\n  if (input === '@null') {\n    return null;\n  }\n  if (types.isObject(input)) {\n    // handle in-memory linked nodes\n    if ('@id' in input) {\n      var id = input['@id'];\n      if (options.link.hasOwnProperty(id)) {\n        var idx = options.link[id].indexOf(input);\n        if (idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n    for (var key in input) {\n      input[key] = api.cleanupNull(input[key], options);\n    }\n  }\n  return input;\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  var frame = {};\n  for (var key in flags) {\n    if (flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for (var i = subjectStack.length - 1; i >= 0; --i) {\n    var subject = subjectStack[i];\n    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  var flag = '@' + name;\n  var rval = flag in frame ? frame[flag][0] : options[name];\n  if (name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if (rval === true) {\n      rval = '@once';\n    } else if (rval === false) {\n      rval = '@never';\n    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link' && rval !== '@first' && rval !== '@last' && rval !== '@once') {\n      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {\n        code: 'invalid @embed value',\n        frame: frame\n      });\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {\n      frame: frame\n    });\n  }\n  if ('@id' in frame[0]) {\n    var _iterator8 = _createForOfIteratorHelper(util.asArray(frame[0]['@id'])),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var id = _step8.value;\n        // @id must be wildcard or an IRI\n        if (!(types.isObject(id) || url.isAbsolute(id)) || types.isString(id) && id.indexOf('_:') === 0) {\n          throw new JsonLdError('Invalid JSON-LD syntax; invalid @id in frame.', 'jsonld.SyntaxError', {\n            code: 'invalid frame',\n            frame: frame\n          });\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n  if ('@type' in frame[0]) {\n    var _iterator9 = _createForOfIteratorHelper(util.asArray(frame[0]['@type'])),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var type = _step9.value;\n        // @id must be wildcard or an IRI\n        if (!(types.isObject(type) || url.isAbsolute(type)) || types.isString(type) && type.indexOf('_:') === 0) {\n          throw new JsonLdError('Invalid JSON-LD syntax; invalid @type in frame.', 'jsonld.SyntaxError', {\n            code: 'invalid frame',\n            frame: frame\n          });\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  var rval = {};\n  var _iterator10 = _createForOfIteratorHelper(subjects),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var id = _step10.value;\n      var subject = state.graphMap[state.graph][id];\n      if (_filterSubject(state, subject, frame, flags)) {\n        rval[id] = subject;\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  var wildcard = true;\n  var matchesSome = false;\n  var _loop2 = function _loop2() {\n    var matchThis = false;\n    var nodeValues = util.getValues(subject, key);\n    var isEmpty = util.getValues(frame, key).length === 0;\n    if (key === '@id') {\n      // match on no @id or any matching @id, including wildcard\n      if (types.isEmptyObject(frame['@id'][0] || {})) {\n        matchThis = true;\n      } else if (frame['@id'].length >= 0) {\n        matchThis = frame['@id'].includes(nodeValues[0]);\n      }\n      if (!flags.requireAll) {\n        return {\n          v: matchThis\n        };\n      }\n    } else if (key === '@type') {\n      // check @type (object value means 'any' type,\n      // fall through to ducktyping)\n      wildcard = false;\n      if (isEmpty) {\n        if (nodeValues.length > 0) {\n          // don't match on no @type\n          return {\n            v: false\n          };\n        }\n        matchThis = true;\n      } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {\n        // match on wildcard @type if there is a type\n        matchThis = nodeValues.length > 0;\n      } else {\n        // match on a specific @type\n        var _iterator11 = _createForOfIteratorHelper(frame['@type']),\n          _step11;\n        try {\n          var _loop3 = function _loop3() {\n            var type = _step11.value;\n            if (types.isObject(type) && '@default' in type) {\n              // match on default object\n              matchThis = true;\n            } else {\n              matchThis = matchThis || nodeValues.some(function (tt) {\n                return tt === type;\n              });\n            }\n          };\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            _loop3();\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n      if (!flags.requireAll) {\n        return {\n          v: matchThis\n        };\n      }\n    } else if (isKeyword(key)) {\n      return \"continue\";\n    } else {\n      // Force a copy of this frame entry so it can be manipulated\n      var thisFrame = util.getValues(frame, key)[0];\n      var hasDefault = false;\n      if (thisFrame) {\n        _validateFrame([thisFrame]);\n        hasDefault = '@default' in thisFrame;\n      }\n\n      // no longer a wildcard pattern if frame has any non-keyword properties\n      wildcard = false;\n\n      // skip, but allow match if node has no value for property, and frame has\n      // a default value\n      if (nodeValues.length === 0 && hasDefault) {\n        return \"continue\";\n      }\n\n      // if frame value is empty, don't match if subject has any value\n      if (nodeValues.length > 0 && isEmpty) {\n        return {\n          v: false\n        };\n      }\n      if (thisFrame === undefined) {\n        // node does not match if values is not empty and the value of property\n        // in frame is match none.\n        if (nodeValues.length > 0) {\n          return {\n            v: false\n          };\n        }\n        matchThis = true;\n      } else {\n        if (graphTypes.isList(thisFrame)) {\n          var listValue = thisFrame['@list'][0];\n          if (graphTypes.isList(nodeValues[0])) {\n            var nodeListValues = nodeValues[0]['@list'];\n            if (graphTypes.isValue(listValue)) {\n              // match on any matching value\n              matchThis = nodeListValues.some(function (lv) {\n                return _valueMatch(listValue, lv);\n              });\n            } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {\n              matchThis = nodeListValues.some(function (lv) {\n                return _nodeMatch(state, listValue, lv, flags);\n              });\n            }\n          }\n        } else if (graphTypes.isValue(thisFrame)) {\n          matchThis = nodeValues.some(function (nv) {\n            return _valueMatch(thisFrame, nv);\n          });\n        } else if (graphTypes.isSubjectReference(thisFrame)) {\n          matchThis = nodeValues.some(function (nv) {\n            return _nodeMatch(state, thisFrame, nv, flags);\n          });\n        } else if (types.isObject(thisFrame)) {\n          matchThis = nodeValues.length > 0;\n        } else {\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if (!matchThis && flags.requireAll) {\n      return {\n        v: false\n      };\n    }\n    matchesSome = matchesSome || matchThis;\n  };\n  for (var key in frame) {\n    var _ret2 = _loop2();\n    if (_ret2 === \"continue\") continue;\n    if (typeof _ret2 === \"object\") return _ret2.v;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  var embeds = state.uniqueEmbeds[state.graph];\n  var embed = embeds[id];\n  var parent = embed.parent;\n  var property = embed.property;\n\n  // create reference to replace embed\n  var subject = {\n    '@id': id\n  };\n\n  // remove existing embed\n  if (types.isArray(parent)) {\n    // replace subject with reference\n    for (var i = 0; i < parent.length; ++i) {\n      if (util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    var useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n    util.addValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n  }\n\n  // recursively remove dependent dangling embeds\n  var removeDependents = function removeDependents(id) {\n    // get embed keys as a separate array to enable deleting keys in map\n    var ids = Object.keys(embeds);\n    for (var _i2 = 0, _ids = ids; _i2 < _ids.length; _i2++) {\n      var next = _ids[_i2];\n      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Removes the @preserve keywords from expanded result of framing.\n *\n * @param input the framed, framed output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\nfunction _cleanupPreserve(input, options) {\n  // recurse through arrays\n  if (types.isArray(input)) {\n    return input.map(function (value) {\n      return _cleanupPreserve(value, options);\n    });\n  }\n  if (types.isObject(input)) {\n    // remove @preserve\n    if ('@preserve' in input) {\n      return input['@preserve'][0];\n    }\n\n    // skip @values\n    if (graphTypes.isValue(input)) {\n      return input;\n    }\n\n    // recurse through @lists\n    if (graphTypes.isList(input)) {\n      input['@list'] = _cleanupPreserve(input['@list'], options);\n      return input;\n    }\n\n    // handle in-memory linked nodes\n    if ('@id' in input) {\n      var id = input['@id'];\n      if (options.link.hasOwnProperty(id)) {\n        var idx = options.link[id].indexOf(input);\n        if (idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    // recurse through properties\n    for (var prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if (prop === '@id' && options.bnodesToClear.includes(input[prop])) {\n        delete input['@id'];\n        continue;\n      }\n      input[prop] = _cleanupPreserve(input[prop], options);\n    }\n  }\n  return input;\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if (types.isObject(parent)) {\n    util.addValue(parent, property, output, {\n      propertyIsArray: true\n    });\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if (!('@id' in value)) {\n    return false;\n  }\n  var nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  var v1 = value['@value'];\n  var t1 = value['@type'];\n  var l1 = value['@language'];\n  var v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];\n  var t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];\n  var l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];\n  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["require","isKeyword","graphTypes","types","util","url","JsonLdError","_createNodeMap","createNodeMap","_mergeNodeMapGraphs","mergeNodeMapGraphs","api","module","exports","frameMergedOrDefault","input","frame","options","state","embedded","graph","graphMap","subjectStack","link","bnodeMap","issuer","IdentifierIssuer","merged","subjects","framed","Object","keys","sort","pruneBlankNodeIdentifiers","bnodesToClear","filter","id","length","_cleanupPreserve","parent","property","_validateFrame","flags","embed","_getFrameFlag","explicit","requireAll","hasOwnProperty","matches","_filterSubjects","ids","subject","uniqueEmbeds","_addFrameOutput","output","indexOf","addValue","propertyIsArray","is11","code","_createsCircularReference","_removeEmbed","push","recurse","subframe","isObject","prop","clone","type","o","_createImplicitFrame","isList","list","src","oo","isSubjectReference","_valueMatch","next","omitDefaultOn","preserve","isArray","reverseProp","nodeValues","getValues","some","v","pop","cleanupNull","noNulls","map","idx","key","undefined","subjectToEmbed","i","name","flag","rval","asArray","isAbsolute","isString","_filterSubject","wildcard","matchesSome","matchThis","isEmpty","isEmptyObject","includes","tt","thisFrame","hasDefault","listValue","nodeListValues","isValue","lv","isSubject","_nodeMatch","nv","embeds","compareValues","useArray","removeValue","removeDependents","value","pattern","nodeObject","v1","t1","l1","v2","t2","l2"],"sources":["E:/react-todo-app/node_modules/jsonld/lib/frame.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {isKeyword} = require('./context');\nconst graphTypes = require('./graphTypes');\nconst types = require('./types');\nconst util = require('./util');\nconst url = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    embedded: false,\n    graph: '@default',\n    graphMap: {'@default': {}},\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if(options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if(options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear =\n      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n\n  // remove @preserve from results\n  options.link = {};\n  return _cleanupPreserve(framed, options);\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // get link for current graph\n  if(!state.link.hasOwnProperty(state.graph)) {\n    state.link[state.graph] = {};\n  }\n  const link = state.link[state.graph];\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for(const id of ids) {\n    const subject = matches[id];\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if(property === null) {\n      state.uniqueEmbeds = {[state.graph]: {}};\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    if(flags.embed === '@link' && id in link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, link[id]);\n      continue;\n    }\n\n    // start output for subject\n    const output = {'@id': id};\n    if(id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});\n    }\n    link[id] = output;\n\n    // validate @embed\n    if((flags.embed === '@first' || flags.embed === '@last') && state.is11) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; invalid value of @embed.',\n        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});\n    }\n\n    if(!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      // skip adding this node object to the top level, as it was\n      // already included in another node object\n      continue;\n    }\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if(state.embedded &&\n      (flags.embed === '@never' ||\n      _createsCircularReference(subject, state.graph, state.subjectStack))) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the first (or once) should be embedded\n    if(state.embedded &&\n       (flags.embed == '@first' || flags.embed == '@once') &&\n       state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if(flags.embed === '@last') {\n      // remove any existing embed\n      if(id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n    }\n\n    state.uniqueEmbeds[state.graph][id] = {parent, property};\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({subject, graph: state.graph});\n\n    // subject is also the name of a graph\n    if(id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if(!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        recurse = !(id === '@merged' || id === '@default');\n        if(!types.isObject(subframe)) {\n          subframe = {};\n        }\n      }\n\n      if(recurse) {\n        // recurse into graph\n        api.frame(\n          {...state, graph: id, embedded: false},\n          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n      }\n    }\n\n    // if frame has @included, recurse over its sub-frame\n    if('@included' in frame) {\n      api.frame(\n        {...state, embedded: false},\n        subjects, frame['@included'], output, '@included');\n    }\n\n    // iterate over subject properties\n    for(const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if(isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if(prop === '@type') {\n          // count bnode values of @type\n          for(const type of subject['@type']) {\n            if(type.indexOf('_:') === 0) {\n              util.addValue(\n                state.bnodeMap, type, output, {propertyIsArray: true});\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if(flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for(const o of subject[prop]) {\n        const subframe = (prop in frame ?\n          frame[prop] : _createImplicitFrame(flags));\n\n        // recurse into list\n        if(graphTypes.isList(o)) {\n          const subframe =\n            (frame[prop] && frame[prop][0] && frame[prop][0]['@list']) ?\n              frame[prop][0]['@list'] :\n              _createImplicitFrame(flags);\n\n          // add empty list\n          const list = {'@list': []};\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for(const oo of src) {\n            if(graphTypes.isSubjectReference(oo)) {\n              // recurse into subject reference\n              api.frame(\n                {...state, embedded: true},\n                [oo['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(oo));\n            }\n          }\n        } else if(graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(\n            {...state, embedded: true},\n            [o['@id']], subframe, output, prop);\n        } else if(_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for(const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if(prop === '@type') {\n        if(!types.isObject(frame[prop][0]) ||\n           !('@default' in frame[prop][0])) {\n          continue;\n        }\n        // allow through default types\n      } else if(isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if(!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if(!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{'@preserve': preserve}];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    for(const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {\n      const subframe = frame['@reverse'][reverseProp];\n      for(const subject of Object.keys(state.subjects)) {\n        const nodeValues =\n          util.getValues(state.subjects[subject], reverseProp);\n        if(nodeValues.some(v => v['@id'] === id)) {\n          // node has property referencing this subject, recurse\n          output['@reverse'] = output['@reverse'] || {};\n          util.addValue(\n            output['@reverse'], reverseProp, [], {propertyIsArray: true});\n          api.frame(\n            {...state, embedded: true},\n            [subject], subframe, output['@reverse'][reverseProp],\n            property);\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Replace `@null` with `null`, removing it from arrays.\n *\n * @param input the framed, compacted output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\napi.cleanupNull = (input, options) => {\n  // recurse through arrays\n  if(types.isArray(input)) {\n    const noNulls = input.map(v => api.cleanupNull(v, options));\n    return noNulls.filter(v => v); // removes nulls from array\n  }\n\n  if(input === '@null') {\n    return null;\n  }\n\n  if(types.isObject(input)) {\n    // handle in-memory linked nodes\n    if('@id' in input) {\n      const id = input['@id'];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    for(const key in input) {\n      input[key] = api.cleanupNull(input[key], options);\n    }\n  }\n  return input;\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for(const key in flags) {\n    if(flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for(let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if(subject.graph === graph &&\n      subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = (flag in frame ? frame[flag][0] : options[name]);\n  if(name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if(rval === true) {\n      rval = '@once';\n    } else if(rval === false) {\n      rval = '@never';\n    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link' &&\n      rval !== '@first' && rval !== '@last' && rval !== '@once') {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; invalid value of @embed.',\n        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',\n      'jsonld.SyntaxError', {frame});\n  }\n\n  if('@id' in frame[0]) {\n    for(const id of util.asArray(frame[0]['@id'])) {\n      // @id must be wildcard or an IRI\n      if(!(types.isObject(id) || url.isAbsolute(id)) ||\n        (types.isString(id) && id.indexOf('_:') === 0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; invalid @id in frame.',\n          'jsonld.SyntaxError', {code: 'invalid frame', frame});\n      }\n    }\n  }\n\n  if('@type' in frame[0]) {\n    for(const type of util.asArray(frame[0]['@type'])) {\n      // @id must be wildcard or an IRI\n      if(!(types.isObject(type) || url.isAbsolute(type)) ||\n        (types.isString(type) && type.indexOf('_:') === 0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; invalid @type in frame.',\n          'jsonld.SyntaxError', {code: 'invalid frame', frame});\n      }\n    }\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for(const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if(_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for(const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if(key === '@id') {\n      // match on no @id or any matching @id, including wildcard\n      if(types.isEmptyObject(frame['@id'][0] || {})) {\n        matchThis = true;\n      } else if(frame['@id'].length >= 0) {\n        matchThis = frame['@id'].includes(nodeValues[0]);\n      }\n      if(!flags.requireAll) {\n        return matchThis;\n      }\n    } else if(key === '@type') {\n      // check @type (object value means 'any' type,\n      // fall through to ducktyping)\n      wildcard = false;\n      if(isEmpty) {\n        if(nodeValues.length > 0) {\n          // don't match on no @type\n          return false;\n        }\n        matchThis = true;\n      } else if(frame['@type'].length === 1 &&\n        types.isEmptyObject(frame['@type'][0])) {\n        // match on wildcard @type if there is a type\n        matchThis = nodeValues.length > 0;\n      } else {\n        // match on a specific @type\n        for(const type of frame['@type']) {\n          if(types.isObject(type) && '@default' in type) {\n            // match on default object\n            matchThis = true;\n          } else {\n            matchThis = matchThis || nodeValues.some(tt => tt === type);\n          }\n        }\n      }\n      if(!flags.requireAll) {\n        return matchThis;\n      }\n    } else if(isKeyword(key)) {\n      continue;\n    } else {\n      // Force a copy of this frame entry so it can be manipulated\n      const thisFrame = util.getValues(frame, key)[0];\n      let hasDefault = false;\n      if(thisFrame) {\n        _validateFrame([thisFrame]);\n        hasDefault = '@default' in thisFrame;\n      }\n\n      // no longer a wildcard pattern if frame has any non-keyword properties\n      wildcard = false;\n\n      // skip, but allow match if node has no value for property, and frame has\n      // a default value\n      if(nodeValues.length === 0 && hasDefault) {\n        continue;\n      }\n\n      // if frame value is empty, don't match if subject has any value\n      if(nodeValues.length > 0 && isEmpty) {\n        return false;\n      }\n\n      if(thisFrame === undefined) {\n        // node does not match if values is not empty and the value of property\n        // in frame is match none.\n        if(nodeValues.length > 0) {\n          return false;\n        }\n        matchThis = true;\n      } else {\n        if(graphTypes.isList(thisFrame)) {\n          const listValue = thisFrame['@list'][0];\n          if(graphTypes.isList(nodeValues[0])) {\n            const nodeListValues = nodeValues[0]['@list'];\n\n            if(graphTypes.isValue(listValue)) {\n              // match on any matching value\n              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n            } else if(graphTypes.isSubject(listValue) ||\n              graphTypes.isSubjectReference(listValue)) {\n              matchThis = nodeListValues.some(lv => _nodeMatch(\n                state, listValue, lv, flags));\n            }\n          }\n        } else if(graphTypes.isValue(thisFrame)) {\n          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n        } else if(graphTypes.isSubjectReference(thisFrame)) {\n          matchThis =\n            nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n        } else if(types.isObject(thisFrame)) {\n          matchThis = nodeValues.length > 0;\n        } else {\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if(!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {'@id': id};\n\n  // remove existing embed\n  if(types.isArray(parent)) {\n    // replace subject with reference\n    for(let i = 0; i < parent.length; ++i) {\n      if(util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {propertyIsArray: useArray});\n    util.addValue(parent, property, subject, {propertyIsArray: useArray});\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for(const next of ids) {\n      if(next in embeds && types.isObject(embeds[next].parent) &&\n        embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Removes the @preserve keywords from expanded result of framing.\n *\n * @param input the framed, framed output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\nfunction _cleanupPreserve(input, options) {\n  // recurse through arrays\n  if(types.isArray(input)) {\n    return input.map(value => _cleanupPreserve(value, options));\n  }\n\n  if(types.isObject(input)) {\n    // remove @preserve\n    if('@preserve' in input) {\n      return input['@preserve'][0];\n    }\n\n    // skip @values\n    if(graphTypes.isValue(input)) {\n      return input;\n    }\n\n    // recurse through @lists\n    if(graphTypes.isList(input)) {\n      input['@list'] = _cleanupPreserve(input['@list'], options);\n      return input;\n    }\n\n    // handle in-memory linked nodes\n    if('@id' in input) {\n      const id = input['@id'];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    // recurse through properties\n    for(const prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if(prop === '@id' && options.bnodesToClear.includes(input[prop])) {\n        delete input['@id'];\n        continue;\n      }\n\n      input[prop] = _cleanupPreserve(input[prop], options);\n    }\n  }\n  return input;\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if(types.isObject(parent)) {\n    util.addValue(parent, property, output, {propertyIsArray: true});\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if(!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ?\n    (types.isArray(pattern['@value']) ?\n      pattern['@value'] : [pattern['@value']]) :\n    [];\n  const t2 = pattern['@type'] ?\n    (types.isArray(pattern['@type']) ?\n      pattern['@type'] : [pattern['@type']]) :\n    [];\n  const l2 = pattern['@language'] ?\n    (types.isArray(pattern['@language']) ?\n      pattern['@language'] : [pattern['@language']]) :\n    [];\n\n  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&\n    types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&\n    types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}