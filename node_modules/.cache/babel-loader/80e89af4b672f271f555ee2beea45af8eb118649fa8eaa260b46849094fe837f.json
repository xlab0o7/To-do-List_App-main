{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst JsonLdError = require('./JsonLdError');\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isEmptyObject: _isEmptyObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\nconst {\n  isList: _isList,\n  isValue: _isValue,\n  isGraph: _isGraph,\n  isSubject: _isSubject\n} = require('./graphTypes');\nconst {\n  expandIri: _expandIri,\n  getContextValue: _getContextValue,\n  isKeyword: _isKeyword,\n  process: _processContext,\n  processingMode: _processingMode\n} = require('./context');\nconst {\n  isAbsolute: _isAbsoluteIri\n} = require('./url');\nconst {\n  addValue: _addValue,\n  asArray: _asArray,\n  getValues: _getValues,\n  validateTypeValue: _validateTypeValue\n} = require('./util');\nconst api = {};\nmodule.exports = api;\nconst REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;\n\n/**\n * Recursively expands an element using the given context. Any context in\n * the element will be removed. All context URLs must have been retrieved\n * before calling this method.\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element, null for none.\n * @param element the element to expand.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param insideIndex true if the element is inside an index container,\n *          false if not.\n * @param typeScopedContext an optional type-scoped active context for\n *          expanding values of nodes that were expressed according to\n *          a type-scoped context.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n *\n * @return a Promise that resolves to the expanded value.\n */\napi.expand = async _ref => {\n  let {\n    activeCtx,\n    activeProperty = null,\n    element,\n    options = {},\n    insideList = false,\n    insideIndex = false,\n    typeScopedContext = null,\n    expansionMap = () => undefined\n  } = _ref;\n  // nothing to expand\n  if (element === null || element === undefined) {\n    return null;\n  }\n\n  // disable framing if activeProperty is @default\n  if (activeProperty === '@default') {\n    options = Object.assign({}, options, {\n      isFrame: false\n    });\n  }\n  if (!_isArray(element) && !_isObject(element)) {\n    // drop free-floating scalars that are not in lists unless custom mapped\n    if (!insideList && (activeProperty === null || _expandIri(activeCtx, activeProperty, {\n      vocab: true\n    }, options) === '@graph')) {\n      const mapped = await expansionMap({\n        unmappedValue: element,\n        activeCtx,\n        activeProperty,\n        options,\n        insideList\n      });\n      if (mapped === undefined) {\n        return null;\n      }\n      return mapped;\n    }\n\n    // expand element according to value expansion rules\n    return _expandValue({\n      activeCtx,\n      activeProperty,\n      value: element,\n      options\n    });\n  }\n\n  // recursively expand array\n  if (_isArray(element)) {\n    let rval = [];\n    const container = _getContextValue(activeCtx, activeProperty, '@container') || [];\n    insideList = insideList || container.includes('@list');\n    for (let i = 0; i < element.length; ++i) {\n      // expand element\n      let e = await api.expand({\n        activeCtx,\n        activeProperty,\n        element: element[i],\n        options,\n        expansionMap,\n        insideIndex,\n        typeScopedContext\n      });\n      if (insideList && _isArray(e)) {\n        e = {\n          '@list': e\n        };\n      }\n      if (e === null) {\n        e = await expansionMap({\n          unmappedValue: element[i],\n          activeCtx,\n          activeProperty,\n          parent: element,\n          index: i,\n          options,\n          expandedParent: rval,\n          insideList\n        });\n        if (e === undefined) {\n          continue;\n        }\n      }\n      if (_isArray(e)) {\n        rval = rval.concat(e);\n      } else {\n        rval.push(e);\n      }\n    }\n    return rval;\n  }\n\n  // recursively expand object:\n\n  // first, expand the active property\n  const expandedActiveProperty = _expandIri(activeCtx, activeProperty, {\n    vocab: true\n  }, options);\n\n  // Get any property-scoped context for activeProperty\n  const propertyScopedCtx = _getContextValue(activeCtx, activeProperty, '@context');\n\n  // second, determine if any type-scoped context should be reverted; it\n  // should only be reverted when the following are all true:\n  // 1. `element` is not a value or subject reference\n  // 2. `insideIndex` is false\n  typeScopedContext = typeScopedContext || (activeCtx.previousContext ? activeCtx : null);\n  let keys = Object.keys(element).sort();\n  let mustRevert = !insideIndex;\n  if (mustRevert && typeScopedContext && keys.length <= 2 && !keys.includes('@context')) {\n    for (const key of keys) {\n      const expandedProperty = _expandIri(typeScopedContext, key, {\n        vocab: true\n      }, options);\n      if (expandedProperty === '@value') {\n        // value found, ensure type-scoped context is used to expand it\n        mustRevert = false;\n        activeCtx = typeScopedContext;\n        break;\n      }\n      if (expandedProperty === '@id' && keys.length === 1) {\n        // subject reference found, do not revert\n        mustRevert = false;\n        break;\n      }\n    }\n  }\n  if (mustRevert) {\n    // revert type scoped context\n    activeCtx = activeCtx.revertToPreviousContext();\n  }\n\n  // apply property-scoped context after reverting term-scoped context\n  if (!_isUndefined(propertyScopedCtx)) {\n    activeCtx = await _processContext({\n      activeCtx,\n      localCtx: propertyScopedCtx,\n      propagate: true,\n      overrideProtected: true,\n      options\n    });\n  }\n\n  // if element has a context, process it\n  if ('@context' in element) {\n    activeCtx = await _processContext({\n      activeCtx,\n      localCtx: element['@context'],\n      options\n    });\n  }\n\n  // set the type-scoped context to the context on input, for use later\n  typeScopedContext = activeCtx;\n\n  // Remember the first key found expanding to @type\n  let typeKey = null;\n\n  // look for scoped contexts on `@type`\n  for (const key of keys) {\n    const expandedProperty = _expandIri(activeCtx, key, {\n      vocab: true\n    }, options);\n    if (expandedProperty === '@type') {\n      // set scoped contexts from @type\n      // avoid sorting if possible\n      typeKey = typeKey || key;\n      const value = element[key];\n      const types = Array.isArray(value) ? value.length > 1 ? value.slice().sort() : value : [value];\n      for (const type of types) {\n        const ctx = _getContextValue(typeScopedContext, type, '@context');\n        if (!_isUndefined(ctx)) {\n          activeCtx = await _processContext({\n            activeCtx,\n            localCtx: ctx,\n            options,\n            propagate: false\n          });\n        }\n      }\n    }\n  }\n\n  // process each key and value in element, ignoring @nest content\n  let rval = {};\n  await _expandObject({\n    activeCtx,\n    activeProperty,\n    expandedActiveProperty,\n    element,\n    expandedParent: rval,\n    options,\n    insideList,\n    typeKey,\n    typeScopedContext,\n    expansionMap\n  });\n\n  // get property count on expanded output\n  keys = Object.keys(rval);\n  let count = keys.length;\n  if ('@value' in rval) {\n    // @value must only have @language or @type\n    if ('@type' in rval && ('@language' in rval || '@direction' in rval)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an element containing \"@value\" may not ' + 'contain both \"@type\" and either \"@language\" or \"@direction\".', 'jsonld.SyntaxError', {\n        code: 'invalid value object',\n        element: rval\n      });\n    }\n    let validCount = count - 1;\n    if ('@type' in rval) {\n      validCount -= 1;\n    }\n    if ('@index' in rval) {\n      validCount -= 1;\n    }\n    if ('@language' in rval) {\n      validCount -= 1;\n    }\n    if ('@direction' in rval) {\n      validCount -= 1;\n    }\n    if (validCount !== 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an element containing \"@value\" may only ' + 'have an \"@index\" property and either \"@type\" ' + 'or either or both \"@language\" or \"@direction\".', 'jsonld.SyntaxError', {\n        code: 'invalid value object',\n        element: rval\n      });\n    }\n    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);\n    const types = _getValues(rval, '@type');\n\n    // drop null @values unless custom mapped\n    if (_processingMode(activeCtx, 1.1) && types.includes('@json') && types.length === 1) {\n      // Any value of @value is okay if @type: @json\n    } else if (values.length === 0) {\n      const mapped = await expansionMap({\n        unmappedValue: rval,\n        activeCtx,\n        activeProperty,\n        element,\n        options,\n        insideList\n      });\n      if (mapped !== undefined) {\n        rval = mapped;\n      } else {\n        rval = null;\n      }\n    } else if (!values.every(v => _isString(v) || _isEmptyObject(v)) && '@language' in rval) {\n      // if @language is present, @value must be a string\n      throw new JsonLdError('Invalid JSON-LD syntax; only strings may be language-tagged.', 'jsonld.SyntaxError', {\n        code: 'invalid language-tagged value',\n        element: rval\n      });\n    } else if (!types.every(t => _isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) || _isEmptyObject(t))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an element containing \"@value\" and \"@type\" ' + 'must have an absolute IRI for the value of \"@type\".', 'jsonld.SyntaxError', {\n        code: 'invalid typed value',\n        element: rval\n      });\n    }\n  } else if ('@type' in rval && !_isArray(rval['@type'])) {\n    // convert @type to an array\n    rval['@type'] = [rval['@type']];\n  } else if ('@set' in rval || '@list' in rval) {\n    // handle @set and @list\n    if (count > 1 && !(count === 2 && '@index' in rval)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; if an element has the property \"@set\" ' + 'or \"@list\", then it can have at most one other property that is ' + '\"@index\".', 'jsonld.SyntaxError', {\n        code: 'invalid set or list object',\n        element: rval\n      });\n    }\n    // optimize away @set\n    if ('@set' in rval) {\n      rval = rval['@set'];\n      keys = Object.keys(rval);\n      count = keys.length;\n    }\n  } else if (count === 1 && '@language' in rval) {\n    // drop objects with only @language unless custom mapped\n    const mapped = await expansionMap(rval, {\n      unmappedValue: rval,\n      activeCtx,\n      activeProperty,\n      element,\n      options,\n      insideList\n    });\n    if (mapped !== undefined) {\n      rval = mapped;\n    } else {\n      rval = null;\n    }\n  }\n\n  // drop certain top-level objects that do not occur in lists, unless custom\n  // mapped\n  if (_isObject(rval) && !options.keepFreeFloatingNodes && !insideList && (activeProperty === null || expandedActiveProperty === '@graph')) {\n    // drop empty object, top-level @value/@list, or object with only @id\n    if (count === 0 || '@value' in rval || '@list' in rval || count === 1 && '@id' in rval) {\n      const mapped = await expansionMap({\n        unmappedValue: rval,\n        activeCtx,\n        activeProperty,\n        element,\n        options,\n        insideList\n      });\n      if (mapped !== undefined) {\n        rval = mapped;\n      } else {\n        rval = null;\n      }\n    }\n  }\n  return rval;\n};\n\n/**\n * Expand each key and value of element adding to result\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element.\n * @param expandedActiveProperty the expansion of activeProperty\n * @param element the element to expand.\n * @param expandedParent the expanded result into which to add values.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param typeKey first key found expanding to @type.\n * @param typeScopedContext the context before reverting.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n */\nasync function _expandObject(_ref2) {\n  let {\n    activeCtx,\n    activeProperty,\n    expandedActiveProperty,\n    element,\n    expandedParent,\n    options = {},\n    insideList,\n    typeKey,\n    typeScopedContext,\n    expansionMap\n  } = _ref2;\n  const keys = Object.keys(element).sort();\n  const nests = [];\n  let unexpandedValue;\n\n  // Figure out if this is the type for a JSON literal\n  const isJsonType = element[typeKey] && _expandIri(activeCtx, _isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey], {\n    vocab: true\n  }, options) === '@json';\n  for (const key of keys) {\n    let value = element[key];\n    let expandedValue;\n\n    // skip @context\n    if (key === '@context') {\n      continue;\n    }\n\n    // expand property\n    let expandedProperty = _expandIri(activeCtx, key, {\n      vocab: true\n    }, options);\n\n    // drop non-absolute IRI keys that aren't keywords unless custom mapped\n    if (expandedProperty === null || !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {\n      // TODO: use `await` to support async\n      expandedProperty = expansionMap({\n        unmappedProperty: key,\n        activeCtx,\n        activeProperty,\n        parent: element,\n        options,\n        insideList,\n        value,\n        expandedParent\n      });\n      if (expandedProperty === undefined) {\n        continue;\n      }\n    }\n    if (_isKeyword(expandedProperty)) {\n      if (expandedActiveProperty === '@reverse') {\n        throw new JsonLdError('Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' + 'property.', 'jsonld.SyntaxError', {\n          code: 'invalid reverse property map',\n          value\n        });\n      }\n      if (expandedProperty in expandedParent && expandedProperty !== '@included' && expandedProperty !== '@type') {\n        throw new JsonLdError('Invalid JSON-LD syntax; colliding keywords detected.', 'jsonld.SyntaxError', {\n          code: 'colliding keywords',\n          keyword: expandedProperty\n        });\n      }\n    }\n\n    // syntax error if @id is not a string\n    if (expandedProperty === '@id') {\n      if (!_isString(value)) {\n        if (!options.isFrame) {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value must a string.', 'jsonld.SyntaxError', {\n            code: 'invalid @id value',\n            value\n          });\n        }\n        if (_isObject(value)) {\n          // empty object is a wildcard\n          if (!_isEmptyObject(value)) {\n            throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {\n              code: 'invalid @id value',\n              value\n            });\n          }\n        } else if (_isArray(value)) {\n          if (!value.every(v => _isString(v))) {\n            throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {\n              code: 'invalid @id value',\n              value\n            });\n          }\n        } else {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@id\" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {\n            code: 'invalid @id value',\n            value\n          });\n        }\n      }\n      _addValue(expandedParent, '@id', _asArray(value).map(v => _isString(v) ? _expandIri(activeCtx, v, {\n        base: true\n      }, options) : v), {\n        propertyIsArray: options.isFrame\n      });\n      continue;\n    }\n    if (expandedProperty === '@type') {\n      // if framing, can be a default object, but need to expand\n      // key to determine that\n      if (_isObject(value)) {\n        value = Object.fromEntries(Object.entries(value).map(_ref3 => {\n          let [k, v] = _ref3;\n          return [_expandIri(typeScopedContext, k, {\n            vocab: true\n          }), _asArray(v).map(vv => _expandIri(typeScopedContext, vv, {\n            base: true,\n            vocab: true\n          }))];\n        }));\n      }\n      _validateTypeValue(value, options.isFrame);\n      _addValue(expandedParent, '@type', _asArray(value).map(v => _isString(v) ? _expandIri(typeScopedContext, v, {\n        base: true,\n        vocab: true\n      }, options) : v), {\n        propertyIsArray: options.isFrame\n      });\n      continue;\n    }\n\n    // Included blocks are treated as an array of separate object nodes sharing\n    // the same referencing active_property.\n    // For 1.0, it is skipped as are other unknown keywords\n    if (expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {\n      const includedResult = _asArray(await api.expand({\n        activeCtx,\n        activeProperty,\n        element: value,\n        options,\n        expansionMap\n      }));\n\n      // Expanded values must be node objects\n      if (!includedResult.every(v => _isSubject(v))) {\n        throw new JsonLdError('Invalid JSON-LD syntax; ' + 'values of @included must expand to node objects.', 'jsonld.SyntaxError', {\n          code: 'invalid @included value',\n          value\n        });\n      }\n      _addValue(expandedParent, '@included', includedResult, {\n        propertyIsArray: true\n      });\n      continue;\n    }\n\n    // @graph must be an array or an object\n    if (expandedProperty === '@graph' && !(_isObject(value) || _isArray(value))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; \"@graph\" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {\n        code: 'invalid @graph value',\n        value\n      });\n    }\n    if (expandedProperty === '@value') {\n      // capture value for later\n      // \"colliding keywords\" check prevents this from being set twice\n      unexpandedValue = value;\n      if (isJsonType && _processingMode(activeCtx, 1.1)) {\n        // no coercion to array, and retain all values\n        expandedParent['@value'] = value;\n      } else {\n        _addValue(expandedParent, '@value', value, {\n          propertyIsArray: options.isFrame\n        });\n      }\n      continue;\n    }\n\n    // @language must be a string\n    // it should match BCP47\n    if (expandedProperty === '@language') {\n      if (value === null) {\n        // drop null @language values, they expand as if they didn't exist\n        continue;\n      }\n      if (!_isString(value) && !options.isFrame) {\n        throw new JsonLdError('Invalid JSON-LD syntax; \"@language\" value must be a string.', 'jsonld.SyntaxError', {\n          code: 'invalid language-tagged string',\n          value\n        });\n      }\n      // ensure language value is lowercase\n      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v);\n\n      // ensure language tag matches BCP47\n      for (const lang of value) {\n        if (_isString(lang) && !lang.match(REGEX_BCP47)) {\n          console.warn(`@language must be valid BCP47: ${lang}`);\n        }\n      }\n      _addValue(expandedParent, '@language', value, {\n        propertyIsArray: options.isFrame\n      });\n      continue;\n    }\n\n    // @direction must be \"ltr\" or \"rtl\"\n    if (expandedProperty === '@direction') {\n      if (!_isString(value) && !options.isFrame) {\n        throw new JsonLdError('Invalid JSON-LD syntax; \"@direction\" value must be a string.', 'jsonld.SyntaxError', {\n          code: 'invalid base direction',\n          value\n        });\n      }\n      value = _asArray(value);\n\n      // ensure direction is \"ltr\" or \"rtl\"\n      for (const dir of value) {\n        if (_isString(dir) && dir !== 'ltr' && dir !== 'rtl') {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@direction\" must be \"ltr\" or \"rtl\".', 'jsonld.SyntaxError', {\n            code: 'invalid base direction',\n            value\n          });\n        }\n      }\n      _addValue(expandedParent, '@direction', value, {\n        propertyIsArray: options.isFrame\n      });\n      continue;\n    }\n\n    // @index must be a string\n    if (expandedProperty === '@index') {\n      if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; \"@index\" value must be a string.', 'jsonld.SyntaxError', {\n          code: 'invalid @index value',\n          value\n        });\n      }\n      _addValue(expandedParent, '@index', value);\n      continue;\n    }\n\n    // @reverse must be an object\n    if (expandedProperty === '@reverse') {\n      if (!_isObject(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; \"@reverse\" value must be an object.', 'jsonld.SyntaxError', {\n          code: 'invalid @reverse value',\n          value\n        });\n      }\n      expandedValue = await api.expand({\n        activeCtx,\n        activeProperty: '@reverse',\n        element: value,\n        options,\n        expansionMap\n      });\n      // properties double-reversed\n      if ('@reverse' in expandedValue) {\n        for (const property in expandedValue['@reverse']) {\n          _addValue(expandedParent, property, expandedValue['@reverse'][property], {\n            propertyIsArray: true\n          });\n        }\n      }\n\n      // FIXME: can this be merged with code below to simplify?\n      // merge in all reversed properties\n      let reverseMap = expandedParent['@reverse'] || null;\n      for (const property in expandedValue) {\n        if (property === '@reverse') {\n          continue;\n        }\n        if (reverseMap === null) {\n          reverseMap = expandedParent['@reverse'] = {};\n        }\n        _addValue(reverseMap, property, [], {\n          propertyIsArray: true\n        });\n        const items = expandedValue[property];\n        for (let ii = 0; ii < items.length; ++ii) {\n          const item = items[ii];\n          if (_isValue(item) || _isList(item)) {\n            throw new JsonLdError('Invalid JSON-LD syntax; \"@reverse\" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {\n              code: 'invalid reverse property value',\n              value: expandedValue\n            });\n          }\n          _addValue(reverseMap, property, item, {\n            propertyIsArray: true\n          });\n        }\n      }\n      continue;\n    }\n\n    // nested keys\n    if (expandedProperty === '@nest') {\n      nests.push(key);\n      continue;\n    }\n\n    // use potential scoped context for key\n    let termCtx = activeCtx;\n    const ctx = _getContextValue(activeCtx, key, '@context');\n    if (!_isUndefined(ctx)) {\n      termCtx = await _processContext({\n        activeCtx,\n        localCtx: ctx,\n        propagate: true,\n        overrideProtected: true,\n        options\n      });\n    }\n    const container = _getContextValue(termCtx, key, '@container') || [];\n    if (container.includes('@language') && _isObject(value)) {\n      const direction = _getContextValue(termCtx, key, '@direction');\n      // handle language map container (skip if value is not an object)\n      expandedValue = _expandLanguageMap(termCtx, value, direction, options);\n    } else if (container.includes('@index') && _isObject(value)) {\n      // handle index container (skip if value is not an object)\n      const asGraph = container.includes('@graph');\n      const indexKey = _getContextValue(termCtx, key, '@index') || '@index';\n      const propertyIndex = indexKey !== '@index' && _expandIri(activeCtx, indexKey, {\n        vocab: true\n      }, options);\n      expandedValue = await _expandIndexMap({\n        activeCtx: termCtx,\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph,\n        indexKey,\n        propertyIndex\n      });\n    } else if (container.includes('@id') && _isObject(value)) {\n      // handle id container (skip if value is not an object)\n      const asGraph = container.includes('@graph');\n      expandedValue = await _expandIndexMap({\n        activeCtx: termCtx,\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph,\n        indexKey: '@id'\n      });\n    } else if (container.includes('@type') && _isObject(value)) {\n      // handle type container (skip if value is not an object)\n      expandedValue = await _expandIndexMap({\n        // since container is `@type`, revert type scoped context when expanding\n        activeCtx: termCtx.revertToPreviousContext(),\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph: false,\n        indexKey: '@type'\n      });\n    } else {\n      // recurse into @list or @set\n      const isList = expandedProperty === '@list';\n      if (isList || expandedProperty === '@set') {\n        let nextActiveProperty = activeProperty;\n        if (isList && expandedActiveProperty === '@graph') {\n          nextActiveProperty = null;\n        }\n        expandedValue = await api.expand({\n          activeCtx: termCtx,\n          activeProperty: nextActiveProperty,\n          element: value,\n          options,\n          insideList: isList,\n          expansionMap\n        });\n      } else if (_getContextValue(activeCtx, key, '@type') === '@json') {\n        expandedValue = {\n          '@type': '@json',\n          '@value': value\n        };\n      } else {\n        // recursively expand value with key as new active property\n        expandedValue = await api.expand({\n          activeCtx: termCtx,\n          activeProperty: key,\n          element: value,\n          options,\n          insideList: false,\n          expansionMap\n        });\n      }\n    }\n\n    // drop null values if property is not @value\n    if (expandedValue === null && expandedProperty !== '@value') {\n      // TODO: use `await` to support async\n      expandedValue = expansionMap({\n        unmappedValue: value,\n        expandedProperty,\n        activeCtx: termCtx,\n        activeProperty,\n        parent: element,\n        options,\n        insideList,\n        key,\n        expandedParent\n      });\n      if (expandedValue === undefined) {\n        continue;\n      }\n    }\n\n    // convert expanded value to @list if container specifies it\n    if (expandedProperty !== '@list' && !_isList(expandedValue) && container.includes('@list')) {\n      // ensure expanded value in @list is an array\n      expandedValue = {\n        '@list': _asArray(expandedValue)\n      };\n    }\n\n    // convert expanded value to @graph if container specifies it\n    // and value is not, itself, a graph\n    // index cases handled above\n    if (container.includes('@graph') && !container.some(key => key === '@id' || key === '@index')) {\n      // ensure expanded values are arrays\n      expandedValue = _asArray(expandedValue).map(v => ({\n        '@graph': _asArray(v)\n      }));\n    }\n\n    // FIXME: can this be merged with code above to simplify?\n    // merge in reverse properties\n    if (termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {\n      const reverseMap = expandedParent['@reverse'] = expandedParent['@reverse'] || {};\n      expandedValue = _asArray(expandedValue);\n      for (let ii = 0; ii < expandedValue.length; ++ii) {\n        const item = expandedValue[ii];\n        if (_isValue(item) || _isList(item)) {\n          throw new JsonLdError('Invalid JSON-LD syntax; \"@reverse\" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {\n            code: 'invalid reverse property value',\n            value: expandedValue\n          });\n        }\n        _addValue(reverseMap, expandedProperty, item, {\n          propertyIsArray: true\n        });\n      }\n      continue;\n    }\n\n    // add value for property\n    // special keywords handled above\n    _addValue(expandedParent, expandedProperty, expandedValue, {\n      propertyIsArray: true\n    });\n  }\n\n  // @value must not be an object or an array (unless framing) or if @type is\n  // @json\n  if ('@value' in expandedParent) {\n    if (expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) {\n      // allow any value, to be verified when the object is fully expanded and\n      // the @type is @json.\n    } else if ((_isObject(unexpandedValue) || _isArray(unexpandedValue)) && !options.isFrame) {\n      throw new JsonLdError('Invalid JSON-LD syntax; \"@value\" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {\n        code: 'invalid value object value',\n        value: unexpandedValue\n      });\n    }\n  }\n\n  // expand each nested key\n  for (const key of nests) {\n    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];\n    for (const nv of nestedValues) {\n      if (!_isObject(nv) || Object.keys(nv).some(k => _expandIri(activeCtx, k, {\n        vocab: true\n      }, options) === '@value')) {\n        throw new JsonLdError('Invalid JSON-LD syntax; nested value must be a node object.', 'jsonld.SyntaxError', {\n          code: 'invalid @nest value',\n          value: nv\n        });\n      }\n      await _expandObject({\n        activeCtx,\n        activeProperty,\n        expandedActiveProperty,\n        element: nv,\n        expandedParent,\n        options,\n        insideList,\n        typeScopedContext,\n        typeKey,\n        expansionMap\n      });\n    }\n  }\n}\n\n/**\n * Expands the given value by using the coercion and keyword rules in the\n * given context.\n *\n * @param activeCtx the active context to use.\n * @param activeProperty the active property the value is associated with.\n * @param value the value to expand.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandValue(_ref4) {\n  let {\n    activeCtx,\n    activeProperty,\n    value,\n    options\n  } = _ref4;\n  // nothing to expand\n  if (value === null || value === undefined) {\n    return null;\n  }\n\n  // special-case expand @id and @type (skips '@id' expansion)\n  const expandedProperty = _expandIri(activeCtx, activeProperty, {\n    vocab: true\n  }, options);\n  if (expandedProperty === '@id') {\n    return _expandIri(activeCtx, value, {\n      base: true\n    }, options);\n  } else if (expandedProperty === '@type') {\n    return _expandIri(activeCtx, value, {\n      vocab: true,\n      base: true\n    }, options);\n  }\n\n  // get type definition from context\n  const type = _getContextValue(activeCtx, activeProperty, '@type');\n\n  // do @id expansion (automatic for @graph)\n  if ((type === '@id' || expandedProperty === '@graph') && _isString(value)) {\n    return {\n      '@id': _expandIri(activeCtx, value, {\n        base: true\n      }, options)\n    };\n  }\n  // do @id expansion w/vocab\n  if (type === '@vocab' && _isString(value)) {\n    return {\n      '@id': _expandIri(activeCtx, value, {\n        vocab: true,\n        base: true\n      }, options)\n    };\n  }\n\n  // do not expand keyword values\n  if (_isKeyword(expandedProperty)) {\n    return value;\n  }\n  const rval = {};\n  if (type && !['@id', '@vocab', '@none'].includes(type)) {\n    // other type\n    rval['@type'] = type;\n  } else if (_isString(value)) {\n    // check for language tagging for strings\n    const language = _getContextValue(activeCtx, activeProperty, '@language');\n    if (language !== null) {\n      rval['@language'] = language;\n    }\n    const direction = _getContextValue(activeCtx, activeProperty, '@direction');\n    if (direction !== null) {\n      rval['@direction'] = direction;\n    }\n  }\n  // do conversion of values that aren't basic JSON types to strings\n  if (!['boolean', 'number', 'string'].includes(typeof value)) {\n    value = value.toString();\n  }\n  rval['@value'] = value;\n  return rval;\n}\n\n/**\n * Expands a language map.\n *\n * @param activeCtx the active context to use.\n * @param languageMap the language map to expand.\n * @param direction the direction to apply to values.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded language map.\n */\nfunction _expandLanguageMap(activeCtx, languageMap, direction, options) {\n  const rval = [];\n  const keys = Object.keys(languageMap).sort();\n  for (const key of keys) {\n    const expandedKey = _expandIri(activeCtx, key, {\n      vocab: true\n    }, options);\n    let val = languageMap[key];\n    if (!_isArray(val)) {\n      val = [val];\n    }\n    for (const item of val) {\n      if (item === null) {\n        // null values are allowed (8.5) but ignored (3.1)\n        continue;\n      }\n      if (!_isString(item)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; language map values must be strings.', 'jsonld.SyntaxError', {\n          code: 'invalid language map value',\n          languageMap\n        });\n      }\n      const val = {\n        '@value': item\n      };\n      if (expandedKey !== '@none') {\n        val['@language'] = key.toLowerCase();\n      }\n      if (direction) {\n        val['@direction'] = direction;\n      }\n      rval.push(val);\n    }\n  }\n  return rval;\n}\nasync function _expandIndexMap(_ref5) {\n  let {\n    activeCtx,\n    options,\n    activeProperty,\n    value,\n    expansionMap,\n    asGraph,\n    indexKey,\n    propertyIndex\n  } = _ref5;\n  const rval = [];\n  const keys = Object.keys(value).sort();\n  const isTypeIndex = indexKey === '@type';\n  for (let key of keys) {\n    // if indexKey is @type, there may be a context defined for it\n    if (isTypeIndex) {\n      const ctx = _getContextValue(activeCtx, key, '@context');\n      if (!_isUndefined(ctx)) {\n        activeCtx = await _processContext({\n          activeCtx,\n          localCtx: ctx,\n          propagate: false,\n          options\n        });\n      }\n    }\n    let val = value[key];\n    if (!_isArray(val)) {\n      val = [val];\n    }\n    val = await api.expand({\n      activeCtx,\n      activeProperty,\n      element: val,\n      options,\n      insideList: false,\n      insideIndex: true,\n      expansionMap\n    });\n\n    // expand for @type, but also for @none\n    let expandedKey;\n    if (propertyIndex) {\n      if (key === '@none') {\n        expandedKey = '@none';\n      } else {\n        expandedKey = _expandValue({\n          activeCtx,\n          activeProperty: indexKey,\n          value: key,\n          options\n        });\n      }\n    } else {\n      expandedKey = _expandIri(activeCtx, key, {\n        vocab: true\n      }, options);\n    }\n    if (indexKey === '@id') {\n      // expand document relative\n      key = _expandIri(activeCtx, key, {\n        base: true\n      }, options);\n    } else if (isTypeIndex) {\n      key = expandedKey;\n    }\n    for (let item of val) {\n      // If this is also a @graph container, turn items into graphs\n      if (asGraph && !_isGraph(item)) {\n        item = {\n          '@graph': [item]\n        };\n      }\n      if (indexKey === '@type') {\n        if (expandedKey === '@none') {\n          // ignore @none\n        } else if (item['@type']) {\n          item['@type'] = [key].concat(item['@type']);\n        } else {\n          item['@type'] = [key];\n        }\n      } else if (_isValue(item) && !['@language', '@type', '@index'].includes(indexKey)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; Attempt to add illegal key to value ' + `object: \"${indexKey}\".`, 'jsonld.SyntaxError', {\n          code: 'invalid value object',\n          value: item\n        });\n      } else if (propertyIndex) {\n        // index is a property to be expanded, and values interpreted for that\n        // property\n        if (expandedKey !== '@none') {\n          // expand key as a value\n          _addValue(item, propertyIndex, expandedKey, {\n            propertyIsArray: true,\n            prependValue: true\n          });\n        }\n      } else if (expandedKey !== '@none' && !(indexKey in item)) {\n        item[indexKey] = key;\n      }\n      rval.push(item);\n    }\n  }\n  return rval;\n}","map":{"version":3,"names":["JsonLdError","require","isArray","_isArray","isObject","_isObject","isEmptyObject","_isEmptyObject","isString","_isString","isUndefined","_isUndefined","isList","_isList","isValue","_isValue","isGraph","_isGraph","isSubject","_isSubject","expandIri","_expandIri","getContextValue","_getContextValue","isKeyword","_isKeyword","process","_processContext","processingMode","_processingMode","isAbsolute","_isAbsoluteIri","addValue","_addValue","asArray","_asArray","getValues","_getValues","validateTypeValue","_validateTypeValue","api","module","exports","REGEX_BCP47","expand","activeCtx","activeProperty","element","options","insideList","insideIndex","typeScopedContext","expansionMap","undefined","Object","assign","isFrame","vocab","mapped","unmappedValue","_expandValue","value","rval","container","includes","i","length","e","parent","index","expandedParent","concat","push","expandedActiveProperty","propertyScopedCtx","previousContext","keys","sort","mustRevert","key","expandedProperty","revertToPreviousContext","localCtx","propagate","overrideProtected","typeKey","types","Array","slice","type","ctx","_expandObject","count","code","validCount","values","every","v","t","indexOf","keepFreeFloatingNodes","nests","unexpandedValue","isJsonType","expandedValue","unmappedProperty","keyword","map","base","propertyIsArray","fromEntries","entries","k","vv","includedResult","toLowerCase","lang","match","console","warn","dir","property","reverseMap","items","ii","item","termCtx","direction","_expandLanguageMap","asGraph","indexKey","propertyIndex","_expandIndexMap","nextActiveProperty","some","mappings","has","get","reverse","nestedValues","nv","language","toString","languageMap","expandedKey","val","isTypeIndex","prependValue"],"sources":["E:/react-todo-app/node_modules/jsonld/lib/expand.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isEmptyObject: _isEmptyObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\n\nconst {\n  isList: _isList,\n  isValue: _isValue,\n  isGraph: _isGraph,\n  isSubject: _isSubject\n} = require('./graphTypes');\n\nconst {\n  expandIri: _expandIri,\n  getContextValue: _getContextValue,\n  isKeyword: _isKeyword,\n  process: _processContext,\n  processingMode: _processingMode\n} = require('./context');\n\nconst {\n  isAbsolute: _isAbsoluteIri\n} = require('./url');\n\nconst {\n  addValue: _addValue,\n  asArray: _asArray,\n  getValues: _getValues,\n  validateTypeValue: _validateTypeValue\n} = require('./util');\n\nconst api = {};\nmodule.exports = api;\nconst REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;\n\n/**\n * Recursively expands an element using the given context. Any context in\n * the element will be removed. All context URLs must have been retrieved\n * before calling this method.\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element, null for none.\n * @param element the element to expand.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param insideIndex true if the element is inside an index container,\n *          false if not.\n * @param typeScopedContext an optional type-scoped active context for\n *          expanding values of nodes that were expressed according to\n *          a type-scoped context.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n *\n * @return a Promise that resolves to the expanded value.\n */\napi.expand = async ({\n  activeCtx,\n  activeProperty = null,\n  element,\n  options = {},\n  insideList = false,\n  insideIndex = false,\n  typeScopedContext = null,\n  expansionMap = () => undefined\n}) => {\n  // nothing to expand\n  if(element === null || element === undefined) {\n    return null;\n  }\n\n  // disable framing if activeProperty is @default\n  if(activeProperty === '@default') {\n    options = Object.assign({}, options, {isFrame: false});\n  }\n\n  if(!_isArray(element) && !_isObject(element)) {\n    // drop free-floating scalars that are not in lists unless custom mapped\n    if(!insideList && (activeProperty === null ||\n      _expandIri(activeCtx, activeProperty, {vocab: true},\n        options) === '@graph')) {\n      const mapped = await expansionMap({\n        unmappedValue: element,\n        activeCtx,\n        activeProperty,\n        options,\n        insideList\n      });\n      if(mapped === undefined) {\n        return null;\n      }\n      return mapped;\n    }\n\n    // expand element according to value expansion rules\n    return _expandValue({activeCtx, activeProperty, value: element, options});\n  }\n\n  // recursively expand array\n  if(_isArray(element)) {\n    let rval = [];\n    const container = _getContextValue(\n      activeCtx, activeProperty, '@container') || [];\n    insideList = insideList || container.includes('@list');\n    for(let i = 0; i < element.length; ++i) {\n      // expand element\n      let e = await api.expand({\n        activeCtx,\n        activeProperty,\n        element: element[i],\n        options,\n        expansionMap,\n        insideIndex,\n        typeScopedContext\n      });\n      if(insideList && _isArray(e)) {\n        e = {'@list': e};\n      }\n\n      if(e === null) {\n        e = await expansionMap({\n          unmappedValue: element[i],\n          activeCtx,\n          activeProperty,\n          parent: element,\n          index: i,\n          options,\n          expandedParent: rval,\n          insideList\n        });\n        if(e === undefined) {\n          continue;\n        }\n      }\n\n      if(_isArray(e)) {\n        rval = rval.concat(e);\n      } else {\n        rval.push(e);\n      }\n    }\n    return rval;\n  }\n\n  // recursively expand object:\n\n  // first, expand the active property\n  const expandedActiveProperty = _expandIri(\n    activeCtx, activeProperty, {vocab: true}, options);\n\n  // Get any property-scoped context for activeProperty\n  const propertyScopedCtx =\n    _getContextValue(activeCtx, activeProperty, '@context');\n\n  // second, determine if any type-scoped context should be reverted; it\n  // should only be reverted when the following are all true:\n  // 1. `element` is not a value or subject reference\n  // 2. `insideIndex` is false\n  typeScopedContext = typeScopedContext ||\n    (activeCtx.previousContext ? activeCtx : null);\n  let keys = Object.keys(element).sort();\n  let mustRevert = !insideIndex;\n  if(mustRevert && typeScopedContext && keys.length <= 2 &&\n    !keys.includes('@context')) {\n    for(const key of keys) {\n      const expandedProperty = _expandIri(\n        typeScopedContext, key, {vocab: true}, options);\n      if(expandedProperty === '@value') {\n        // value found, ensure type-scoped context is used to expand it\n        mustRevert = false;\n        activeCtx = typeScopedContext;\n        break;\n      }\n      if(expandedProperty === '@id' && keys.length === 1) {\n        // subject reference found, do not revert\n        mustRevert = false;\n        break;\n      }\n    }\n  }\n\n  if(mustRevert) {\n    // revert type scoped context\n    activeCtx = activeCtx.revertToPreviousContext();\n  }\n\n  // apply property-scoped context after reverting term-scoped context\n  if(!_isUndefined(propertyScopedCtx)) {\n    activeCtx = await _processContext({\n      activeCtx,\n      localCtx: propertyScopedCtx,\n      propagate: true,\n      overrideProtected: true,\n      options\n    });\n  }\n\n  // if element has a context, process it\n  if('@context' in element) {\n    activeCtx = await _processContext(\n      {activeCtx, localCtx: element['@context'], options});\n  }\n\n  // set the type-scoped context to the context on input, for use later\n  typeScopedContext = activeCtx;\n\n  // Remember the first key found expanding to @type\n  let typeKey = null;\n\n  // look for scoped contexts on `@type`\n  for(const key of keys) {\n    const expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);\n    if(expandedProperty === '@type') {\n      // set scoped contexts from @type\n      // avoid sorting if possible\n      typeKey = typeKey || key;\n      const value = element[key];\n      const types =\n        Array.isArray(value) ?\n          (value.length > 1 ? value.slice().sort() : value) : [value];\n      for(const type of types) {\n        const ctx = _getContextValue(typeScopedContext, type, '@context');\n        if(!_isUndefined(ctx)) {\n          activeCtx = await _processContext({\n            activeCtx,\n            localCtx: ctx,\n            options,\n            propagate: false\n          });\n        }\n      }\n    }\n  }\n\n  // process each key and value in element, ignoring @nest content\n  let rval = {};\n  await _expandObject({\n    activeCtx,\n    activeProperty,\n    expandedActiveProperty,\n    element,\n    expandedParent: rval,\n    options,\n    insideList,\n    typeKey,\n    typeScopedContext,\n    expansionMap});\n\n  // get property count on expanded output\n  keys = Object.keys(rval);\n  let count = keys.length;\n\n  if('@value' in rval) {\n    // @value must only have @language or @type\n    if('@type' in rval && ('@language' in rval || '@direction' in rval)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an element containing \"@value\" may not ' +\n        'contain both \"@type\" and either \"@language\" or \"@direction\".',\n        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});\n    }\n    let validCount = count - 1;\n    if('@type' in rval) {\n      validCount -= 1;\n    }\n    if('@index' in rval) {\n      validCount -= 1;\n    }\n    if('@language' in rval) {\n      validCount -= 1;\n    }\n    if('@direction' in rval) {\n      validCount -= 1;\n    }\n    if(validCount !== 0) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an element containing \"@value\" may only ' +\n        'have an \"@index\" property and either \"@type\" ' +\n        'or either or both \"@language\" or \"@direction\".',\n        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});\n    }\n    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);\n    const types = _getValues(rval, '@type');\n\n    // drop null @values unless custom mapped\n    if(_processingMode(activeCtx, 1.1) && types.includes('@json') &&\n      types.length === 1) {\n      // Any value of @value is okay if @type: @json\n    } else if(values.length === 0) {\n      const mapped = await expansionMap({\n        unmappedValue: rval,\n        activeCtx,\n        activeProperty,\n        element,\n        options,\n        insideList\n      });\n      if(mapped !== undefined) {\n        rval = mapped;\n      } else {\n        rval = null;\n      }\n    } else if(!values.every(v => (_isString(v) || _isEmptyObject(v))) &&\n      '@language' in rval) {\n      // if @language is present, @value must be a string\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; only strings may be language-tagged.',\n        'jsonld.SyntaxError',\n        {code: 'invalid language-tagged value', element: rval});\n    } else if(!types.every(t =>\n      (_isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) ||\n      _isEmptyObject(t)))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an element containing \"@value\" and \"@type\" ' +\n        'must have an absolute IRI for the value of \"@type\".',\n        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});\n    }\n  } else if('@type' in rval && !_isArray(rval['@type'])) {\n    // convert @type to an array\n    rval['@type'] = [rval['@type']];\n  } else if('@set' in rval || '@list' in rval) {\n    // handle @set and @list\n    if(count > 1 && !(count === 2 && '@index' in rval)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; if an element has the property \"@set\" ' +\n        'or \"@list\", then it can have at most one other property that is ' +\n        '\"@index\".', 'jsonld.SyntaxError',\n        {code: 'invalid set or list object', element: rval});\n    }\n    // optimize away @set\n    if('@set' in rval) {\n      rval = rval['@set'];\n      keys = Object.keys(rval);\n      count = keys.length;\n    }\n  } else if(count === 1 && '@language' in rval) {\n    // drop objects with only @language unless custom mapped\n    const mapped = await expansionMap(rval, {\n      unmappedValue: rval,\n      activeCtx,\n      activeProperty,\n      element,\n      options,\n      insideList\n    });\n    if(mapped !== undefined) {\n      rval = mapped;\n    } else {\n      rval = null;\n    }\n  }\n\n  // drop certain top-level objects that do not occur in lists, unless custom\n  // mapped\n  if(_isObject(rval) &&\n    !options.keepFreeFloatingNodes && !insideList &&\n    (activeProperty === null || expandedActiveProperty === '@graph')) {\n    // drop empty object, top-level @value/@list, or object with only @id\n    if(count === 0 || '@value' in rval || '@list' in rval ||\n      (count === 1 && '@id' in rval)) {\n      const mapped = await expansionMap({\n        unmappedValue: rval,\n        activeCtx,\n        activeProperty,\n        element,\n        options,\n        insideList\n      });\n      if(mapped !== undefined) {\n        rval = mapped;\n      } else {\n        rval = null;\n      }\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Expand each key and value of element adding to result\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element.\n * @param expandedActiveProperty the expansion of activeProperty\n * @param element the element to expand.\n * @param expandedParent the expanded result into which to add values.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param typeKey first key found expanding to @type.\n * @param typeScopedContext the context before reverting.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n */\nasync function _expandObject({\n  activeCtx,\n  activeProperty,\n  expandedActiveProperty,\n  element,\n  expandedParent,\n  options = {},\n  insideList,\n  typeKey,\n  typeScopedContext,\n  expansionMap\n}) {\n  const keys = Object.keys(element).sort();\n  const nests = [];\n  let unexpandedValue;\n\n  // Figure out if this is the type for a JSON literal\n  const isJsonType = element[typeKey] &&\n    _expandIri(activeCtx,\n      (_isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey]),\n      {vocab: true}, options) === '@json';\n\n  for(const key of keys) {\n    let value = element[key];\n    let expandedValue;\n\n    // skip @context\n    if(key === '@context') {\n      continue;\n    }\n\n    // expand property\n    let expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);\n\n    // drop non-absolute IRI keys that aren't keywords unless custom mapped\n    if(expandedProperty === null ||\n      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {\n      // TODO: use `await` to support async\n      expandedProperty = expansionMap({\n        unmappedProperty: key,\n        activeCtx,\n        activeProperty,\n        parent: element,\n        options,\n        insideList,\n        value,\n        expandedParent\n      });\n      if(expandedProperty === undefined) {\n        continue;\n      }\n    }\n\n    if(_isKeyword(expandedProperty)) {\n      if(expandedActiveProperty === '@reverse') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +\n          'property.', 'jsonld.SyntaxError',\n          {code: 'invalid reverse property map', value});\n      }\n      if(expandedProperty in expandedParent &&\n         expandedProperty !== '@included' &&\n         expandedProperty !== '@type') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; colliding keywords detected.',\n          'jsonld.SyntaxError',\n          {code: 'colliding keywords', keyword: expandedProperty});\n      }\n    }\n\n    // syntax error if @id is not a string\n    if(expandedProperty === '@id') {\n      if(!_isString(value)) {\n        if(!options.isFrame) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@id\" value must a string.',\n            'jsonld.SyntaxError', {code: 'invalid @id value', value});\n        }\n        if(_isObject(value)) {\n          // empty object is a wildcard\n          if(!_isEmptyObject(value)) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; \"@id\" value an empty object or array ' +\n              'of strings, if framing',\n              'jsonld.SyntaxError', {code: 'invalid @id value', value});\n          }\n        } else if(_isArray(value)) {\n          if(!value.every(v => _isString(v))) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; \"@id\" value an empty object or array ' +\n              'of strings, if framing',\n              'jsonld.SyntaxError', {code: 'invalid @id value', value});\n          }\n        } else {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@id\" value an empty object or array ' +\n            'of strings, if framing',\n            'jsonld.SyntaxError', {code: 'invalid @id value', value});\n        }\n      }\n\n      _addValue(\n        expandedParent, '@id',\n        _asArray(value).map(v =>\n          _isString(v) ? _expandIri(activeCtx, v, {base: true}, options) : v),\n        {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    if(expandedProperty === '@type') {\n      // if framing, can be a default object, but need to expand\n      // key to determine that\n      if(_isObject(value)) {\n        value = Object.fromEntries(Object.entries(value).map(([k, v]) => [\n          _expandIri(typeScopedContext, k, {vocab: true}),\n          _asArray(v).map(vv =>\n            _expandIri(typeScopedContext, vv, {base: true, vocab: true})\n          )\n        ]));\n      }\n      _validateTypeValue(value, options.isFrame);\n      _addValue(\n        expandedParent, '@type',\n        _asArray(value).map(v =>\n          _isString(v) ?\n            _expandIri(typeScopedContext, v,\n              {base: true, vocab: true}, options) : v),\n        {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    // Included blocks are treated as an array of separate object nodes sharing\n    // the same referencing active_property.\n    // For 1.0, it is skipped as are other unknown keywords\n    if(expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {\n      const includedResult = _asArray(await api.expand({\n        activeCtx,\n        activeProperty,\n        element: value,\n        options,\n        expansionMap\n      }));\n\n      // Expanded values must be node objects\n      if(!includedResult.every(v => _isSubject(v))) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; ' +\n          'values of @included must expand to node objects.',\n          'jsonld.SyntaxError', {code: 'invalid @included value', value});\n      }\n\n      _addValue(\n        expandedParent, '@included', includedResult, {propertyIsArray: true});\n      continue;\n    }\n\n    // @graph must be an array or an object\n    if(expandedProperty === '@graph' &&\n      !(_isObject(value) || _isArray(value))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; \"@graph\" value must not be an ' +\n        'object or an array.',\n        'jsonld.SyntaxError', {code: 'invalid @graph value', value});\n    }\n\n    if(expandedProperty === '@value') {\n      // capture value for later\n      // \"colliding keywords\" check prevents this from being set twice\n      unexpandedValue = value;\n      if(isJsonType && _processingMode(activeCtx, 1.1)) {\n        // no coercion to array, and retain all values\n        expandedParent['@value'] = value;\n      } else {\n        _addValue(\n          expandedParent, '@value', value, {propertyIsArray: options.isFrame});\n      }\n      continue;\n    }\n\n    // @language must be a string\n    // it should match BCP47\n    if(expandedProperty === '@language') {\n      if(value === null) {\n        // drop null @language values, they expand as if they didn't exist\n        continue;\n      }\n      if(!_isString(value) && !options.isFrame) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@language\" value must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid language-tagged string', value});\n      }\n      // ensure language value is lowercase\n      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v);\n\n      // ensure language tag matches BCP47\n      for(const lang of value) {\n        if(_isString(lang) && !lang.match(REGEX_BCP47)) {\n          console.warn(`@language must be valid BCP47: ${lang}`);\n        }\n      }\n\n      _addValue(\n        expandedParent, '@language', value, {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    // @direction must be \"ltr\" or \"rtl\"\n    if(expandedProperty === '@direction') {\n      if(!_isString(value) && !options.isFrame) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@direction\" value must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid base direction', value});\n      }\n\n      value = _asArray(value);\n\n      // ensure direction is \"ltr\" or \"rtl\"\n      for(const dir of value) {\n        if(_isString(dir) && dir !== 'ltr' && dir !== 'rtl') {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@direction\" must be \"ltr\" or \"rtl\".',\n            'jsonld.SyntaxError',\n            {code: 'invalid base direction', value});\n        }\n      }\n\n      _addValue(\n        expandedParent, '@direction', value,\n        {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    // @index must be a string\n    if(expandedProperty === '@index') {\n      if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@index\" value must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @index value', value});\n      }\n      _addValue(expandedParent, '@index', value);\n      continue;\n    }\n\n    // @reverse must be an object\n    if(expandedProperty === '@reverse') {\n      if(!_isObject(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@reverse\" value must be an object.',\n          'jsonld.SyntaxError', {code: 'invalid @reverse value', value});\n      }\n\n      expandedValue = await api.expand({\n        activeCtx,\n        activeProperty:\n        '@reverse',\n        element: value,\n        options,\n        expansionMap\n      });\n      // properties double-reversed\n      if('@reverse' in expandedValue) {\n        for(const property in expandedValue['@reverse']) {\n          _addValue(\n            expandedParent, property, expandedValue['@reverse'][property],\n            {propertyIsArray: true});\n        }\n      }\n\n      // FIXME: can this be merged with code below to simplify?\n      // merge in all reversed properties\n      let reverseMap = expandedParent['@reverse'] || null;\n      for(const property in expandedValue) {\n        if(property === '@reverse') {\n          continue;\n        }\n        if(reverseMap === null) {\n          reverseMap = expandedParent['@reverse'] = {};\n        }\n        _addValue(reverseMap, property, [], {propertyIsArray: true});\n        const items = expandedValue[property];\n        for(let ii = 0; ii < items.length; ++ii) {\n          const item = items[ii];\n          if(_isValue(item) || _isList(item)) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; \"@reverse\" value must not be a ' +\n              '@value or an @list.', 'jsonld.SyntaxError',\n              {code: 'invalid reverse property value', value: expandedValue});\n          }\n          _addValue(reverseMap, property, item, {propertyIsArray: true});\n        }\n      }\n\n      continue;\n    }\n\n    // nested keys\n    if(expandedProperty === '@nest') {\n      nests.push(key);\n      continue;\n    }\n\n    // use potential scoped context for key\n    let termCtx = activeCtx;\n    const ctx = _getContextValue(activeCtx, key, '@context');\n    if(!_isUndefined(ctx)) {\n      termCtx = await _processContext({\n        activeCtx,\n        localCtx: ctx,\n        propagate: true,\n        overrideProtected: true,\n        options\n      });\n    }\n\n    const container = _getContextValue(termCtx, key, '@container') || [];\n\n    if(container.includes('@language') && _isObject(value)) {\n      const direction = _getContextValue(termCtx, key, '@direction');\n      // handle language map container (skip if value is not an object)\n      expandedValue = _expandLanguageMap(termCtx, value, direction, options);\n    } else if(container.includes('@index') && _isObject(value)) {\n      // handle index container (skip if value is not an object)\n      const asGraph = container.includes('@graph');\n      const indexKey = _getContextValue(termCtx, key, '@index') || '@index';\n      const propertyIndex = indexKey !== '@index' &&\n        _expandIri(activeCtx, indexKey, {vocab: true}, options);\n\n      expandedValue = await _expandIndexMap({\n        activeCtx: termCtx,\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph,\n        indexKey,\n        propertyIndex\n      });\n    } else if(container.includes('@id') && _isObject(value)) {\n      // handle id container (skip if value is not an object)\n      const asGraph = container.includes('@graph');\n      expandedValue = await _expandIndexMap({\n        activeCtx: termCtx,\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph,\n        indexKey: '@id'\n      });\n    } else if(container.includes('@type') && _isObject(value)) {\n      // handle type container (skip if value is not an object)\n      expandedValue = await _expandIndexMap({\n        // since container is `@type`, revert type scoped context when expanding\n        activeCtx: termCtx.revertToPreviousContext(),\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph: false,\n        indexKey: '@type'\n      });\n    } else {\n      // recurse into @list or @set\n      const isList = (expandedProperty === '@list');\n      if(isList || expandedProperty === '@set') {\n        let nextActiveProperty = activeProperty;\n        if(isList && expandedActiveProperty === '@graph') {\n          nextActiveProperty = null;\n        }\n        expandedValue = await api.expand({\n          activeCtx: termCtx,\n          activeProperty: nextActiveProperty,\n          element: value,\n          options,\n          insideList: isList,\n          expansionMap\n        });\n      } else if(\n        _getContextValue(activeCtx, key, '@type') === '@json') {\n        expandedValue = {\n          '@type': '@json',\n          '@value': value\n        };\n      } else {\n        // recursively expand value with key as new active property\n        expandedValue = await api.expand({\n          activeCtx: termCtx,\n          activeProperty: key,\n          element: value,\n          options,\n          insideList: false,\n          expansionMap\n        });\n      }\n    }\n\n    // drop null values if property is not @value\n    if(expandedValue === null && expandedProperty !== '@value') {\n      // TODO: use `await` to support async\n      expandedValue = expansionMap({\n        unmappedValue: value,\n        expandedProperty,\n        activeCtx: termCtx,\n        activeProperty,\n        parent: element,\n        options,\n        insideList,\n        key,\n        expandedParent\n      });\n      if(expandedValue === undefined) {\n        continue;\n      }\n    }\n\n    // convert expanded value to @list if container specifies it\n    if(expandedProperty !== '@list' && !_isList(expandedValue) &&\n      container.includes('@list')) {\n      // ensure expanded value in @list is an array\n      expandedValue = {'@list': _asArray(expandedValue)};\n    }\n\n    // convert expanded value to @graph if container specifies it\n    // and value is not, itself, a graph\n    // index cases handled above\n    if(container.includes('@graph') &&\n      !container.some(key => key === '@id' || key === '@index')) {\n      // ensure expanded values are arrays\n      expandedValue = _asArray(expandedValue)\n        .map(v => ({'@graph': _asArray(v)}));\n    }\n\n    // FIXME: can this be merged with code above to simplify?\n    // merge in reverse properties\n    if(termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {\n      const reverseMap =\n        expandedParent['@reverse'] = expandedParent['@reverse'] || {};\n      expandedValue = _asArray(expandedValue);\n      for(let ii = 0; ii < expandedValue.length; ++ii) {\n        const item = expandedValue[ii];\n        if(_isValue(item) || _isList(item)) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@reverse\" value must not be a ' +\n            '@value or an @list.', 'jsonld.SyntaxError',\n            {code: 'invalid reverse property value', value: expandedValue});\n        }\n        _addValue(reverseMap, expandedProperty, item, {propertyIsArray: true});\n      }\n      continue;\n    }\n\n    // add value for property\n    // special keywords handled above\n    _addValue(expandedParent, expandedProperty, expandedValue, {\n      propertyIsArray: true\n    });\n  }\n\n  // @value must not be an object or an array (unless framing) or if @type is\n  // @json\n  if('@value' in expandedParent) {\n    if(expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) {\n      // allow any value, to be verified when the object is fully expanded and\n      // the @type is @json.\n    } else if((_isObject(unexpandedValue) || _isArray(unexpandedValue)) &&\n      !options.isFrame) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; \"@value\" value must not be an ' +\n        'object or an array.',\n        'jsonld.SyntaxError',\n        {code: 'invalid value object value', value: unexpandedValue});\n    }\n  }\n\n  // expand each nested key\n  for(const key of nests) {\n    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];\n    for(const nv of nestedValues) {\n      if(!_isObject(nv) || Object.keys(nv).some(k =>\n        _expandIri(activeCtx, k, {vocab: true}, options) === '@value')) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; nested value must be a node object.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @nest value', value: nv});\n      }\n      await _expandObject({\n        activeCtx,\n        activeProperty,\n        expandedActiveProperty,\n        element: nv,\n        expandedParent,\n        options,\n        insideList,\n        typeScopedContext,\n        typeKey,\n        expansionMap});\n    }\n  }\n}\n\n/**\n * Expands the given value by using the coercion and keyword rules in the\n * given context.\n *\n * @param activeCtx the active context to use.\n * @param activeProperty the active property the value is associated with.\n * @param value the value to expand.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandValue({activeCtx, activeProperty, value, options}) {\n  // nothing to expand\n  if(value === null || value === undefined) {\n    return null;\n  }\n\n  // special-case expand @id and @type (skips '@id' expansion)\n  const expandedProperty = _expandIri(\n    activeCtx, activeProperty, {vocab: true}, options);\n  if(expandedProperty === '@id') {\n    return _expandIri(activeCtx, value, {base: true}, options);\n  } else if(expandedProperty === '@type') {\n    return _expandIri(activeCtx, value, {vocab: true, base: true}, options);\n  }\n\n  // get type definition from context\n  const type = _getContextValue(activeCtx, activeProperty, '@type');\n\n  // do @id expansion (automatic for @graph)\n  if((type === '@id' || expandedProperty === '@graph') && _isString(value)) {\n    return {'@id': _expandIri(activeCtx, value, {base: true}, options)};\n  }\n  // do @id expansion w/vocab\n  if(type === '@vocab' && _isString(value)) {\n    return {\n      '@id': _expandIri(activeCtx, value, {vocab: true, base: true}, options)\n    };\n  }\n\n  // do not expand keyword values\n  if(_isKeyword(expandedProperty)) {\n    return value;\n  }\n\n  const rval = {};\n\n  if(type && !['@id', '@vocab', '@none'].includes(type)) {\n    // other type\n    rval['@type'] = type;\n  } else if(_isString(value)) {\n    // check for language tagging for strings\n    const language = _getContextValue(activeCtx, activeProperty, '@language');\n    if(language !== null) {\n      rval['@language'] = language;\n    }\n    const direction = _getContextValue(activeCtx, activeProperty, '@direction');\n    if(direction !== null) {\n      rval['@direction'] = direction;\n    }\n  }\n  // do conversion of values that aren't basic JSON types to strings\n  if(!['boolean', 'number', 'string'].includes(typeof value)) {\n    value = value.toString();\n  }\n  rval['@value'] = value;\n\n  return rval;\n}\n\n/**\n * Expands a language map.\n *\n * @param activeCtx the active context to use.\n * @param languageMap the language map to expand.\n * @param direction the direction to apply to values.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded language map.\n */\nfunction _expandLanguageMap(activeCtx, languageMap, direction, options) {\n  const rval = [];\n  const keys = Object.keys(languageMap).sort();\n  for(const key of keys) {\n    const expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);\n    let val = languageMap[key];\n    if(!_isArray(val)) {\n      val = [val];\n    }\n    for(const item of val) {\n      if(item === null) {\n        // null values are allowed (8.5) but ignored (3.1)\n        continue;\n      }\n      if(!_isString(item)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; language map values must be strings.',\n          'jsonld.SyntaxError',\n          {code: 'invalid language map value', languageMap});\n      }\n      const val = {'@value': item};\n      if(expandedKey !== '@none') {\n        val['@language'] = key.toLowerCase();\n      }\n      if(direction) {\n        val['@direction'] = direction;\n      }\n      rval.push(val);\n    }\n  }\n  return rval;\n}\n\nasync function _expandIndexMap(\n  {activeCtx, options, activeProperty, value, expansionMap, asGraph,\n    indexKey, propertyIndex}) {\n  const rval = [];\n  const keys = Object.keys(value).sort();\n  const isTypeIndex = indexKey === '@type';\n  for(let key of keys) {\n    // if indexKey is @type, there may be a context defined for it\n    if(isTypeIndex) {\n      const ctx = _getContextValue(activeCtx, key, '@context');\n      if(!_isUndefined(ctx)) {\n        activeCtx = await _processContext({\n          activeCtx,\n          localCtx: ctx,\n          propagate: false,\n          options\n        });\n      }\n    }\n\n    let val = value[key];\n    if(!_isArray(val)) {\n      val = [val];\n    }\n\n    val = await api.expand({\n      activeCtx,\n      activeProperty,\n      element: val,\n      options,\n      insideList: false,\n      insideIndex: true,\n      expansionMap\n    });\n\n    // expand for @type, but also for @none\n    let expandedKey;\n    if(propertyIndex) {\n      if(key === '@none') {\n        expandedKey = '@none';\n      } else {\n        expandedKey = _expandValue(\n          {activeCtx, activeProperty: indexKey, value: key, options});\n      }\n    } else {\n      expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);\n    }\n\n    if(indexKey === '@id') {\n      // expand document relative\n      key = _expandIri(activeCtx, key, {base: true}, options);\n    } else if(isTypeIndex) {\n      key = expandedKey;\n    }\n\n    for(let item of val) {\n      // If this is also a @graph container, turn items into graphs\n      if(asGraph && !_isGraph(item)) {\n        item = {'@graph': [item]};\n      }\n      if(indexKey === '@type') {\n        if(expandedKey === '@none') {\n          // ignore @none\n        } else if(item['@type']) {\n          item['@type'] = [key].concat(item['@type']);\n        } else {\n          item['@type'] = [key];\n        }\n      } else if(_isValue(item) &&\n        !['@language', '@type', '@index'].includes(indexKey)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; Attempt to add illegal key to value ' +\n          `object: \"${indexKey}\".`,\n          'jsonld.SyntaxError',\n          {code: 'invalid value object', value: item});\n      } else if(propertyIndex) {\n        // index is a property to be expanded, and values interpreted for that\n        // property\n        if(expandedKey !== '@none') {\n          // expand key as a value\n          _addValue(item, propertyIndex, expandedKey, {\n            propertyIsArray: true,\n            prependValue: true\n          });\n        }\n      } else if(expandedKey !== '@none' && !(indexKey in item)) {\n        item[indexKey] = key;\n      }\n      rval.push(item);\n    }\n  }\n  return rval;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}