{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorOidcHandler = void 0;\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nconst SessionInfoManager_1 = require(\"../../../sessionInfo/SessionInfoManager\");\nclass ErrorOidcHandler {\n  async canHandle(redirectUrl) {\n    try {\n      return new URL(redirectUrl).searchParams.has(\"error\");\n    } catch (e) {\n      throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);\n    }\n  }\n  async handle(redirectUrl, eventEmitter) {\n    if (eventEmitter !== undefined) {\n      const url = new URL(redirectUrl);\n      const errorUrl = url.searchParams.get(\"error\");\n      const errorDescriptionUrl = url.searchParams.get(\"error_description\");\n      eventEmitter.emit(solid_client_authn_core_1.EVENTS.ERROR, errorUrl, errorDescriptionUrl);\n    }\n    return (0, SessionInfoManager_1.getUnauthenticatedSession)();\n  }\n}\nexports.ErrorOidcHandler = ErrorOidcHandler;","map":{"version":3,"mappings":";;;;;;AA0BA;AAOA;AAQA,MAAaA,gBAAgB;EAC3B,MAAMC,SAAS,CAACC,WAAmB;IACjC,IAAI;MAEF,OAAO,IAAIC,GAAG,CAACD,WAAW,CAAC,CAACE,YAAY,CAACC,GAAG,CAAC,OAAO,CAAC;KACtD,CAAC,OAAOC,CAAC,EAAE;MACV,MAAM,IAAIC,KAAK,CACb,IAAIL,WAAW,+DAA+DI,CAAC,EAAE,CAClF;;EAEL;EAEA,MAAME,MAAM,CACVN,WAAmB,EACnBO,YAA2B;IAE3B,IAAIA,YAAY,KAAKC,SAAS,EAAE;MAC9B,MAAMC,GAAG,GAAG,IAAIR,GAAG,CAACD,WAAW,CAAC;MAChC,MAAMU,QAAQ,GAAGD,GAAG,CAACP,YAAY,CAACS,GAAG,CAAC,OAAO,CAAC;MAC9C,MAAMC,mBAAmB,GAAGH,GAAG,CAACP,YAAY,CAACS,GAAG,CAAC,mBAAmB,CAAC;MACrEJ,YAAY,CAACM,IAAI,CAACC,gCAAM,CAACC,KAAK,EAAEL,QAAQ,EAAEE,mBAAmB,CAAC;;IAEhE,OAAO,kDAAyB,GAAE;EACpC;;AAvBFI","names":["ErrorOidcHandler","canHandle","redirectUrl","URL","searchParams","has","e","Error","handle","eventEmitter","undefined","url","errorUrl","get","errorDescriptionUrl","emit","solid_client_authn_core_1","ERROR","exports"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\incomingRedirectHandler\\ErrorOidcHandler.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  EVENTS,\n  IIncomingRedirectHandler,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { EventEmitter } from \"events\";\n\nimport { getUnauthenticatedSession } from \"../../../sessionInfo/SessionInfoManager\";\n\n/**\n * This class handles redirect IRIs without any query params, and returns an unauthenticated\n * session. It serves as a fallback so that consuming libraries don't have to test\n * for the query params themselves, and can always try to use them as a redirect IRI.\n * @hidden\n */\nexport class ErrorOidcHandler implements IIncomingRedirectHandler {\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      // eslint-disable-next-line no-new\n      return new URL(redirectUrl).searchParams.has(\"error\");\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`\n      );\n    }\n  }\n\n  async handle(\n    redirectUrl: string,\n    eventEmitter?: EventEmitter\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\n    if (eventEmitter !== undefined) {\n      const url = new URL(redirectUrl);\n      const errorUrl = url.searchParams.get(\"error\");\n      const errorDescriptionUrl = url.searchParams.get(\"error_description\");\n      eventEmitter.emit(EVENTS.ERROR, errorUrl, errorDescriptionUrl);\n    }\n    return getUnauthenticatedSession();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}