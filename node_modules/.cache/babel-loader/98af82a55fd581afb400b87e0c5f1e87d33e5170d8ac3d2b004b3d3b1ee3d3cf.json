{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nclass TokenRefresher {\n  constructor(storageUtility, issuerConfigFetcher, clientRegistrar) {\n    this.storageUtility = storageUtility;\n    this.issuerConfigFetcher = issuerConfigFetcher;\n    this.clientRegistrar = clientRegistrar;\n  }\n  async refresh(sessionId, refreshToken, dpopKey, eventEmitter) {\n    const oidcContext = await (0, solid_client_authn_core_1.loadOidcContextFromStorage)(sessionId, this.storageUtility, this.issuerConfigFetcher);\n    const clientInfo = await this.clientRegistrar.getClient({\n      sessionId\n    }, oidcContext.issuerConfig);\n    if (refreshToken === undefined) {\n      throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);\n    }\n    if (oidcContext.dpop && dpopKey === undefined) {\n      throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);\n    }\n    const tokenSet = await (0, oidc_client_ext_1.refresh)(refreshToken, oidcContext.issuerConfig, clientInfo, dpopKey);\n    if (tokenSet.refreshToken !== undefined) {\n      eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(solid_client_authn_core_1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);\n      await this.storageUtility.setForUser(sessionId, {\n        refreshToken: tokenSet.refreshToken\n      });\n    }\n    return tokenSet;\n  }\n}\nexports.default = TokenRefresher;","map":{"version":3,"mappings":";;;;;AA0BA;AAWA;AAUA,MAAqBA,cAAc;EACjCC,YACUC,cAA+B,EAC/BC,mBAAyC,EACzCC,eAAiC;IAFjC,mBAAc,GAAdF,cAAc;IACd,wBAAmB,GAAnBC,mBAAmB;IACnB,oBAAe,GAAfC,eAAe;EACtB;EAEH,MAAMC,OAAO,CACXC,SAAiB,EACjBC,YAAqB,EACrBC,OAAiB,EACjBC,YAA2B;IAE3B,MAAMC,WAAW,GAAG,MAAM,wDAA0B,EAClDJ,SAAS,EACT,IAAI,CAACJ,cAAc,EACnB,IAAI,CAACC,mBAAmB,CACzB;IAED,MAAMQ,UAAU,GAAY,MAAM,IAAI,CAACP,eAAe,CAACQ,SAAS,CAC9D;MAAEN;IAAS,CAAE,EACbI,WAAW,CAACG,YAAY,CACzB;IAED,IAAIN,YAAY,KAAKO,SAAS,EAAE;MAE9B,MAAM,IAAIC,KAAK,CACb,YAAYT,SAAS,iEAAiE,CACvF;;IAGH,IAAII,WAAW,CAACM,IAAI,IAAIR,OAAO,KAAKM,SAAS,EAAE;MAC7C,MAAM,IAAIC,KAAK,CACb,gBAAgBT,SAAS,0FAA0F,CACpH;;IAGH,MAAMW,QAAQ,GAAG,MAAM,6BAAO,EAC5BV,YAAY,EACZG,WAAW,CAACG,YAAY,EACxBF,UAAU,EACVH,OAAO,CACR;IAED,IAAIS,QAAQ,CAACV,YAAY,KAAKO,SAAS,EAAE;MACvCL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAES,IAAI,CAACC,gCAAM,CAACC,iBAAiB,EAAEH,QAAQ,CAACV,YAAY,CAAC;MACnE,MAAM,IAAI,CAACL,cAAc,CAACmB,UAAU,CAACf,SAAS,EAAE;QAC9CC,YAAY,EAAEU,QAAQ,CAACV;OACxB,CAAC;;IAEJ,OAAOU,QAAQ;EACjB;;AAnDFK","names":["TokenRefresher","constructor","storageUtility","issuerConfigFetcher","clientRegistrar","refresh","sessionId","refreshToken","dpopKey","eventEmitter","oidcContext","clientInfo","getClient","issuerConfig","undefined","Error","dpop","tokenSet","emit","solid_client_authn_core_1","NEW_REFRESH_TOKEN","setForUser","exports"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\refresh\\TokenRefresher.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  IClient,\n  IClientRegistrar,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n  loadOidcContextFromStorage,\n  KeyPair,\n  ITokenRefresher,\n  TokenEndpointResponse,\n  EVENTS,\n} from \"@inrupt/solid-client-authn-core\";\nimport { refresh } from \"@inrupt/oidc-client-ext\";\nimport { EventEmitter } from \"events\";\n\n// Some identifiers are not in camelcase on purpose, as they are named using the\n// official names from the OIDC/OAuth2 specifications.\n/* eslint-disable camelcase */\n\n/**\n * @hidden\n */\nexport default class TokenRefresher implements ITokenRefresher {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async refresh(\n    sessionId: string,\n    refreshToken?: string,\n    dpopKey?: KeyPair,\n    eventEmitter?: EventEmitter\n  ): Promise<TokenEndpointResponse> {\n    const oidcContext = await loadOidcContextFromStorage(\n      sessionId,\n      this.storageUtility,\n      this.issuerConfigFetcher\n    );\n    // This should also retrieve the client from storage\n    const clientInfo: IClient = await this.clientRegistrar.getClient(\n      { sessionId },\n      oidcContext.issuerConfig\n    );\n\n    if (refreshToken === undefined) {\n      // TODO: in a next PR, look up storage for a refresh token\n      throw new Error(\n        `Session [${sessionId}] has no refresh token to allow it to refresh its access token.`\n      );\n    }\n\n    if (oidcContext.dpop && dpopKey === undefined) {\n      throw new Error(\n        `For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`\n      );\n    }\n\n    const tokenSet = await refresh(\n      refreshToken,\n      oidcContext.issuerConfig,\n      clientInfo,\n      dpopKey\n    );\n\n    if (tokenSet.refreshToken !== undefined) {\n      eventEmitter?.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);\n      await this.storageUtility.setForUser(sessionId, {\n        refreshToken: tokenSet.refreshToken,\n      });\n    }\n    return tokenSet;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}