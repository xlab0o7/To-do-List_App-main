import { Parser, Writer } from 'n3';
import { DataFactory } from '../rdfjs.internal.mjs';
import { getSourceUrl } from '../resource/resource.mjs';

//
/**
 * ```{note} This function is still experimental and subject to change, even
 * in a non-major release.
 * ```
 * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.
 *
 * @returns A Parser object.
 * @since 1.15.0
 */
const getTurtleParser = () => {
    const onQuadCallbacks = [];
    const onCompleteCallbacks = [];
    const onErrorCallbacks = [];
    return {
        onQuad: (callback) => {
            onQuadCallbacks.push(callback);
        },
        onError: (callback) => {
            onErrorCallbacks.push(callback);
        },
        onComplete: (callback) => {
            onCompleteCallbacks.push(callback);
        },
        parse: async (source, resourceInfo) => {
            const parser = await getParser(getSourceUrl(resourceInfo));
            parser.parse(source, (error, quad) => {
                if (error) {
                    onErrorCallbacks.forEach((callback) => callback(error));
                }
                else if (quad) {
                    onQuadCallbacks.forEach((callback) => callback(quad));
                }
                else {
                    onCompleteCallbacks.forEach((callback) => callback());
                }
            });
        },
    };
};
async function getParser(baseIri) {
    return new Parser({ format: "text/turtle", baseIRI: baseIri });
}
/**
 * @param quads Triples that should be serialised to Turtle
 * @internal Utility method for internal use; not part of the public API.
 */
async function triplesToTurtle(quads) {
    const format = "text/turtle";
    const writer = new Writer({ format });
    // Remove any potentially lingering references to Named Graphs in Quads;
    // they'll be determined by the URL the Turtle will be sent to:
    const triples = quads.map((quad) => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));
    writer.addQuads(triples);
    const writePromise = new Promise((resolve, reject) => {
        writer.end((error, result) => {
            /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */
            if (error) {
                reject(error);
            }
            else {
                resolve(result);
            }
        });
    });
    const rawTurtle = await writePromise;
    return rawTurtle;
}

export { getTurtleParser, triplesToTurtle };
