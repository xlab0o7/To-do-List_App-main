{"ast":null,"code":"/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire('setimmediate');\nconst crypto = self.crypto || self.msCrypto;\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if (!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n    if (algorithm === 'sha256') {\n      this.algorithm = {\n        name: 'SHA-256'\n      };\n    } else if (algorithm === 'sha1') {\n      this.algorithm = {\n        name: 'SHA-1'\n      };\n    } else {\n      throw new Error(`Unsupported algorithm \"${algorithm}\".`);\n    }\n    this._content = '';\n  }\n  update(msg) {\n    this._content += msg;\n  }\n  async digest() {\n    const data = new TextEncoder().encode(this._content);\n    const buffer = new Uint8Array(await crypto.subtle.digest(this.algorithm, data));\n    // return digest in hex\n    let hex = '';\n    for (let i = 0; i < buffer.length; ++i) {\n      hex += buffer[i].toString(16).padStart(2, '0');\n    }\n    return hex;\n  }\n};","map":{"version":3,"names":["require","crypto","self","msCrypto","module","exports","MessageDigest","constructor","algorithm","subtle","Error","name","_content","update","msg","digest","data","TextEncoder","encode","buffer","Uint8Array","hex","i","length","toString","padStart"],"sources":["G:/To-do-List_App-main/node_modules/rdf-canonize/lib/MessageDigest-browser.js"],"sourcesContent":["/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire('setimmediate');\n\nconst crypto = self.crypto || self.msCrypto;\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if(!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n    if(algorithm === 'sha256') {\n      this.algorithm = {name: 'SHA-256'};\n    } else if(algorithm === 'sha1') {\n      this.algorithm = {name: 'SHA-1'};\n    } else {\n      throw new Error(`Unsupported algorithm \"${algorithm}\".`);\n    }\n    this._content = '';\n  }\n\n  update(msg) {\n    this._content += msg;\n  }\n\n  async digest() {\n    const data = new TextEncoder().encode(this._content);\n    const buffer = new Uint8Array(\n      await crypto.subtle.digest(this.algorithm, data));\n    // return digest in hex\n    let hex = '';\n    for(let i = 0; i < buffer.length; ++i) {\n      hex += buffer[i].toString(16).padStart(2, '0');\n    }\n    return hex;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZA,OAAO,CAAC,cAAc,CAAC;AAEvB,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAM,IAAIC,IAAI,CAACC,QAAQ;AAE3CC,MAAM,CAACC,OAAO,GAAG,MAAMC,aAAa,CAAC;EACnC;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACC,SAAS,EAAE;IACrB;IACA;IACA,IAAG,EAAEP,MAAM,IAAIA,MAAM,CAACQ,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,IAAGF,SAAS,KAAK,QAAQ,EAAE;MACzB,IAAI,CAACA,SAAS,GAAG;QAACG,IAAI,EAAE;MAAS,CAAC;IACpC,CAAC,MAAM,IAAGH,SAAS,KAAK,MAAM,EAAE;MAC9B,IAAI,CAACA,SAAS,GAAG;QAACG,IAAI,EAAE;MAAO,CAAC;IAClC,CAAC,MAAM;MACL,MAAM,IAAID,KAAK,CAAE,0BAAyBF,SAAU,IAAG,CAAC;IAC1D;IACA,IAAI,CAACI,QAAQ,GAAG,EAAE;EACpB;EAEAC,MAAM,CAACC,GAAG,EAAE;IACV,IAAI,CAACF,QAAQ,IAAIE,GAAG;EACtB;EAEA,MAAMC,MAAM,GAAG;IACb,MAAMC,IAAI,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAAC,IAAI,CAACN,QAAQ,CAAC;IACpD,MAAMO,MAAM,GAAG,IAAIC,UAAU,CAC3B,MAAMnB,MAAM,CAACQ,MAAM,CAACM,MAAM,CAAC,IAAI,CAACP,SAAS,EAAEQ,IAAI,CAAC,CAAC;IACnD;IACA,IAAIK,GAAG,GAAG,EAAE;IACZ,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;MACrCD,GAAG,IAAIF,MAAM,CAACG,CAAC,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAChD;IACA,OAAOJ,GAAG;EACZ;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}