{"ast":null,"code":"/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst MessageDigest = require('./MessageDigest');\nconst URDNA2015 = require('./URDNA2015');\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.createMessageDigest = () => new MessageDigest('sha1');\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if (component.termType !== 'BlankNode') {\n      return component;\n    }\n    if (key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n    return {\n      termType: 'BlankNode',\n      value: component.value === id ? '_:a' : '_:z'\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  async createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    let i = 0;\n    for (const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // Note: batch hashing related blank nodes 100 at a time\n      if (++i % 100 === 0) {\n        await this._yield();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = await this.hashRelatedBlankNode(related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n      if (entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n    return hashToRelated;\n  }\n};","map":{"version":3,"names":["MessageDigest","require","URDNA2015","module","exports","URDNA2012","constructor","name","createMessageDigest","modifyFirstDegreeComponent","id","component","key","termType","value","getRelatedPredicate","quad","predicate","createHashToRelated","issuer","hashToRelated","Map","quads","blankNodeInfo","get","i","position","related","subject","object","_yield","hash","hashRelatedBlankNode","entries","push","set"],"sources":["E:/react-todo-app/node_modules/rdf-canonize/lib/URGNA2012.js"],"sourcesContent":["/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst MessageDigest = require('./MessageDigest');\nconst URDNA2015 = require('./URDNA2015');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.createMessageDigest = () => new MessageDigest('sha1');\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    if(key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n    return {\n      termType: 'BlankNode',\n      value: (component.value === id ? '_:a' : '_:z')\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  async createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    let i = 0;\n    for(const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // Note: batch hashing related blank nodes 100 at a time\n      if(++i % 100 === 0) {\n        await this._yield();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = await this.hashRelatedBlankNode(\n        related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n      if(entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AAExCE,MAAM,CAACC,OAAO,GAAG,MAAMC,SAAS,SAASH,SAAS,CAAC;EACjDI,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,IAAI,GAAG,WAAW;IACvB,IAAI,CAACC,mBAAmB,GAAG,MAAM,IAAIR,aAAa,CAAC,MAAM,CAAC;EAC5D;;EAEA;EACAS,0BAA0B,CAACC,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAE;IAC7C,IAAGD,SAAS,CAACE,QAAQ,KAAK,WAAW,EAAE;MACrC,OAAOF,SAAS;IAClB;IACA,IAAGC,GAAG,KAAK,OAAO,EAAE;MAClB,OAAO;QACLC,QAAQ,EAAE,WAAW;QACrBC,KAAK,EAAE;MACT,CAAC;IACH;IACA,OAAO;MACLD,QAAQ,EAAE,WAAW;MACrBC,KAAK,EAAGH,SAAS,CAACG,KAAK,KAAKJ,EAAE,GAAG,KAAK,GAAG;IAC3C,CAAC;EACH;;EAEA;EACAK,mBAAmB,CAACC,IAAI,EAAE;IACxB,OAAOA,IAAI,CAACC,SAAS,CAACH,KAAK;EAC7B;;EAEA;EACA,MAAMI,mBAAmB,CAACR,EAAE,EAAES,MAAM,EAAE;IACpC;IACA;IACA,MAAMC,aAAa,GAAG,IAAIC,GAAG,EAAE;;IAE/B;IACA;IACA,MAAMC,KAAK,GAAG,IAAI,CAACC,aAAa,CAACC,GAAG,CAACd,EAAE,CAAC,CAACY,KAAK;;IAE9C;IACA,IAAIG,CAAC,GAAG,CAAC;IACT,KAAI,MAAMT,IAAI,IAAIM,KAAK,EAAE;MACvB;MACA;MACA;MACA;MACA,IAAII,QAAQ;MACZ,IAAIC,OAAO;MACX,IAAGX,IAAI,CAACY,OAAO,CAACf,QAAQ,KAAK,WAAW,IAAIG,IAAI,CAACY,OAAO,CAACd,KAAK,KAAKJ,EAAE,EAAE;QACrEiB,OAAO,GAAGX,IAAI,CAACY,OAAO,CAACd,KAAK;QAC5BY,QAAQ,GAAG,GAAG;MAChB,CAAC,MAAM,IACLV,IAAI,CAACa,MAAM,CAAChB,QAAQ,KAAK,WAAW,IAAIG,IAAI,CAACa,MAAM,CAACf,KAAK,KAAKJ,EAAE,EAAE;QAClE;QACA;QACA;QACA;QACAiB,OAAO,GAAGX,IAAI,CAACa,MAAM,CAACf,KAAK;QAC3BY,QAAQ,GAAG,GAAG;MAChB,CAAC,MAAM;QACL;QACA;MACF;MACA;MACA,IAAG,EAAED,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE;QAClB,MAAM,IAAI,CAACK,MAAM,EAAE;MACrB;MACA;MACA;MACA;MACA,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,oBAAoB,CAC1CL,OAAO,EAAEX,IAAI,EAAEG,MAAM,EAAEO,QAAQ,CAAC;MAClC,MAAMO,OAAO,GAAGb,aAAa,CAACI,GAAG,CAACO,IAAI,CAAC;MACvC,IAAGE,OAAO,EAAE;QACVA,OAAO,CAACC,IAAI,CAACP,OAAO,CAAC;MACvB,CAAC,MAAM;QACLP,aAAa,CAACe,GAAG,CAACJ,IAAI,EAAE,CAACJ,OAAO,CAAC,CAAC;MACpC;IACF;IAEA,OAAOP,aAAa;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}