{"ast":null,"code":"// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({\n      decodeStrings: true\n    });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n          case 'data':\n            onData = callback;\n            break;\n          case 'end':\n            onEnd = callback;\n            break;\n        }\n      }\n    },\n    // Handle quads by pushing them down the pipeline\n    (error, quad) => {\n      error && this.emit('error', error) || quad && this.push(quad);\n    },\n    // Emit prefixes through the `prefix` event\n    (prefix, uri) => {\n      this.emit('prefix', prefix, uri);\n    });\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => {\n      onData(chunk);\n      done();\n    };\n    this._flush = done => {\n      onEnd();\n      done();\n    };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data', chunk => {\n      this.write(chunk);\n    });\n    stream.on('end', () => {\n      this.end();\n    });\n    stream.on('error', error => {\n      this.emit('error', error);\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["N3Parser","Transform","N3StreamParser","constructor","options","decodeStrings","_readableState","objectMode","parser","onData","onEnd","parse","on","event","callback","error","quad","emit","push","prefix","uri","_transform","chunk","encoding","done","_flush","import","stream","write","end"],"sources":["G:/To-do-List_App-main/node_modules/n3/src/N3StreamParser.js"],"sourcesContent":["// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA,OAAOA,QAAQ,MAAM,YAAY;AACjC,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA,eAAe,MAAMC,cAAc,SAASD,SAAS,CAAC;EACpDE,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;IAC9B,IAAI,CAACC,cAAc,CAACC,UAAU,GAAG,IAAI;;IAErC;IACA,MAAMC,MAAM,GAAG,IAAIR,QAAQ,CAACI,OAAO,CAAC;IACpC,IAAIK,MAAM,EAAEC,KAAK;IACjBF,MAAM,CAACG,KAAK,CAAC;MACXC,EAAE,EAAE,CAACC,KAAK,EAAEC,QAAQ,KAAK;QACvB,QAAQD,KAAK;UACb,KAAK,MAAM;YAAEJ,MAAM,GAAGK,QAAQ;YAAE;UAChC,KAAK,KAAK;YAAIJ,KAAK,GAAGI,QAAQ;YAAE;QAAM;MAExC;IACF,CAAC;IACC;IACA,CAACC,KAAK,EAAEC,IAAI,KAAK;MAAED,KAAK,IAAI,IAAI,CAACE,IAAI,CAAC,OAAO,EAAEF,KAAK,CAAC,IAAIC,IAAI,IAAI,IAAI,CAACE,IAAI,CAACF,IAAI,CAAC;IAAE,CAAC;IACnF;IACA,CAACG,MAAM,EAAEC,GAAG,KAAK;MAAE,IAAI,CAACH,IAAI,CAAC,QAAQ,EAAEE,MAAM,EAAEC,GAAG,CAAC;IAAE,CAAC,CACvD;;IAED;IACA,IAAI,CAACC,UAAU,GAAG,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;MAAEf,MAAM,CAACa,KAAK,CAAC;MAAEE,IAAI,EAAE;IAAE,CAAC;IACvE,IAAI,CAACC,MAAM,GAAGD,IAAI,IAAI;MAAEd,KAAK,EAAE;MAAEc,IAAI,EAAE;IAAE,CAAC;EAC5C;;EAEA;EACAE,MAAM,CAACC,MAAM,EAAE;IACbA,MAAM,CAACf,EAAE,CAAC,MAAM,EAAGU,KAAK,IAAI;MAAE,IAAI,CAACM,KAAK,CAACN,KAAK,CAAC;IAAE,CAAC,CAAC;IACnDK,MAAM,CAACf,EAAE,CAAC,KAAK,EAAI,MAAW;MAAE,IAAI,CAACiB,GAAG,EAAE;IAAE,CAAC,CAAC;IAC9CF,MAAM,CAACf,EAAE,CAAC,OAAO,EAAEG,KAAK,IAAI;MAAE,IAAI,CAACE,IAAI,CAAC,OAAO,EAAEF,KAAK,CAAC;IAAE,CAAC,CAAC;IAC3D,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}