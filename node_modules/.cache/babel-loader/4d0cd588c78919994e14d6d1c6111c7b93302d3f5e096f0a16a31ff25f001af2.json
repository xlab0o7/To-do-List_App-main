{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nfunction hasIssuer(options) {\n  return typeof options.oidcIssuer === \"string\";\n}\nfunction hasRedirectUrl(options) {\n  return typeof options.redirectUrl === \"string\";\n}\nclass OidcLoginHandler {\n  constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {\n    this.storageUtility = storageUtility;\n    this.oidcHandler = oidcHandler;\n    this.issuerConfigFetcher = issuerConfigFetcher;\n    this.clientRegistrar = clientRegistrar;\n  }\n  async canHandle(options) {\n    return hasIssuer(options) && hasRedirectUrl(options);\n  }\n  async handle(options) {\n    if (!hasIssuer(options)) {\n      throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);\n    }\n    if (!hasRedirectUrl(options)) {\n      throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);\n    }\n    const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n    const clientRegistration = await (0, solid_client_authn_core_1.handleRegistration)(options, issuerConfig, this.storageUtility, this.clientRegistrar);\n    const OidcOptions = {\n      issuer: issuerConfig.issuer,\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      ...options,\n      issuerConfiguration: issuerConfig,\n      client: clientRegistration\n    };\n    return this.oidcHandler.handle(OidcOptions);\n  }\n}\nexports.default = OidcLoginHandler;","map":{"version":3,"mappings":";;;;;AA8BA;AAcA,SAASA,SAAS,CAChBC,OAAsB;EAEtB,OAAO,OAAOA,OAAO,CAACC,UAAU,KAAK,QAAQ;AAC/C;AAEA,SAASC,cAAc,CACrBF,OAAsB;EAEtB,OAAO,OAAOA,OAAO,CAACG,WAAW,KAAK,QAAQ;AAChD;AAKA,MAAqBC,gBAAgB;EACnCC,YACUC,cAA+B,EAC/BC,WAAyB,EACzBC,mBAAyC,EACzCC,eAAiC;IAHjC,mBAAc,GAAdH,cAAc;IACd,gBAAW,GAAXC,WAAW;IACX,wBAAmB,GAAnBC,mBAAmB;IACnB,oBAAe,GAAfC,eAAe;EACtB;EAEH,MAAMC,SAAS,CAACV,OAAsB;IACpC,OAAOD,SAAS,CAACC,OAAO,CAAC,IAAIE,cAAc,CAACF,OAAO,CAAC;EACtD;EAEA,MAAMW,MAAM,CAACX,OAAsB;IACjC,IAAI,CAACD,SAAS,CAACC,OAAO,CAAC,EAAE;MACvB,MAAM,IAAIY,4CAAkB,CAC1B,8EAA8EC,IAAI,CAACC,SAAS,CAC1Fd,OAAO,CACR,EAAE,CACJ;;IAEH,IAAI,CAACE,cAAc,CAACF,OAAO,CAAC,EAAE;MAC5B,MAAM,IAAIY,4CAAkB,CAC1B,+EAA+EC,IAAI,CAACC,SAAS,CAC3Fd,OAAO,CACR,EAAE,CACJ;;IAIH,MAAMe,YAAY,GAChB,MAAM,IAAI,CAACP,mBAAmB,CAACQ,WAAW,CAAChB,OAAO,CAACC,UAAU,CAAC;IAEhE,MAAMgB,kBAAkB,GAAG,MAAM,gDAAkB,EACjDjB,OAAO,EACPe,YAAY,EACZ,IAAI,CAACT,cAAc,EACnB,IAAI,CAACG,eAAe,CACrB;IAGD,MAAMS,WAAW,GAAiB;MAMhCC,MAAM,EAAEJ,YAAY,CAACI,MAAM;MAE3BC,IAAI,EAAEpB,OAAO,CAACqB,SAAS,CAACC,WAAW,EAAE,KAAK,MAAM;MAChD,GAAGtB,OAAO;MACVuB,mBAAmB,EAAER,YAAY;MACjCS,MAAM,EAAEP;KACT;IAGD,OAAO,IAAI,CAACV,WAAW,CAACI,MAAM,CAACO,WAAW,CAAC;EAC7C;;AAxDFO","names":["hasIssuer","options","oidcIssuer","hasRedirectUrl","redirectUrl","OidcLoginHandler","constructor","storageUtility","oidcHandler","issuerConfigFetcher","clientRegistrar","canHandle","handle","solid_client_authn_core_1","JSON","stringify","issuerConfig","fetchConfig","clientRegistration","OidcOptions","issuer","dpop","tokenType","toLowerCase","issuerConfiguration","client","exports"],"sources":["G:\\To-do-List_App-main\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\OidcLoginHandler.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handles Common Oidc login functions (Like fetching the configuration)\n */\n\nimport {\n  IClientRegistrar,\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  ILoginOptions,\n  ILoginHandler,\n  IOidcHandler,\n  IOidcOptions,\n  IStorageUtility,\n  ConfigurationError,\n  LoginResult,\n  handleRegistration,\n} from \"@inrupt/solid-client-authn-core\";\n\nfunction hasIssuer(\n  options: ILoginOptions\n): options is ILoginOptions & { oidcIssuer: string } {\n  return typeof options.oidcIssuer === \"string\";\n}\n\nfunction hasRedirectUrl(\n  options: ILoginOptions\n): options is ILoginOptions & { redirectUrl: string } {\n  return typeof options.redirectUrl === \"string\";\n}\n\n/**\n * @hidden\n */\nexport default class OidcLoginHandler implements ILoginHandler {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private oidcHandler: IOidcHandler,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async canHandle(options: ILoginOptions): Promise<boolean> {\n    return hasIssuer(options) && hasRedirectUrl(options);\n  }\n\n  async handle(options: ILoginOptions): Promise<LoginResult> {\n    if (!hasIssuer(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n    if (!hasRedirectUrl(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n\n    // Fetch issuer config.\n    const issuerConfig: IIssuerConfig =\n      await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n\n    const clientRegistration = await handleRegistration(\n      options,\n      issuerConfig,\n      this.storageUtility,\n      this.clientRegistrar\n    );\n\n    // Construct OIDC Options\n    const OidcOptions: IOidcOptions = {\n      // Note that here, the issuer is not the one from the received options, but\n      // from the issuer's config. This enforces the canonical URL is used and stored,\n      // which is also the one present in the ID token, so storing a technically\n      // valid, but different issuer URL (e.g. using a trailing slash or not) now\n      // could prevent from validating the ID token later.\n      issuer: issuerConfig.issuer,\n      // TODO: differentiate if DPoP should be true\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      ...options,\n      issuerConfiguration: issuerConfig,\n      client: clientRegistration,\n    };\n\n    // Call proper OIDC Handler\n    return this.oidcHandler.handle(OidcOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}