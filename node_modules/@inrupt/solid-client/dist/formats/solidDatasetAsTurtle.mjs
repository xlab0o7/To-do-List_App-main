import { Writer, NamedNode } from 'n3';
import { prefixes } from './prefixes.mjs';
import { toRdfJsDataset } from '../rdfjs.mjs';

//
/**
 * A function to serialise a Solid Dataset as Turtle
 *
 * @param dataset The Dataset to serialize as Turtle
 * @param options.prefixes The Prefixes to use for Turtle serialisation (defaulting to a set of well known prefixes)
 * @param options.thing Restricts serialisation to the part of a dataset related to the thing
 * @returns RDF serialised as Turtle
 * @since 1.20.0
 */
async function solidDatasetAsTurtle(dataset, options) {
    const { prefixes: prefixes$1 = prefixes, thing } = Object.assign({}, options);
    const writer = new Writer({ format: "application/turtle", prefixes: prefixes$1 });
    const subject = thing ? new NamedNode(thing) : undefined;
    // If the subject is undefined, all the triples match.
    for (const quad of toRdfJsDataset(dataset).match(subject)) {
        writer.addQuad(quad);
    }
    return new Promise((resolve, reject) => {
        writer.end((error, result) => {
            /* istanbul ignore next */
            if (error) {
                reject(error);
            }
            else {
                resolve(result);
            }
        });
    });
}

export { solidDatasetAsTurtle };
