{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onSessionRestore = exports.onLogout = exports.onLogin = exports.handleIncomingRedirect = exports.logout = exports.login = exports.fetch = exports.getDefaultSession = void 0;\nconst Session_1 = require(\"./Session\");\nlet defaultSession;\nfunction getDefaultSession() {\n  if (typeof defaultSession === \"undefined\") {\n    defaultSession = new Session_1.Session();\n  }\n  return defaultSession;\n}\nexports.getDefaultSession = getDefaultSession;\nconst fetch = function () {\n  const session = getDefaultSession();\n  return session.fetch(...arguments);\n};\nexports.fetch = fetch;\nconst login = function () {\n  const session = getDefaultSession();\n  return session.login(...arguments);\n};\nexports.login = login;\nconst logout = function () {\n  const session = getDefaultSession();\n  return session.logout(...arguments);\n};\nexports.logout = logout;\nconst handleIncomingRedirect = function () {\n  const session = getDefaultSession();\n  return session.handleIncomingRedirect(...arguments);\n};\nexports.handleIncomingRedirect = handleIncomingRedirect;\nconst onLogin = function () {\n  const session = getDefaultSession();\n  return session.onLogin(...arguments);\n};\nexports.onLogin = onLogin;\nconst onLogout = function () {\n  const session = getDefaultSession();\n  return session.onLogout(...arguments);\n};\nexports.onLogout = onLogout;\nconst onSessionRestore = function () {\n  const session = getDefaultSession();\n  return session.onSessionRestore(...arguments);\n};\nexports.onSessionRestore = onSessionRestore;","map":{"version":3,"mappings":";;;;;;AAqBA;AAEA,IAAIA,cAAuB;AAY3B,SAAgBC,iBAAiB;EAC/B,IAAI,OAAOD,cAAc,KAAK,WAAW,EAAE;IACzCA,cAAc,GAAG,IAAIE,iBAAO,EAAE;;EAEhC,OAAOF,cAAc;AACvB;AALAG;AAgBO,MAAMC,KAAK,GAAqB,YAAY;EACjD,MAAMC,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACD,KAAK,CAAC,YAAO,CAAC;AAC/B,CAAC;AAHYD,aAAK;AAYX,MAAMG,KAAK,GAAqB,YAAY;EACjD,MAAMD,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACC,KAAK,CAAC,YAAO,CAAC;AAC/B,CAAC;AAHYH,aAAK;AAWX,MAAMI,MAAM,GAAsB,YAAY;EACnD,MAAMF,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACE,MAAM,CAAC,YAAO,CAAC;AAChC,CAAC;AAHYJ,cAAM;AAWZ,MAAMK,sBAAsB,GAAsC,YAErE;EACF,MAAMH,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACG,sBAAsB,CAAC,YAAO,CAAC;AAChD,CAAC;AALYL,8BAAsB;AAe5B,MAAMM,OAAO,GAAuB,YAAY;EACrD,MAAMJ,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACI,OAAO,CAAC,YAAO,CAAC;AACjC,CAAC;AAHYN,eAAO;AAWb,MAAMO,QAAQ,GAAwB,YAAY;EACvD,MAAML,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACK,QAAQ,CAAC,YAAO,CAAC;AAClC,CAAC;AAHYP,gBAAQ;AAWd,MAAMQ,gBAAgB,GAAgC,YAAY;EACvE,MAAMN,OAAO,GAAGJ,iBAAiB,EAAE;EACnC,OAAOI,OAAO,CAACM,gBAAgB,CAAC,YAAO,CAAC;AAC1C,CAAC;AAHYR,wBAAgB","names":["defaultSession","getDefaultSession","Session_1","exports","fetch","session","login","logout","handleIncomingRedirect","onLogin","onLogout","onSessionRestore"],"sources":["G:\\To-do-List_App-main\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\defaultSession.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { Session } from \"./Session\";\n\nlet defaultSession: Session;\n\n/**\n * Obtain the {@link Session} used when not explicitly instantiating one yourself.\n *\n * When using the top-level exports {@link fetch}, {@link login}, {@link logout},\n * {@link handleIncomingRedirect}, {@link onLogin} and {@link onLogout}, these apply to an\n * implicitly-instantiated {@link Session}.\n * This function returns a reference to that Session in order to obtain e.g. the current user's\n * WebID.\n * @since 1.3.0\n */\nexport function getDefaultSession(): Session {\n  if (typeof defaultSession === \"undefined\") {\n    defaultSession = new Session();\n  }\n  return defaultSession;\n}\n\n/**\n * This function's signature is equal to `window.fetch`, but if the current user is authenticated\n * (see [[login]] and [[handleIncomingRedirect]]), requests made using it will include that user's\n * credentials. If not, this will behave just like the regular `window.fetch`.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch}\n * @since 1.3.0\n */\n/* eslint-disable-next-line no-shadow */\nexport const fetch: Session[\"fetch\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.fetch(...args);\n};\n\n/**\n * Triggers the login process. Note that this method will redirect the user away from your app.\n *\n * @param options Parameter to customize the login behaviour. In particular, two options are mandatory: `options.oidcIssuer`, the user's identity provider, and `options.redirectUrl`, the URL to which the user will be redirected after logging in their identity provider.\n * @returns This method should redirect the user away from the app: it does not return anything. The login process is completed by [[handleIncomingRedirect]].\n * @since 1.3.0\n */\nexport const login: Session[\"login\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.login(...args);\n};\n\n/**\n * Logs the user out of the application. This does not log the user out of their\n * Solid identity provider, and should not redirect the user away.\n *\n * @since 1.3.0\n */\nexport const logout: Session[\"logout\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.logout(...args);\n};\n\n/**\n * Completes the login process by processing the information provided by the Solid identity provider through redirect.\n *\n * @param url The URL of the page handling the redirect, including the query parameters â€” these contain the information to process the login.\n * @since 1.3.0\n */\nexport const handleIncomingRedirect: Session[\"handleIncomingRedirect\"] = (\n  ...args\n) => {\n  const session = getDefaultSession();\n  return session.handleIncomingRedirect(...args);\n};\n\n/**\n * Register a callback function to be called when a user completes login.\n *\n * The callback is called when {@link handleIncomingRedirect} completes successfully.\n * @since 1.3.0\n *\n * @param callback The function called when a user completes login.\n */\nexport const onLogin: Session[\"onLogin\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.onLogin(...args);\n};\n\n/**\n * Register a callback function to be called when a user logs out:\n *\n * @param callback The function called when a user completes logout.\n * @since 1.3.0\n */\nexport const onLogout: Session[\"onLogout\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.onLogout(...args);\n};\n\n/**\n * Register a callback function to be called when a session is restored:\n *\n * @param callback The function called when a session is restored.\n * @since 1.3.0\n */\nexport const onSessionRestore: Session[\"onSessionRestore\"] = (...args) => {\n  const session = getDefaultSession();\n  return session.onSessionRestore(...args);\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}