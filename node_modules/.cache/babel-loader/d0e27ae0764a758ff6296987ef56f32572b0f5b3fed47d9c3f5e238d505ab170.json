{"ast":null,"code":"// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\nconst {\n  rdf,\n  xsd\n} = namespaces;\n\n// Characters in literals that require escaping\nconst escape = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n  escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n  escapedCharacters = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f'\n  };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) {\n          output += chunk;\n          done && done();\n        },\n        end: done => {\n          done && done(null, output);\n        }\n      };\n      this._endStream = true;\n    } else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!/triple|quad/i.test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)}${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    } else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : this._inDefaultGraph ? '.\\n' : '\\n}\\n') + (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate)) this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else this._write(`;\\n    ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else this._write(`${(this._subject === null ? '' : '.\\n') + this._encodeSubject(this._subject = subject)} ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);\n    } catch (error) {\n      done && done(error);\n    }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return `${this._encodeSubject(subject)} ${this._encodeIriOrBlank(predicate)} ${this._encodeObject(object)}${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ? this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && entity.value in this._lists) entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri)) iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value)) value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language) return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string) return `\"${value}\"`;\n    } else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n        case xsd.string:\n          return `\"${value}\"`;\n        case xsd.boolean:\n          if (value === 'true' || value === 'false') return value;\n          break;\n        case xsd.integer:\n          if (/^[+-]?\\d+$/.test(value)) return value;\n          break;\n        case xsd.decimal:\n          if (/^[+-]?\\d*\\.\\d+$/.test(value)) return value;\n          break;\n        case xsd.double:\n          if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value)) return value;\n          break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n      case 'Quad':\n        return this._encodeQuad(object);\n      case 'Literal':\n        return this._encodeLiteral(object);\n      default:\n        return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad(_ref) {\n    let {\n      subject,\n      predicate,\n      object,\n      graph\n    } = _ref;\n    return `<<${this._encodeSubject(subject)} ${this._encodePredicate(predicate)} ${this._encodeObject(object)}${isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined) this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function') this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++) this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs) return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string') iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = prefix += ':';\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '',\n        prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` + `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate,\n      child,\n      length;\n    // Empty blank node\n    if (predicate === undefined) children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType) children = [{\n      predicate: predicate,\n      object: object\n    }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate)) children = [predicate];\n    switch (length = children.length) {\n      // Generate an empty blank node\n      case 0:\n        return new SerializedTerm('[]');\n      // Generate a non-nested one-triple blank node\n      case 1:\n        child = children[0];\n        if (!(child.object instanceof SerializedTerm)) return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)} ]`);\n      // Generate a multi-triple or nested blank node\n      default:\n        let contents = '[';\n        // Write all triples in order\n        for (let i = 0; i < length; i++) {\n          child = children[i];\n          // Write only the object is the predicate is the same as the previous\n          if (child.predicate.equals(predicate)) contents += `, ${this._encodeObject(child.object)}`;\n          // Otherwise, write the predicate and the object\n          else {\n            contents += `${(i ? ';\\n  ' : '\\n  ') + this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)}`;\n            predicate = child.predicate;\n          }\n        }\n        return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0,\n      contents = new Array(length);\n    for (let i = 0; i < length; i++) contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => {\n      singleDone = null, done(error, result);\n    });\n    if (this._endStream) {\n      try {\n        return this._outputStream.end(singleDone);\n      } catch (error) {/* error closing stream */}\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}","map":{"version":3,"names":["namespaces","default","N3DataFactory","Term","isDefaultGraph","DEFAULTGRAPH","defaultGraph","rdf","xsd","escape","escapeAll","escapedCharacters","SerializedTerm","equals","N3Writer","constructor","outputStream","options","_prefixRegex","write","_lists","lists","output","_outputStream","chunk","encoding","done","end","_endStream","undefined","_subject","test","format","_lineMode","_graph","_prefixIRIs","Object","create","prefixes","addPrefixes","baseIRI","_baseMatcher","RegExp","escapeRegex","endsWith","_baseLength","length","_writeQuad","_writeQuadLine","_inDefaultGraph","_write","string","callback","subject","predicate","object","graph","_encodeIriOrBlank","_predicate","_encodeObject","_encodePredicate","_encodeSubject","error","_prefixMatch","quadToString","value","quadsToString","quads","map","t","join","entity","termType","_encodeQuad","list","id","iri","substr","replace","characterReplacer","prefixMatch","exec","_encodeLiteral","literal","language","datatype","boolean","integer","decimal","double","type","_blockedWrite","Error","addQuad","addQuads","i","addPrefix","prefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","Array","singleDone","result","character","charCodeAt","toString","regex"],"sources":["E:/react-todo-app/node_modules/n3/src/N3Writer.js"],"sourcesContent":["// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}