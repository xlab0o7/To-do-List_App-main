{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getSignKey from './get_sign_verify_key.js';\nvar sign = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(alg, key, data) {\n    var cryptoKey, signature;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getSignKey(alg, key, 'sign');\n        case 2:\n          cryptoKey = _context.sent;\n          checkKeyLength(alg, cryptoKey);\n          _context.next = 6;\n          return crypto.subtle.sign(subtleAlgorithm(alg, cryptoKey.algorithm), cryptoKey, data);\n        case 6:\n          signature = _context.sent;\n          return _context.abrupt(\"return\", new Uint8Array(signature));\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function sign(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default sign;","map":{"version":3,"names":["subtleAlgorithm","crypto","checkKeyLength","getSignKey","sign","alg","key","data","cryptoKey","subtle","algorithm","signature","Uint8Array"],"sources":["E:/react-todo-app/node_modules/jose/dist/browser/runtime/sign.js"],"sourcesContent":["import subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getSignKey from './get_sign_verify_key.js';\nconst sign = async (alg, key, data) => {\n    const cryptoKey = await getSignKey(alg, key, 'sign');\n    checkKeyLength(alg, cryptoKey);\n    const signature = await crypto.subtle.sign(subtleAlgorithm(alg, cryptoKey.algorithm), cryptoKey, data);\n    return new Uint8Array(signature);\n};\nexport default sign;\n"],"mappings":";;AAAA,OAAOA,eAAe,MAAM,iBAAiB;AAC7C,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,IAAMC,IAAI;EAAA,sEAAG,iBAAOC,GAAG,EAAEC,GAAG,EAAEC,IAAI;IAAA;IAAA;MAAA;QAAA;UAAA;UAAA,OACNJ,UAAU,CAACE,GAAG,EAAEC,GAAG,EAAE,MAAM,CAAC;QAAA;UAA9CE,SAAS;UACfN,cAAc,CAACG,GAAG,EAAEG,SAAS,CAAC;UAAC;UAAA,OACPP,MAAM,CAACQ,MAAM,CAACL,IAAI,CAACJ,eAAe,CAACK,GAAG,EAAEG,SAAS,CAACE,SAAS,CAAC,EAAEF,SAAS,EAAED,IAAI,CAAC;QAAA;UAAhGI,SAAS;UAAA,iCACR,IAAIC,UAAU,CAACD,SAAS,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACnC;EAAA,gBALKP,IAAI;IAAA;EAAA;AAAA,GAKT;AACD,eAAeA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}