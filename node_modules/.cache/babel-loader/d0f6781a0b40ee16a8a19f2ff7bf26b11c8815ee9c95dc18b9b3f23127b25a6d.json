{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isCloudflareWorkers } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport function generateSecret(_x, _x2) {\n  return _generateSecret.apply(this, arguments);\n}\nfunction _generateSecret() {\n  _generateSecret = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(alg, options) {\n    var _a, length, algorithm, keyUsages;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = alg;\n          _context.next = _context.t0 === 'HS256' ? 3 : _context.t0 === 'HS384' ? 3 : _context.t0 === 'HS512' ? 3 : _context.t0 === 'A128CBC-HS256' ? 7 : _context.t0 === 'A192CBC-HS384' ? 7 : _context.t0 === 'A256CBC-HS512' ? 7 : _context.t0 === 'A128KW' ? 9 : _context.t0 === 'A192KW' ? 9 : _context.t0 === 'A256KW' ? 9 : _context.t0 === 'A128GCMKW' ? 13 : _context.t0 === 'A192GCMKW' ? 13 : _context.t0 === 'A256GCMKW' ? 13 : _context.t0 === 'A128GCM' ? 13 : _context.t0 === 'A192GCM' ? 13 : _context.t0 === 'A256GCM' ? 13 : 17;\n          break;\n        case 3:\n          length = parseInt(alg.slice(-3), 10);\n          algorithm = {\n            name: 'HMAC',\n            hash: \"SHA-\".concat(length),\n            length: length\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context.abrupt(\"break\", 18);\n        case 7:\n          length = parseInt(alg.slice(-3), 10);\n          return _context.abrupt(\"return\", random(new Uint8Array(length >> 3)));\n        case 9:\n          length = parseInt(alg.slice(1, 4), 10);\n          algorithm = {\n            name: 'AES-KW',\n            length: length\n          };\n          keyUsages = ['wrapKey', 'unwrapKey'];\n          return _context.abrupt(\"break\", 18);\n        case 13:\n          length = parseInt(alg.slice(1, 4), 10);\n          algorithm = {\n            name: 'AES-GCM',\n            length: length\n          };\n          keyUsages = ['encrypt', 'decrypt'];\n          return _context.abrupt(\"break\", 18);\n        case 17:\n          throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        case 18:\n          return _context.abrupt(\"return\", crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages));\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _generateSecret.apply(this, arguments);\n}\nfunction getModulusLengthOption(options) {\n  var _a;\n  var modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n  if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n    throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n  }\n  return modulusLength;\n}\nexport function generateKeyPair(_x3, _x4) {\n  return _generateKeyPair.apply(this, arguments);\n}\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(alg, options) {\n    var _a, _b, _c, algorithm, keyUsages, crv, _crv;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = alg;\n          _context2.next = _context2.t0 === 'PS256' ? 3 : _context2.t0 === 'PS384' ? 3 : _context2.t0 === 'PS512' ? 3 : _context2.t0 === 'RS256' ? 6 : _context2.t0 === 'RS384' ? 6 : _context2.t0 === 'RS512' ? 6 : _context2.t0 === 'RSA-OAEP' ? 9 : _context2.t0 === 'RSA-OAEP-256' ? 9 : _context2.t0 === 'RSA-OAEP-384' ? 9 : _context2.t0 === 'RSA-OAEP-512' ? 9 : _context2.t0 === 'ES256' ? 12 : _context2.t0 === 'ES384' ? 15 : _context2.t0 === 'ES512' ? 18 : _context2.t0 === (isCloudflareWorkers() && 'EdDSA') ? 21 : _context2.t0 === 'EdDSA' ? 29 : _context2.t0 === 'ECDH-ES' ? 38 : _context2.t0 === 'ECDH-ES+A128KW' ? 38 : _context2.t0 === 'ECDH-ES+A192KW' ? 38 : _context2.t0 === 'ECDH-ES+A256KW' ? 38 : 49;\n          break;\n        case 3:\n          algorithm = {\n            name: 'RSA-PSS',\n            hash: \"SHA-\".concat(alg.slice(-3)),\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            modulusLength: getModulusLengthOption(options)\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context2.abrupt(\"break\", 50);\n        case 6:\n          algorithm = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: \"SHA-\".concat(alg.slice(-3)),\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            modulusLength: getModulusLengthOption(options)\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context2.abrupt(\"break\", 50);\n        case 9:\n          algorithm = {\n            name: 'RSA-OAEP',\n            hash: \"SHA-\".concat(parseInt(alg.slice(-3), 10) || 1),\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            modulusLength: getModulusLengthOption(options)\n          };\n          keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n          return _context2.abrupt(\"break\", 50);\n        case 12:\n          algorithm = {\n            name: 'ECDSA',\n            namedCurve: 'P-256'\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context2.abrupt(\"break\", 50);\n        case 15:\n          algorithm = {\n            name: 'ECDSA',\n            namedCurve: 'P-384'\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context2.abrupt(\"break\", 50);\n        case 18:\n          algorithm = {\n            name: 'ECDSA',\n            namedCurve: 'P-521'\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context2.abrupt(\"break\", 50);\n        case 21:\n          _context2.t1 = options === null || options === void 0 ? void 0 : options.crv;\n          _context2.next = _context2.t1 === undefined ? 24 : _context2.t1 === 'Ed25519' ? 24 : 27;\n          break;\n        case 24:\n          algorithm = {\n            name: 'NODE-ED25519',\n            namedCurve: 'NODE-ED25519'\n          };\n          keyUsages = ['sign', 'verify'];\n          return _context2.abrupt(\"break\", 28);\n        case 27:\n          throw new JOSENotSupported('Invalid or unsupported crv option provided');\n        case 28:\n          return _context2.abrupt(\"break\", 50);\n        case 29:\n          keyUsages = ['sign', 'verify'];\n          crv = (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'Ed25519';\n          _context2.t2 = crv;\n          _context2.next = _context2.t2 === 'Ed25519' ? 34 : _context2.t2 === 'Ed448' ? 34 : 36;\n          break;\n        case 34:\n          algorithm = {\n            name: crv\n          };\n          return _context2.abrupt(\"break\", 37);\n        case 36:\n          throw new JOSENotSupported('Invalid or unsupported crv option provided');\n        case 37:\n          return _context2.abrupt(\"break\", 50);\n        case 38:\n          keyUsages = ['deriveKey', 'deriveBits'];\n          _crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : 'P-256';\n          _context2.t3 = _crv;\n          _context2.next = _context2.t3 === 'P-256' ? 43 : _context2.t3 === 'P-384' ? 43 : _context2.t3 === 'P-521' ? 43 : _context2.t3 === 'X25519' ? 45 : _context2.t3 === 'X448' ? 45 : 47;\n          break;\n        case 43:\n          algorithm = {\n            name: 'ECDH',\n            namedCurve: _crv\n          };\n          return _context2.abrupt(\"break\", 48);\n        case 45:\n          algorithm = {\n            name: _crv\n          };\n          return _context2.abrupt(\"break\", 48);\n        case 47:\n          throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');\n        case 48:\n          return _context2.abrupt(\"break\", 50);\n        case 49:\n          throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        case 50:\n          return _context2.abrupt(\"return\", crypto.subtle.generateKey(algorithm, (_c = options === null || options === void 0 ? void 0 : options.extractable) !== null && _c !== void 0 ? _c : false, keyUsages));\n        case 51:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _generateKeyPair.apply(this, arguments);\n}","map":{"version":3,"names":["isCloudflareWorkers","crypto","JOSENotSupported","random","generateSecret","alg","options","length","parseInt","slice","algorithm","name","hash","keyUsages","Uint8Array","subtle","generateKey","_a","extractable","getModulusLengthOption","modulusLength","generateKeyPair","publicExponent","namedCurve","crv","undefined","_b","_c"],"sources":["E:/react-todo-app/node_modules/jose/dist/browser/runtime/generate.js"],"sourcesContent":["import { isCloudflareWorkers } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport async function generateSecret(alg, options) {\n    var _a;\n    let length;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            length = parseInt(alg.slice(-3), 10);\n            algorithm = { name: 'HMAC', hash: `SHA-${length}`, length };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'A128CBC-HS256':\n        case 'A192CBC-HS384':\n        case 'A256CBC-HS512':\n            length = parseInt(alg.slice(-3), 10);\n            return random(new Uint8Array(length >> 3));\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-KW', length };\n            keyUsages = ['wrapKey', 'unwrapKey'];\n            break;\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW':\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-GCM', length };\n            keyUsages = ['encrypt', 'decrypt'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n}\nfunction getModulusLengthOption(options) {\n    var _a;\n    const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n    if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n        throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n    }\n    return modulusLength;\n}\nexport async function generateKeyPair(alg, options) {\n    var _a, _b, _c;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = {\n                name: 'RSA-PSS',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = {\n                name: 'RSASSA-PKCS1-v1_5',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case isCloudflareWorkers() && 'EdDSA':\n            switch (options === null || options === void 0 ? void 0 : options.crv) {\n                case undefined:\n                case 'Ed25519':\n                    algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided');\n            }\n            break;\n        case 'EdDSA':\n            keyUsages = ['sign', 'verify'];\n            const crv = (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'Ed25519';\n            switch (crv) {\n                case 'Ed25519':\n                case 'Ed448':\n                    algorithm = { name: crv };\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided');\n            }\n            break;\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            keyUsages = ['deriveKey', 'deriveBits'];\n            const crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : 'P-256';\n            switch (crv) {\n                case 'P-256':\n                case 'P-384':\n                case 'P-521': {\n                    algorithm = { name: 'ECDH', namedCurve: crv };\n                    break;\n                }\n                case 'X25519':\n                case 'X448':\n                    algorithm = { name: crv };\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');\n            }\n            break;\n        }\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return (crypto.subtle.generateKey(algorithm, (_c = options === null || options === void 0 ? void 0 : options.extractable) !== null && _c !== void 0 ? _c : false, keyUsages));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}