{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nvar oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nvar AuthorizationCodeWithPkceOidcHandler = /*#__PURE__*/function () {\n  function AuthorizationCodeWithPkceOidcHandler(storageUtility, redirector) {\n    _classCallCheck(this, AuthorizationCodeWithPkceOidcHandler);\n    this.storageUtility = storageUtility;\n    this.redirector = redirector;\n  }\n  _createClass(AuthorizationCodeWithPkceOidcHandler, [{\n    key: \"canHandle\",\n    value: function () {\n      var _canHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oidcLoginOptions) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported && oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\"authorization_code\") > -1));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function canHandle(_x) {\n        return _canHandle.apply(this, arguments);\n      }\n      return canHandle;\n    }()\n  }, {\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oidcLoginOptions) {\n        var _a, oidcOptions, oidcClientLibrary, redirector, storage, signingRequest;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              oidcOptions = {\n                authority: oidcLoginOptions.issuer.toString(),\n                client_id: oidcLoginOptions.client.clientId,\n                client_secret: oidcLoginOptions.client.clientSecret,\n                redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n                post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n                response_type: \"code\",\n                scope: solid_client_authn_core_1.DEFAULT_SCOPES,\n                filterProtocolClaims: true,\n                loadUserInfo: false,\n                code_verifier: true,\n                prompt: (_a = oidcLoginOptions.prompt) !== null && _a !== void 0 ? _a : \"consent\"\n              };\n              oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);\n              redirector = this.redirector;\n              storage = this.storageUtility;\n              _context2.prev = 4;\n              _context2.next = 7;\n              return oidcClientLibrary.createSigninRequest();\n            case 7:\n              signingRequest = _context2.sent;\n              _context2.next = 10;\n              return Promise.all([storage.setForUser(signingRequest.state._id, {\n                sessionId: oidcLoginOptions.sessionId\n              }), storage.setForUser(oidcLoginOptions.sessionId, {\n                codeVerifier: signingRequest.state._code_verifier,\n                issuer: oidcLoginOptions.issuer.toString(),\n                redirectUrl: oidcLoginOptions.redirectUrl,\n                dpop: oidcLoginOptions.dpop ? \"true\" : \"false\"\n              })]);\n            case 10:\n              redirector.redirect(signingRequest.url.toString(), {\n                handleRedirect: oidcLoginOptions.handleRedirect\n              });\n              _context2.next = 16;\n              break;\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.error(_context2.t0);\n            case 16:\n              return _context2.abrupt(\"return\", undefined);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[4, 13]]);\n      }));\n      function handle(_x2) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n  }]);\n  return AuthorizationCodeWithPkceOidcHandler;\n}();\nexports.default = AuthorizationCodeWithPkceOidcHandler;","map":{"version":3,"mappings":";;;;;;;;;AA6BA;AAQA;AAAqD,IAOhCA,oCAAoC;EAGvD,8CACUC,cAA+B,EAC/BC,UAAuB;IAAA;IADvB,mBAAc,GAAdD,cAAc;IACd,eAAU,GAAVC,UAAU;EACjB;EAAC;IAAA;IAAA;MAAA,4EAEJ,iBAAgBC,gBAA8B;QAAA;UAAA;YAAA;cAAA,iCACrC,CAAC,EACNA,gBAAgB,CAACC,mBAAmB,CAACC,mBAAmB,IACxDF,gBAAgB,CAACC,mBAAmB,CAACC,mBAAmB,CAACC,OAAO,CAC9D,oBAAoB,CACrB,GAAG,CAAC,CAAC,CACP;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yEAED,kBAAaH,gBAA8B;QAAA;QAAA;UAAA;YAAA;cAEnCI,WAAW,GAAG;gBAClBC,SAAS,EAAEL,gBAAgB,CAACM,MAAM,CAACC,QAAQ,EAAE;gBAC7CC,SAAS,EAAER,gBAAgB,CAACS,MAAM,CAACC,QAAQ;gBAC3CC,aAAa,EAAEX,gBAAgB,CAACS,MAAM,CAACG,YAAY;gBACnDC,YAAY,EAAEb,gBAAgB,CAACc,WAAW,CAACP,QAAQ,EAAE;gBACrDQ,wBAAwB,EAAEf,gBAAgB,CAACc,WAAW,CAACP,QAAQ,EAAE;gBACjES,aAAa,EAAE,MAAM;gBACrBC,KAAK,EAAEC,wCAAc;gBACrBC,oBAAoB,EAAE,IAAI;gBAI1BC,YAAY,EAAE,KAAK;gBACnBC,aAAa,EAAE,IAAI;gBACnBC,MAAM,EAAE,sBAAgB,CAACA,MAAM,mCAAI;eACpC;cAGKC,iBAAiB,GAAG,IAAIC,4BAAU,CAACpB,WAAW,CAAC;cAE7CL,UAAU,GAAK,IAAI,CAAnBA,UAAU;cACZ0B,OAAO,GAAG,IAAI,CAAC3B,cAAc;cAAA;cAAA;cAAA,OAGJyB,iBAAiB,CAACG,mBAAmB,EAAE;YAAA;cAA9DC,cAAc;cAAA;cAAA,OACdC,OAAO,CAACC,GAAG,CAAC,CAWhBJ,OAAO,CAACK,UAAU,CAACH,cAAc,CAACI,KAAK,CAACC,GAAG,EAAE;gBAC3CC,SAAS,EAAEjC,gBAAgB,CAACiC;eAC7B,CAAC,EAMFR,OAAO,CAACK,UAAU,CAAC9B,gBAAgB,CAACiC,SAAS,EAAE;gBAE7CC,YAAY,EAAEP,cAAc,CAACI,KAAK,CAACI,cAAc;gBACjD7B,MAAM,EAAEN,gBAAgB,CAACM,MAAM,CAACC,QAAQ,EAAE;gBAE1CO,WAAW,EAAEd,gBAAgB,CAACc,WAAW;gBACzCsB,IAAI,EAAEpC,gBAAgB,CAACoC,IAAI,GAAG,MAAM,GAAG;eACxC,CAAC,CACH,CAAC;YAAA;cAEFrC,UAAU,CAACsC,QAAQ,CAACV,cAAc,CAACW,GAAG,CAAC/B,QAAQ,EAAE,EAAE;gBACjDgC,cAAc,EAAEvC,gBAAgB,CAACuC;eAClC,CAAC;cAAC;cAAA;YAAA;cAAA;cAAA;cAGHC,OAAO,CAACC,KAAK,cAAK;YAAC;cAAA,kCAIdC,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACjB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAnFHC","names":["AuthorizationCodeWithPkceOidcHandler","storageUtility","redirector","oidcLoginOptions","issuerConfiguration","grantTypesSupported","indexOf","oidcOptions","authority","issuer","toString","client_id","client","clientId","client_secret","clientSecret","redirect_uri","redirectUrl","post_logout_redirect_uri","response_type","scope","solid_client_authn_core_1","filterProtocolClaims","loadUserInfo","code_verifier","prompt","oidcClientLibrary","oidc_client_ext_1","storage","createSigninRequest","signingRequest","Promise","all","setForUser","state","_id","sessionId","codeVerifier","_code_verifier","dpop","redirect","url","handleRedirect","console","error","undefined","exports"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\oidcHandlers\\AuthorizationCodeWithPkceOidcHandler.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Authorization Code with PKCE Flow\n */\nimport {\n  IOidcHandler,\n  IOidcOptions,\n  IRedirector,\n  IStorageUtility,\n  LoginResult,\n  DEFAULT_SCOPES,\n} from \"@inrupt/solid-client-authn-core\";\nimport { OidcClient } from \"@inrupt/oidc-client-ext\";\n\n/**\n * @hidden\n * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth\n * PKCE: https://tools.ietf.org/html/rfc7636\n */\nexport default class AuthorizationCodeWithPkceOidcHandler\n  implements IOidcHandler\n{\n  constructor(\n    private storageUtility: IStorageUtility,\n    private redirector: IRedirector\n  ) {}\n\n  async canHandle(oidcLoginOptions: IOidcOptions): Promise<boolean> {\n    return !!(\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\n        \"authorization_code\"\n      ) > -1\n    );\n  }\n\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    /* eslint-disable camelcase */\n    const oidcOptions = {\n      authority: oidcLoginOptions.issuer.toString(),\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n      redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      response_type: \"code\",\n      scope: DEFAULT_SCOPES,\n      filterProtocolClaims: true,\n      // The userinfo endpoint on NSS fails, so disable this for now\n      // Note that in Solid, information should be retrieved from the\n      // profile referenced by the WebId.\n      loadUserInfo: false,\n      code_verifier: true,\n      prompt: oidcLoginOptions.prompt ?? \"consent\",\n    };\n    /* eslint-enable camelcase */\n\n    const oidcClientLibrary = new OidcClient(oidcOptions);\n\n    const { redirector } = this;\n    const storage = this.storageUtility;\n\n    try {\n      const signingRequest = await oidcClientLibrary.createSigninRequest();\n      await Promise.all([\n        // We use the OAuth 'state' value (which should be crypto-random) as\n        // the key in our storage to store our actual SessionID. We do this\n        // 'cos we'll need to lookup our session information again when the\n        // browser is redirected back to us (i.e. the OAuth client\n        // application) from the Authorization Server.\n        // We don't want to use our session ID as the OAuth 'state' value, as\n        // that session ID can be any developer-specified value, and therefore\n        // may not be appropriate (since the OAuth 'state' value should really\n        // be an unguessable crypto-random value).\n        // eslint-disable-next-line no-underscore-dangle\n        storage.setForUser(signingRequest.state._id, {\n          sessionId: oidcLoginOptions.sessionId,\n        }),\n\n        // Store our login-process state using the session ID as the key.\n        // Strictly speaking, this indirection from our OAuth state value to\n        // our session ID is unnecessary, but it provides a slightly cleaner\n        // separation of concerns.\n        storage.setForUser(oidcLoginOptions.sessionId, {\n          // eslint-disable-next-line no-underscore-dangle\n          codeVerifier: signingRequest.state._code_verifier,\n          issuer: oidcLoginOptions.issuer.toString(),\n          // The redirect URL is read after redirect, so it must be stored now.\n          redirectUrl: oidcLoginOptions.redirectUrl,\n          dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n        }),\n      ]);\n\n      redirector.redirect(signingRequest.url.toString(), {\n        handleRedirect: oidcLoginOptions.handleRedirect,\n      });\n    } catch (err: unknown) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    // The login is only completed AFTER redirect, so nothing to return here.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}