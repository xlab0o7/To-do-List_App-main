{"ast":null,"code":"import _toConsumableArray from \"E:/react-todo-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { withAlg as invalidKeyInput } from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nvar symmetricTypeCheck = function symmetricTypeCheck(alg, key) {\n  if (key instanceof Uint8Array) return;\n  if (!isKeyLike(key)) {\n    throw new TypeError(invalidKeyInput.apply(void 0, [alg, key].concat(_toConsumableArray(types), ['Uint8Array'])));\n  }\n  if (key.type !== 'secret') {\n    throw new TypeError(\"\".concat(types.join(' or '), \" instances for symmetric algorithms must be of type \\\"secret\\\"\"));\n  }\n};\nvar asymmetricTypeCheck = function asymmetricTypeCheck(alg, key, usage) {\n  if (!isKeyLike(key)) {\n    throw new TypeError(invalidKeyInput.apply(void 0, [alg, key].concat(_toConsumableArray(types))));\n  }\n  if (key.type === 'secret') {\n    throw new TypeError(\"\".concat(types.join(' or '), \" instances for asymmetric algorithms must not be of type \\\"secret\\\"\"));\n  }\n  if (usage === 'sign' && key.type === 'public') {\n    throw new TypeError(\"\".concat(types.join(' or '), \" instances for asymmetric algorithm signing must be of type \\\"private\\\"\"));\n  }\n  if (usage === 'decrypt' && key.type === 'public') {\n    throw new TypeError(\"\".concat(types.join(' or '), \" instances for asymmetric algorithm decryption must be of type \\\"private\\\"\"));\n  }\n  if (key.algorithm && usage === 'verify' && key.type === 'private') {\n    throw new TypeError(\"\".concat(types.join(' or '), \" instances for asymmetric algorithm verifying must be of type \\\"public\\\"\"));\n  }\n  if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n    throw new TypeError(\"\".concat(types.join(' or '), \" instances for asymmetric algorithm encryption must be of type \\\"public\\\"\"));\n  }\n};\nvar checkKeyType = function checkKeyType(alg, key, usage) {\n  var symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\\d{3}(?:GCM)?KW$/.test(alg);\n  if (symmetric) {\n    symmetricTypeCheck(alg, key);\n  } else {\n    asymmetricTypeCheck(alg, key, usage);\n  }\n};\nexport default checkKeyType;","map":{"version":3,"names":["withAlg","invalidKeyInput","isKeyLike","types","symmetricTypeCheck","alg","key","Uint8Array","TypeError","type","join","asymmetricTypeCheck","usage","algorithm","checkKeyType","symmetric","startsWith","test"],"sources":["E:/react-todo-app/node_modules/jose/dist/browser/lib/check_key_type.js"],"sourcesContent":["import { withAlg as invalidKeyInput } from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nconst symmetricTypeCheck = (alg, key) => {\n    if (key instanceof Uint8Array)\n        return;\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types, 'Uint8Array'));\n    }\n    if (key.type !== 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type \"secret\"`);\n    }\n};\nconst asymmetricTypeCheck = (alg, key, usage) => {\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types));\n    }\n    if (key.type === 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type \"secret\"`);\n    }\n    if (usage === 'sign' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type \"private\"`);\n    }\n    if (usage === 'decrypt' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type \"private\"`);\n    }\n    if (key.algorithm && usage === 'verify' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type \"public\"`);\n    }\n    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type \"public\"`);\n    }\n};\nconst checkKeyType = (alg, key, usage) => {\n    const symmetric = alg.startsWith('HS') ||\n        alg === 'dir' ||\n        alg.startsWith('PBES2') ||\n        /^A\\d{3}(?:GCM)?KW$/.test(alg);\n    if (symmetric) {\n        symmetricTypeCheck(alg, key);\n    }\n    else {\n        asymmetricTypeCheck(alg, key, usage);\n    }\n};\nexport default checkKeyType;\n"],"mappings":";AAAA,SAASA,OAAO,IAAIC,eAAe,QAAQ,wBAAwB;AACnE,OAAOC,SAAS,IAAIC,KAAK,QAAQ,2BAA2B;AAC5D,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,GAAG,EAAEC,GAAG,EAAK;EACrC,IAAIA,GAAG,YAAYC,UAAU,EACzB;EACJ,IAAI,CAACL,SAAS,CAACI,GAAG,CAAC,EAAE;IACjB,MAAM,IAAIE,SAAS,CAACP,eAAe,gBAACI,GAAG,EAAEC,GAAG,4BAAKH,KAAK,IAAE,YAAY,GAAC,CAAC;EAC1E;EACA,IAAIG,GAAG,CAACG,IAAI,KAAK,QAAQ,EAAE;IACvB,MAAM,IAAID,SAAS,WAAIL,KAAK,CAACO,IAAI,CAAC,MAAM,CAAC,oEAA+D;EAC5G;AACJ,CAAC;AACD,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIN,GAAG,EAAEC,GAAG,EAAEM,KAAK,EAAK;EAC7C,IAAI,CAACV,SAAS,CAACI,GAAG,CAAC,EAAE;IACjB,MAAM,IAAIE,SAAS,CAACP,eAAe,gBAACI,GAAG,EAAEC,GAAG,4BAAKH,KAAK,GAAC,CAAC;EAC5D;EACA,IAAIG,GAAG,CAACG,IAAI,KAAK,QAAQ,EAAE;IACvB,MAAM,IAAID,SAAS,WAAIL,KAAK,CAACO,IAAI,CAAC,MAAM,CAAC,yEAAoE;EACjH;EACA,IAAIE,KAAK,KAAK,MAAM,IAAIN,GAAG,CAACG,IAAI,KAAK,QAAQ,EAAE;IAC3C,MAAM,IAAID,SAAS,WAAIL,KAAK,CAACO,IAAI,CAAC,MAAM,CAAC,6EAAwE;EACrH;EACA,IAAIE,KAAK,KAAK,SAAS,IAAIN,GAAG,CAACG,IAAI,KAAK,QAAQ,EAAE;IAC9C,MAAM,IAAID,SAAS,WAAIL,KAAK,CAACO,IAAI,CAAC,MAAM,CAAC,gFAA2E;EACxH;EACA,IAAIJ,GAAG,CAACO,SAAS,IAAID,KAAK,KAAK,QAAQ,IAAIN,GAAG,CAACG,IAAI,KAAK,SAAS,EAAE;IAC/D,MAAM,IAAID,SAAS,WAAIL,KAAK,CAACO,IAAI,CAAC,MAAM,CAAC,8EAAyE;EACtH;EACA,IAAIJ,GAAG,CAACO,SAAS,IAAID,KAAK,KAAK,SAAS,IAAIN,GAAG,CAACG,IAAI,KAAK,SAAS,EAAE;IAChE,MAAM,IAAID,SAAS,WAAIL,KAAK,CAACO,IAAI,CAAC,MAAM,CAAC,+EAA0E;EACvH;AACJ,CAAC;AACD,IAAMI,YAAY,GAAG,SAAfA,YAAY,CAAIT,GAAG,EAAEC,GAAG,EAAEM,KAAK,EAAK;EACtC,IAAMG,SAAS,GAAGV,GAAG,CAACW,UAAU,CAAC,IAAI,CAAC,IAClCX,GAAG,KAAK,KAAK,IACbA,GAAG,CAACW,UAAU,CAAC,OAAO,CAAC,IACvB,oBAAoB,CAACC,IAAI,CAACZ,GAAG,CAAC;EAClC,IAAIU,SAAS,EAAE;IACXX,kBAAkB,CAACC,GAAG,EAAEC,GAAG,CAAC;EAChC,CAAC,MACI;IACDK,mBAAmB,CAACN,GAAG,EAAEC,GAAG,EAAEM,KAAK,CAAC;EACxC;AACJ,CAAC;AACD,eAAeE,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}