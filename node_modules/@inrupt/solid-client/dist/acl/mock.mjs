import { getSourceIri } from '../resource/resource.mjs';
import { internal_cloneResource } from '../resource/resource.internal.mjs';
import { createAcl } from './acl.mjs';
import { internal_setAcl, internal_getContainerPath } from './acl.internal.mjs';
import { mockContainerFrom } from '../resource/mock.mjs';
import { setMockAclUrl } from './mock.internal.mjs';

//
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests** that
 * require a [[SolidDataset]] with a resource ACL (Access Control List).
 * ```
 *
 * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].
 *
 * @param resource The Resource to mock up with a new resource ACL.
 * @returns The input Resource with an empty resource ACL attached.
 * @since 0.2.0
 */
function addMockResourceAclTo(resource) {
    var _a;
    const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : "https://your.pod/mock-acl.ttl";
    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {
        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl }),
    });
    const aclDataset = createAcl(resourceWithAclUrl);
    const resourceWithResourceAcl = internal_setAcl(resourceWithAclUrl, {
        resourceAcl: aclDataset,
        fallbackAcl: null,
    });
    return resourceWithResourceAcl;
}
/**
 *
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * [[SolidDataset]] with a fallback ACL (Access Control List).
 * ```
 *
 * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].
 *
 * @param resource The Resource to mock up with new fallback ACL.
 * @returns The input Resource with an empty fallback ACL attached.
 * @since 0.2.0
 */
function addMockFallbackAclTo(resource) {
    const containerUrl = internal_getContainerPath(getSourceIri(resource));
    const aclUrl = `${containerUrl}.acl`;
    const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);
    const aclDataset = createAcl(mockContainer);
    const resourceWithFallbackAcl = internal_setAcl(internal_cloneResource(resource), {
        resourceAcl: null,
        fallbackAcl: aclDataset,
    });
    return resourceWithFallbackAcl;
}

export { addMockFallbackAclTo, addMockResourceAclTo };
