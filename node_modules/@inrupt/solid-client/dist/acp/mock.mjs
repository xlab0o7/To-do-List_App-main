import { mockSolidDatasetFrom } from '../resource/mock.mjs';
import { getSourceUrl } from '../resource/resource.mjs';
import { internal_cloneResource } from '../resource/resource.internal.mjs';

//
/**
 *
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * [[AccessControlResource]].
 * ```
 *
 * Initialises a new empty Access Control Resource for a given Resource for use
 * in **unit tests**.
 *
 * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.
 * @returns The mocked empty Access Control Resource for the given Resource.
 * @since 1.6.0
 */
function mockAcrFor(resourceUrl) {
    const acrUrl = new URL("access-control-resource", resourceUrl).href;
    const acr = Object.assign(Object.assign({}, mockSolidDatasetFrom(acrUrl)), { accessTo: resourceUrl });
    return acr;
}
/**
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * Resource with an [[AccessControlResource]].
 * ```
 *
 * Attaches an Access Control Resource to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getPolicyUrlAll]].
 *
 * @param resource The Resource to mock up with a new resource ACL.
 * @param accessControlResource The Access Control Resource to attach to the given Resource.
 * @returns The input Resource with an empty resource ACL attached.
 * @since 1.6.0
 */
function addMockAcrTo(resource, accessControlResource = mockAcrFor(getSourceUrl(resource))) {
    const resourceWithAcr = Object.assign(internal_cloneResource(resource), {
        internal_acp: {
            acr: accessControlResource,
            aprs: {},
        },
    });
    return resourceWithAcr;
}

export { addMockAcrTo, mockAcrFor };
