import { getFileWithAccessDatasets, getFileWithAcr, getLinkedAcrUrl, getReferencedPolicyUrlAll, getResourceInfoWithAccessDatasets, getResourceInfoWithAcr, getSolidDatasetWithAccessDatasets, getSolidDatasetWithAcr, hasAccessibleAcr, saveAcrFor, isAcpControlled } from './acp.mjs';
import { acrAsMarkdown, addAcrPolicyUrl, addMemberAcrPolicyUrl, addMemberPolicyUrl, addPolicyUrl, getAcrPolicyUrlAll, getMemberAcrPolicyUrlAll, getMemberPolicyUrlAll, getPolicyUrlAll, hasLinkedAcr, removeAcrPolicyUrl, removeAcrPolicyUrlAll, removeMemberAcrPolicyUrl, removeMemberAcrPolicyUrlAll, removeMemberPolicyUrl, removeMemberPolicyUrlAll, removePolicyUrl, removePolicyUrlAll } from './control.mjs';
import { createPolicy, getAllowModesV1, getDenyModesV1, getPolicy, getPolicyAll, policyAsMarkdown, removePolicy, setAllowModesV1, setDenyModesV1, setPolicy, createResourcePolicyFor, getResourceAcrPolicy, getResourceAcrPolicyAll, getResourcePolicy, getResourcePolicyAll, removeResourceAcrPolicy, removeResourcePolicy, setResourceAcrPolicy, setResourcePolicy } from './policy.mjs';
import { addAgent, addGroup, createRule, getAgentAll, getGroupAll, getRule, getRuleAll, removeAgent, removeGroup, removeRule, ruleAsMarkdown, setAgent, setGroup, setRule, addClient, getClientAll, hasAnyClient, removeClient, setAnyClient, setClient, removeAnyClient, hasAuthenticated, hasCreator, hasPublic, setAuthenticated, setCreator, setPublic, removeAuthenticated, removeCreator, removePublic, getAnyOfRuleUrlAll, addAnyOfRuleUrl, removeAnyOfRuleUrl, setAnyOfRuleUrl, getAllOfRuleUrlAll, addAllOfRuleUrl, removeAllOfRuleUrl, setAllOfRuleUrl, getNoneOfRuleUrlAll, addNoneOfRuleUrl, removeNoneOfRuleUrl, setNoneOfRuleUrl, createResourceRuleFor, getResourceRule, getResourceRuleAll, removeResourceRule, setResourceRule } from './rule.mjs';
import { addMockAcrTo, mockAcrFor } from './mock.mjs';

//
const v3AcpFunctions = {
    getFileWithAccessDatasets,
    getFileWithAcr,
    getLinkedAcrUrl,
    getReferencedPolicyUrlAll,
    getResourceInfoWithAccessDatasets,
    getResourceInfoWithAcr,
    getSolidDatasetWithAccessDatasets,
    getSolidDatasetWithAcr,
    hasAccessibleAcr,
    saveAcrFor,
    isAcpControlled,
};
const v3ControlFunctions = {
    acrAsMarkdown,
    addAcrPolicyUrl,
    addMemberAcrPolicyUrl,
    addMemberPolicyUrl,
    addPolicyUrl,
    getAcrPolicyUrlAll,
    getMemberAcrPolicyUrlAll,
    getMemberPolicyUrlAll,
    getPolicyUrlAll,
    hasLinkedAcr,
    removeAcrPolicyUrl,
    removeAcrPolicyUrlAll,
    removeMemberAcrPolicyUrl,
    removeMemberAcrPolicyUrlAll,
    removeMemberPolicyUrl,
    removeMemberPolicyUrlAll,
    removePolicyUrl,
    removePolicyUrlAll,
};
const v3PolicyFunctions = {
    createPolicy,
    getAllowModes: getAllowModesV1,
    getDenyModes: getDenyModesV1,
    getPolicy,
    getPolicyAll,
    policyAsMarkdown,
    removePolicy,
    setAllowModes: setAllowModesV1,
    setDenyModes: setDenyModesV1,
    setPolicy,
    createResourcePolicyFor,
    getResourceAcrPolicy,
    getResourceAcrPolicyAll,
    getResourcePolicy,
    getResourcePolicyAll,
    removeResourceAcrPolicy,
    removeResourcePolicy,
    setResourceAcrPolicy,
    setResourcePolicy,
};
const v3RuleFunctions = {
    addAgent,
    addGroup,
    createRule,
    getAgentAll,
    getGroupAll,
    getRule,
    getRuleAll,
    removeAgent,
    removeGroup,
    removeRule,
    ruleAsMarkdown,
    setAgent,
    setGroup,
    setRule,
    addClient,
    getClientAll,
    hasAnyClient,
    removeClient,
    setAnyClient,
    setClient,
    removeAnyClient,
    hasAuthenticated,
    hasCreator,
    hasPublic,
    setAuthenticated,
    setCreator,
    setPublic,
    removeAuthenticated,
    removeCreator,
    removePublic,
    getAnyOfRuleUrlAll,
    addAnyOfRuleUrl,
    removeAnyOfRuleUrl,
    setAnyOfRuleUrl,
    getAllOfRuleUrlAll,
    addAllOfRuleUrl,
    removeAllOfRuleUrl,
    setAllOfRuleUrl,
    getNoneOfRuleUrlAll,
    addNoneOfRuleUrl,
    removeNoneOfRuleUrl,
    setNoneOfRuleUrl,
    createResourceRuleFor,
    getResourceRule,
    getResourceRuleAll,
    removeResourceRule,
    setResourceRule,
};
const v3MockFunctions = {
    addMockAcrTo,
    mockAcrFor,
};
/**
 * @hidden
 * @deprecated Please import "acp_ess_1" directly.
 */
const acp_v3 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v3AcpFunctions), v3ControlFunctions), v3PolicyFunctions), v3RuleFunctions), v3MockFunctions);

export { acp_v3 };
