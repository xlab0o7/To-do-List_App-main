{"ast":null,"code":"const BlankNode = require('./BlankNode.js');\nconst DefaultGraph = require('./DefaultGraph.js');\nconst fromTermRaw = require('./fromTerm.js');\nconst Literal = require('./Literal.js');\nconst NamedNode = require('./NamedNode.js');\nconst Quad = require('./Quad.js');\nconst Variable = require('./Variable.js');\nfunction namedNode(value) {\n  return new NamedNode(value);\n}\nfunction blankNode(value) {\n  return new BlankNode(value);\n}\nfunction literal(value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype);\n    }\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype));\n  }\n  return new Literal(value, null, languageOrDatatype);\n}\nfunction variable(value) {\n  return new Variable(value);\n}\nfunction defaultGraph() {\n  return DataFactory.defaultGraphInstance;\n}\nfunction triple(subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object);\n}\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance);\n}\nfunction fromTerm(original) {\n  return fromTermRaw.call(DataFactory, original);\n}\nfunction fromQuad(original) {\n  return fromTermRaw.call(DataFactory, original);\n}\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n};\nmodule.exports = DataFactory;","map":{"version":3,"names":["BlankNode","require","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","namedNode","value","blankNode","literal","languageOrDatatype","indexOf","DataFactory","variable","defaultGraph","defaultGraphInstance","triple","subject","predicate","object","quad","graph","fromTerm","original","call","fromQuad","module","exports"],"sources":["E:/react-todo-app/node_modules/@rdfjs/data-model/lib/DataFactory.js"],"sourcesContent":["const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC3C,MAAMC,YAAY,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACjD,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMG,OAAO,GAAGH,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMI,SAAS,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AAC3C,MAAMK,IAAI,GAAGL,OAAO,CAAC,WAAW,CAAC;AACjC,MAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAe,CAAC;AAEzC,SAASO,SAAS,CAAEC,KAAK,EAAE;EACzB,OAAO,IAAIJ,SAAS,CAACI,KAAK,CAAC;AAC7B;AAEA,SAASC,SAAS,CAAED,KAAK,EAAE;EACzB,OAAO,IAAIT,SAAS,CAACS,KAAK,CAAC;AAC7B;AAEA,SAASE,OAAO,CAAEF,KAAK,EAAEG,kBAAkB,EAAE;EAC3C,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;IAC1C,IAAIA,kBAAkB,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1C,OAAO,IAAIT,OAAO,CAACK,KAAK,EAAEG,kBAAkB,CAAC;IAC/C;IAEA,OAAO,IAAIR,OAAO,CAACK,KAAK,EAAE,IAAI,EAAEK,WAAW,CAACN,SAAS,CAACI,kBAAkB,CAAC,CAAC;EAC5E;EAEA,OAAO,IAAIR,OAAO,CAACK,KAAK,EAAE,IAAI,EAAEG,kBAAkB,CAAC;AACrD;AAEA,SAASG,QAAQ,CAAEN,KAAK,EAAE;EACxB,OAAO,IAAIF,QAAQ,CAACE,KAAK,CAAC;AAC5B;AAEA,SAASO,YAAY,GAAI;EACvB,OAAOF,WAAW,CAACG,oBAAoB;AACzC;AAEA,SAASC,MAAM,CAAEC,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAE;EAC3C,OAAOP,WAAW,CAACQ,IAAI,CAACH,OAAO,EAAEC,SAAS,EAAEC,MAAM,CAAC;AACrD;AAEA,SAASC,IAAI,CAAEH,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAEE,KAAK,EAAE;EAChD,OAAO,IAAIjB,IAAI,CAACa,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAEE,KAAK,IAAIT,WAAW,CAACG,oBAAoB,CAAC;AACxF;AAEA,SAASO,QAAQ,CAAEC,QAAQ,EAAE;EAC3B,OAAOtB,WAAW,CAACuB,IAAI,CAACZ,WAAW,EAAEW,QAAQ,CAAC;AAChD;AAEA,SAASE,QAAQ,CAAEF,QAAQ,EAAE;EAC3B,OAAOtB,WAAW,CAACuB,IAAI,CAACZ,WAAW,EAAEW,QAAQ,CAAC;AAChD;AAEA,MAAMX,WAAW,GAAG;EAClBN,SAAS;EACTE,SAAS;EACTC,OAAO;EACPI,QAAQ;EACRC,YAAY;EACZE,MAAM;EACNI,IAAI;EACJE,QAAQ;EACRG,QAAQ;EACRV,oBAAoB,EAAE,IAAIf,YAAY;AACxC,CAAC;AAED0B,MAAM,CAACC,OAAO,GAAGf,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}