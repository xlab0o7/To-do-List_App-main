{"ast":null,"code":"/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _createForOfIteratorHelper = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  function Permuter(list) {\n    _classCallCheck(this, Permuter);\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for (var i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  _createClass(Permuter, [{\n    key: \"hasNext\",\n    value: function hasNext() {\n      return !this.done;\n    }\n\n    /**\n     * Gets the next permutation. Call hasNext() to ensure there is another one\n     * first.\n     *\n     * @return the next permutation.\n     */\n  }, {\n    key: \"next\",\n    value: function next() {\n      // copy current permutation to return it\n      var current = this.current,\n        dir = this.dir;\n      var rval = current.slice();\n\n      /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n       permutation algorithm. */\n\n      // get largest mobile element k\n      // (mobile: element is greater than the one it is looking at)\n      var k = null;\n      var pos = 0;\n      var length = current.length;\n      for (var i = 0; i < length; ++i) {\n        var element = current[i];\n        var left = dir.get(element);\n        if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {\n          k = element;\n          pos = i;\n        }\n      }\n\n      // no more permutations\n      if (k === null) {\n        this.done = true;\n      } else {\n        // swap k and the element it is looking at\n        var swap = dir.get(k) ? pos - 1 : pos + 1;\n        current[pos] = current[swap];\n        current[swap] = k;\n\n        // reverse the direction of all elements larger than k\n        var _iterator = _createForOfIteratorHelper(current),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _element = _step.value;\n            if (_element > k) {\n              dir.set(_element, !dir.get(_element));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return rval;\n    }\n  }]);\n  return Permuter;\n}();","map":{"version":3,"names":["module","exports","list","current","sort","done","dir","Map","i","length","set","rval","slice","k","pos","element","left","get","swap"],"sources":["E:/react-todo-app/node_modules/rdf-canonize/lib/Permuter.js"],"sourcesContent":["/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for(let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation to return it\n    const {current, dir} = this;\n    const rval = current.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n    for(let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > current[i - 1]) ||\n        (!left && i < (length - 1) && element > current[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(const element of current) {\n        if(element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAEbA,MAAM,CAACC,OAAO;EACZ;AACF;AACA;AACA;AACA;AACA;EACE,kBAAYC,IAAI,EAAE;IAAA;IAChB;IACA,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACE,IAAI,EAAE;IAC1B;IACA,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB;IACA,IAAI,CAACC,GAAG,GAAG,IAAIC,GAAG,EAAE;IACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,MAAM,EAAE,EAAED,CAAC,EAAE;MACnC,IAAI,CAACF,GAAG,CAACI,GAAG,CAACR,IAAI,CAACM,CAAC,CAAC,EAAE,IAAI,CAAC;IAC7B;EACF;;EAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,mBAAU;MACR,OAAO,CAAC,IAAI,CAACH,IAAI;IACnB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,gBAAO;MACL;MACA,IAAOF,OAAO,GAAS,IAAI,CAApBA,OAAO;QAAEG,GAAG,GAAI,IAAI,CAAXA,GAAG;MACnB,IAAMK,IAAI,GAAGR,OAAO,CAACS,KAAK,EAAE;;MAE5B;AACJ;;MAEI;MACA;MACA,IAAIC,CAAC,GAAG,IAAI;MACZ,IAAIC,GAAG,GAAG,CAAC;MACX,IAAML,MAAM,GAAGN,OAAO,CAACM,MAAM;MAC7B,KAAI,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAE,EAAED,CAAC,EAAE;QAC9B,IAAMO,OAAO,GAAGZ,OAAO,CAACK,CAAC,CAAC;QAC1B,IAAMQ,IAAI,GAAGV,GAAG,CAACW,GAAG,CAACF,OAAO,CAAC;QAC7B,IAAG,CAACF,CAAC,KAAK,IAAI,IAAIE,OAAO,GAAGF,CAAC,MACzBG,IAAI,IAAIR,CAAC,GAAG,CAAC,IAAIO,OAAO,GAAGZ,OAAO,CAACK,CAAC,GAAG,CAAC,CAAC,IAC1C,CAACQ,IAAI,IAAIR,CAAC,GAAIC,MAAM,GAAG,CAAE,IAAIM,OAAO,GAAGZ,OAAO,CAACK,CAAC,GAAG,CAAC,CAAE,CAAC,EAAE;UAC1DK,CAAC,GAAGE,OAAO;UACXD,GAAG,GAAGN,CAAC;QACT;MACF;;MAEA;MACA,IAAGK,CAAC,KAAK,IAAI,EAAE;QACb,IAAI,CAACR,IAAI,GAAG,IAAI;MAClB,CAAC,MAAM;QACL;QACA,IAAMa,IAAI,GAAGZ,GAAG,CAACW,GAAG,CAACJ,CAAC,CAAC,GAAGC,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC;QAC3CX,OAAO,CAACW,GAAG,CAAC,GAAGX,OAAO,CAACe,IAAI,CAAC;QAC5Bf,OAAO,CAACe,IAAI,CAAC,GAAGL,CAAC;;QAEjB;QAAA,2CACqBV,OAAO;UAAA;QAAA;UAA5B,oDAA8B;YAAA,IAApBY,QAAO;YACf,IAAGA,QAAO,GAAGF,CAAC,EAAE;cACdP,GAAG,CAACI,GAAG,CAACK,QAAO,EAAE,CAACT,GAAG,CAACW,GAAG,CAACF,QAAO,CAAC,CAAC;YACrC;UACF;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;MAEA,OAAOJ,IAAI;IACb;EAAC;EAAA;AAAA,GACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}