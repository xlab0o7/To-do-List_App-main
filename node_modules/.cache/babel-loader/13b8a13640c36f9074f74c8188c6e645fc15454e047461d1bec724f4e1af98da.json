{"ast":null,"code":"/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for (let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation to return it\n    const {\n      current,\n      dir\n    } = this;\n    const rval = current.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n    for (let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n      if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if (k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for (const element of current) {\n        if (element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n    return rval;\n  }\n};","map":{"version":3,"names":["module","exports","Permuter","constructor","list","current","sort","done","dir","Map","i","length","set","hasNext","next","rval","slice","k","pos","element","left","get","swap"],"sources":["E:/react-todo-app/node_modules/rdf-canonize/lib/Permuter.js"],"sourcesContent":["/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for(let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation to return it\n    const {current, dir} = this;\n    const rval = current.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n    for(let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > current[i - 1]) ||\n        (!left && i < (length - 1) && element > current[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(const element of current) {\n        if(element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,MAAMC,QAAQ,CAAC;EAC9B;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,IAAI,EAAE;IAChB;IACA,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACE,IAAI,EAAE;IAC1B;IACA,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB;IACA,IAAI,CAACC,GAAG,GAAG,IAAIC,GAAG,EAAE;IACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,MAAM,EAAE,EAAED,CAAC,EAAE;MACnC,IAAI,CAACF,GAAG,CAACI,GAAG,CAACR,IAAI,CAACM,CAAC,CAAC,EAAE,IAAI,CAAC;IAC7B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEG,OAAO,GAAG;IACR,OAAO,CAAC,IAAI,CAACN,IAAI;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEO,IAAI,GAAG;IACL;IACA,MAAM;MAACT,OAAO;MAAEG;IAAG,CAAC,GAAG,IAAI;IAC3B,MAAMO,IAAI,GAAGV,OAAO,CAACW,KAAK,EAAE;;IAE5B;AACJ;;IAEI;IACA;IACA,IAAIC,CAAC,GAAG,IAAI;IACZ,IAAIC,GAAG,GAAG,CAAC;IACX,MAAMP,MAAM,GAAGN,OAAO,CAACM,MAAM;IAC7B,KAAI,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAE,EAAED,CAAC,EAAE;MAC9B,MAAMS,OAAO,GAAGd,OAAO,CAACK,CAAC,CAAC;MAC1B,MAAMU,IAAI,GAAGZ,GAAG,CAACa,GAAG,CAACF,OAAO,CAAC;MAC7B,IAAG,CAACF,CAAC,KAAK,IAAI,IAAIE,OAAO,GAAGF,CAAC,MACzBG,IAAI,IAAIV,CAAC,GAAG,CAAC,IAAIS,OAAO,GAAGd,OAAO,CAACK,CAAC,GAAG,CAAC,CAAC,IAC1C,CAACU,IAAI,IAAIV,CAAC,GAAIC,MAAM,GAAG,CAAE,IAAIQ,OAAO,GAAGd,OAAO,CAACK,CAAC,GAAG,CAAC,CAAE,CAAC,EAAE;QAC1DO,CAAC,GAAGE,OAAO;QACXD,GAAG,GAAGR,CAAC;MACT;IACF;;IAEA;IACA,IAAGO,CAAC,KAAK,IAAI,EAAE;MACb,IAAI,CAACV,IAAI,GAAG,IAAI;IAClB,CAAC,MAAM;MACL;MACA,MAAMe,IAAI,GAAGd,GAAG,CAACa,GAAG,CAACJ,CAAC,CAAC,GAAGC,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC;MAC3Cb,OAAO,CAACa,GAAG,CAAC,GAAGb,OAAO,CAACiB,IAAI,CAAC;MAC5BjB,OAAO,CAACiB,IAAI,CAAC,GAAGL,CAAC;;MAEjB;MACA,KAAI,MAAME,OAAO,IAAId,OAAO,EAAE;QAC5B,IAAGc,OAAO,GAAGF,CAAC,EAAE;UACdT,GAAG,CAACI,GAAG,CAACO,OAAO,EAAE,CAACX,GAAG,CAACa,GAAG,CAACF,OAAO,CAAC,CAAC;QACrC;MACF;IACF;IAEA,OAAOJ,IAAI;EACb;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}