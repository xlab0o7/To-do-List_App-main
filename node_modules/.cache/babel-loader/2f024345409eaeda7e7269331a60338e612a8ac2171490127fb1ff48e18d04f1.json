{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst types = require('./types');\nconst api = {};\nmodule.exports = api;\n\n/**\n * Returns true if the given value is a subject with properties.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject with properties, false if not.\n */\napi.isSubject = v => {\n  // Note: A value is a subject if all of these hold true:\n  // 1. It is an Object.\n  // 2. It is not a @value, @set, or @list.\n  // 3. It has more than 1 key OR any existing key is not @id.\n  if (types.isObject(v) && !('@value' in v || '@set' in v || '@list' in v)) {\n    const keyCount = Object.keys(v).length;\n    return keyCount > 1 || !('@id' in v);\n  }\n  return false;\n};\n\n/**\n * Returns true if the given value is a subject reference.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject reference, false if not.\n */\napi.isSubjectReference = v =>\n// Note: A value is a subject reference if all of these hold true:\n// 1. It is an Object.\n// 2. It has a single key: @id.\ntypes.isObject(v) && Object.keys(v).length === 1 && '@id' in v;\n\n/**\n * Returns true if the given value is a @value.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @value, false if not.\n */\napi.isValue = v =>\n// Note: A value is a @value if all of these hold true:\n// 1. It is an Object.\n// 2. It has the @value property.\ntypes.isObject(v) && '@value' in v;\n\n/**\n * Returns true if the given value is a @list.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @list, false if not.\n */\napi.isList = v =>\n// Note: A value is a @list if all of these hold true:\n// 1. It is an Object.\n// 2. It has the @list property.\ntypes.isObject(v) && '@list' in v;\n\n/**\n * Returns true if the given value is a @graph.\n *\n * @return true if the value is a @graph, false if not.\n */\napi.isGraph = v => {\n  // Note: A value is a graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It may have '@id' or '@index'\n  return types.isObject(v) && '@graph' in v && Object.keys(v).filter(key => key !== '@id' && key !== '@index').length === 1;\n};\n\n/**\n * Returns true if the given value is a simple @graph.\n *\n * @return true if the value is a simple @graph, false if not.\n */\napi.isSimpleGraph = v => {\n  // Note: A value is a simple graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It has only 1 key or 2 keys where one of them is `@index`.\n  return api.isGraph(v) && !('@id' in v);\n};\n\n/**\n * Returns true if the given value is a blank node.\n *\n * @param v the value to check.\n *\n * @return true if the value is a blank node, false if not.\n */\napi.isBlankNode = v => {\n  // Note: A value is a blank node if all of these hold true:\n  // 1. It is an Object.\n  // 2. If it has an @id key its value begins with '_:'.\n  // 3. It has no keys OR is not a @value, @set, or @list.\n  if (types.isObject(v)) {\n    if ('@id' in v) {\n      return v['@id'].indexOf('_:') === 0;\n    }\n    return Object.keys(v).length === 0 || !('@value' in v || '@set' in v || '@list' in v);\n  }\n  return false;\n};","map":{"version":3,"names":["types","require","api","module","exports","isSubject","v","isObject","keyCount","Object","keys","length","isSubjectReference","isValue","isList","isGraph","filter","key","isSimpleGraph","isBlankNode","indexOf"],"sources":["E:/react-todo-app/node_modules/jsonld/lib/graphTypes.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst types = require('./types');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Returns true if the given value is a subject with properties.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject with properties, false if not.\n */\napi.isSubject = v => {\n  // Note: A value is a subject if all of these hold true:\n  // 1. It is an Object.\n  // 2. It is not a @value, @set, or @list.\n  // 3. It has more than 1 key OR any existing key is not @id.\n  if(types.isObject(v) &&\n    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {\n    const keyCount = Object.keys(v).length;\n    return (keyCount > 1 || !('@id' in v));\n  }\n  return false;\n};\n\n/**\n * Returns true if the given value is a subject reference.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject reference, false if not.\n */\napi.isSubjectReference = v =>\n  // Note: A value is a subject reference if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has a single key: @id.\n  (types.isObject(v) && Object.keys(v).length === 1 && ('@id' in v));\n\n/**\n * Returns true if the given value is a @value.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @value, false if not.\n */\napi.isValue = v =>\n  // Note: A value is a @value if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has the @value property.\n  types.isObject(v) && ('@value' in v);\n\n/**\n * Returns true if the given value is a @list.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @list, false if not.\n */\napi.isList = v =>\n  // Note: A value is a @list if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has the @list property.\n  types.isObject(v) && ('@list' in v);\n\n/**\n * Returns true if the given value is a @graph.\n *\n * @return true if the value is a @graph, false if not.\n */\napi.isGraph = v => {\n  // Note: A value is a graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It may have '@id' or '@index'\n  return types.isObject(v) &&\n    '@graph' in v &&\n    Object.keys(v)\n      .filter(key => key !== '@id' && key !== '@index').length === 1;\n};\n\n/**\n * Returns true if the given value is a simple @graph.\n *\n * @return true if the value is a simple @graph, false if not.\n */\napi.isSimpleGraph = v => {\n  // Note: A value is a simple graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It has only 1 key or 2 keys where one of them is `@index`.\n  return api.isGraph(v) && !('@id' in v);\n};\n\n/**\n * Returns true if the given value is a blank node.\n *\n * @param v the value to check.\n *\n * @return true if the value is a blank node, false if not.\n */\napi.isBlankNode = v => {\n  // Note: A value is a blank node if all of these hold true:\n  // 1. It is an Object.\n  // 2. If it has an @id key its value begins with '_:'.\n  // 3. It has no keys OR is not a @value, @set, or @list.\n  if(types.isObject(v)) {\n    if('@id' in v) {\n      return (v['@id'].indexOf('_:') === 0);\n    }\n    return (Object.keys(v).length === 0 ||\n      !(('@value' in v) || ('@set' in v) || ('@list' in v)));\n  }\n  return false;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAMC,GAAG,GAAG,CAAC,CAAC;AACdC,MAAM,CAACC,OAAO,GAAGF,GAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,GAAG,CAACG,SAAS,GAAGC,CAAC,IAAI;EACnB;EACA;EACA;EACA;EACA,IAAGN,KAAK,CAACO,QAAQ,CAACD,CAAC,CAAC,IAClB,EAAG,QAAQ,IAAIA,CAAC,IAAM,MAAM,IAAIA,CAAE,IAAK,OAAO,IAAIA,CAAE,CAAC,EAAE;IACvD,MAAME,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACJ,CAAC,CAAC,CAACK,MAAM;IACtC,OAAQH,QAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,IAAIF,CAAC,CAAC;EACvC;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,GAAG,CAACU,kBAAkB,GAAGN,CAAC;AACxB;AACA;AACA;AACCN,KAAK,CAACO,QAAQ,CAACD,CAAC,CAAC,IAAIG,MAAM,CAACC,IAAI,CAACJ,CAAC,CAAC,CAACK,MAAM,KAAK,CAAC,IAAK,KAAK,IAAIL,CAAG;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,GAAG,CAACW,OAAO,GAAGP,CAAC;AACb;AACA;AACA;AACAN,KAAK,CAACO,QAAQ,CAACD,CAAC,CAAC,IAAK,QAAQ,IAAIA,CAAE;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,GAAG,CAACY,MAAM,GAAGR,CAAC;AACZ;AACA;AACA;AACAN,KAAK,CAACO,QAAQ,CAACD,CAAC,CAAC,IAAK,OAAO,IAAIA,CAAE;;AAErC;AACA;AACA;AACA;AACA;AACAJ,GAAG,CAACa,OAAO,GAAGT,CAAC,IAAI;EACjB;EACA;EACA;EACA;EACA,OAAON,KAAK,CAACO,QAAQ,CAACD,CAAC,CAAC,IACtB,QAAQ,IAAIA,CAAC,IACbG,MAAM,CAACC,IAAI,CAACJ,CAAC,CAAC,CACXU,MAAM,CAACC,GAAG,IAAIA,GAAG,KAAK,KAAK,IAAIA,GAAG,KAAK,QAAQ,CAAC,CAACN,MAAM,KAAK,CAAC;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAT,GAAG,CAACgB,aAAa,GAAGZ,CAAC,IAAI;EACvB;EACA;EACA;EACA;EACA,OAAOJ,GAAG,CAACa,OAAO,CAACT,CAAC,CAAC,IAAI,EAAE,KAAK,IAAIA,CAAC,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,GAAG,CAACiB,WAAW,GAAGb,CAAC,IAAI;EACrB;EACA;EACA;EACA;EACA,IAAGN,KAAK,CAACO,QAAQ,CAACD,CAAC,CAAC,EAAE;IACpB,IAAG,KAAK,IAAIA,CAAC,EAAE;MACb,OAAQA,CAAC,CAAC,KAAK,CAAC,CAACc,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IACtC;IACA,OAAQX,MAAM,CAACC,IAAI,CAACJ,CAAC,CAAC,CAACK,MAAM,KAAK,CAAC,IACjC,EAAG,QAAQ,IAAIL,CAAC,IAAM,MAAM,IAAIA,CAAE,IAAK,OAAO,IAAIA,CAAE,CAAC;EACzD;EACA,OAAO,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}