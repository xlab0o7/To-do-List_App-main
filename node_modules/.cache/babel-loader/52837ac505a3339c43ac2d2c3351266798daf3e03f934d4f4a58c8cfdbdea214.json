{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WELL_KNOWN_OPENID_CONFIG = void 0;\nvar solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nvar urlPath_1 = require(\"../../util/urlPath\");\nexports.WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\nvar issuerConfigKeyMap = {\n  issuer: {\n    toKey: \"issuer\",\n    convertToUrl: true\n  },\n  authorization_endpoint: {\n    toKey: \"authorizationEndpoint\",\n    convertToUrl: true\n  },\n  token_endpoint: {\n    toKey: \"tokenEndpoint\",\n    convertToUrl: true\n  },\n  userinfo_endpoint: {\n    toKey: \"userinfoEndpoint\",\n    convertToUrl: true\n  },\n  jwks_uri: {\n    toKey: \"jwksUri\",\n    convertToUrl: true\n  },\n  registration_endpoint: {\n    toKey: \"registrationEndpoint\",\n    convertToUrl: true\n  },\n  scopes_supported: {\n    toKey: \"scopesSupported\"\n  },\n  response_types_supported: {\n    toKey: \"responseTypesSupported\"\n  },\n  response_modes_supported: {\n    toKey: \"responseModesSupported\"\n  },\n  grant_types_supported: {\n    toKey: \"grantTypesSupported\"\n  },\n  acr_values_supported: {\n    toKey: \"acrValuesSupported\"\n  },\n  subject_types_supported: {\n    toKey: \"subjectTypesSupported\"\n  },\n  id_token_signing_alg_values_supported: {\n    toKey: \"idTokenSigningAlgValuesSupported\"\n  },\n  id_token_encryption_alg_values_supported: {\n    toKey: \"idTokenEncryptionAlgValuesSupported\"\n  },\n  id_token_encryption_enc_values_supported: {\n    toKey: \"idTokenEncryptionEncValuesSupported\"\n  },\n  userinfo_signing_alg_values_supported: {\n    toKey: \"userinfoSigningAlgValuesSupported\"\n  },\n  userinfo_encryption_alg_values_supported: {\n    toKey: \"userinfoEncryptionAlgValuesSupported\"\n  },\n  userinfo_encryption_enc_values_supported: {\n    toKey: \"userinfoEncryptionEncValuesSupported\"\n  },\n  request_object_signing_alg_values_supported: {\n    toKey: \"requestObjectSigningAlgValuesSupported\"\n  },\n  request_object_encryption_alg_values_supported: {\n    toKey: \"requestObjectEncryptionAlgValuesSupported\"\n  },\n  request_object_encryption_enc_values_supported: {\n    toKey: \"requestObjectEncryptionEncValuesSupported\"\n  },\n  token_endpoint_auth_methods_supported: {\n    toKey: \"tokenEndpointAuthMethodsSupported\"\n  },\n  token_endpoint_auth_signing_alg_values_supported: {\n    toKey: \"tokenEndpointAuthSigningAlgValuesSupported\"\n  },\n  display_values_supported: {\n    toKey: \"displayValuesSupported\"\n  },\n  claim_types_supported: {\n    toKey: \"claimTypesSupported\"\n  },\n  claims_supported: {\n    toKey: \"claimsSupported\"\n  },\n  service_documentation: {\n    toKey: \"serviceDocumentation\"\n  },\n  claims_locales_supported: {\n    toKey: \"claimsLocalesSupported\"\n  },\n  ui_locales_supported: {\n    toKey: \"uiLocalesSupported\"\n  },\n  claims_parameter_supported: {\n    toKey: \"claimsParameterSupported\"\n  },\n  request_parameter_supported: {\n    toKey: \"requestParameterSupported\"\n  },\n  request_uri_parameter_supported: {\n    toKey: \"requestUriParameterSupported\"\n  },\n  require_request_uri_registration: {\n    toKey: \"requireRequestUriRegistration\"\n  },\n  op_policy_uri: {\n    toKey: \"opPolicyUri\",\n    convertToUrl: true\n  },\n  op_tos_uri: {\n    toKey: \"opTosUri\",\n    convertToUrl: true\n  }\n};\nfunction processConfig(config) {\n  var parsedConfig = {};\n  Object.keys(config).forEach(function (key) {\n    if (issuerConfigKeyMap[key]) {\n      parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n    }\n  });\n  if (!Array.isArray(parsedConfig.scopesSupported)) {\n    parsedConfig.scopesSupported = [\"openid\"];\n  }\n  return parsedConfig;\n}\nvar IssuerConfigFetcher = /*#__PURE__*/function () {\n  function IssuerConfigFetcher(storageUtility) {\n    _classCallCheck(this, IssuerConfigFetcher);\n    this.storageUtility = storageUtility;\n  }\n  _createClass(IssuerConfigFetcher, [{\n    key: \"fetchConfig\",\n    value: function () {\n      var _fetchConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(issuer) {\n        var issuerConfig, openIdConfigUrl, issuerConfigRequestBody;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              openIdConfigUrl = (0, urlPath_1.appendToUrlPathname)(issuer, exports.WELL_KNOWN_OPENID_CONFIG);\n              _context.next = 3;\n              return window.fetch(openIdConfigUrl);\n            case 3:\n              issuerConfigRequestBody = _context.sent;\n              _context.prev = 4;\n              _context.t0 = processConfig;\n              _context.next = 8;\n              return issuerConfigRequestBody.json();\n            case 8:\n              _context.t1 = _context.sent;\n              issuerConfig = (0, _context.t0)(_context.t1);\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t2 = _context[\"catch\"](4);\n              throw new solid_client_authn_core_1.ConfigurationError(\"[\".concat(issuer.toString(), \"] has an invalid configuration: \").concat(_context.t2.message));\n            case 15:\n              _context.next = 17;\n              return this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));\n            case 17:\n              return _context.abrupt(\"return\", issuerConfig);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[4, 12]]);\n      }));\n      function fetchConfig(_x) {\n        return _fetchConfig.apply(this, arguments);\n      }\n      return fetchConfig;\n    }()\n  }], [{\n    key: \"getLocalStorageKey\",\n    value: function getLocalStorageKey(issuer) {\n      return \"issuerConfig:\".concat(issuer);\n    }\n  }]);\n  return IssuerConfigFetcher;\n}();\nexports.default = IssuerConfigFetcher;","map":{"version":3,"mappings":"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","names":["exports","issuerConfigKeyMap","issuer","toKey","convertToUrl","authorization_endpoint","token_endpoint","userinfo_endpoint","jwks_uri","registration_endpoint","scopes_supported","response_types_supported","response_modes_supported","grant_types_supported","acr_values_supported","subject_types_supported","id_token_signing_alg_values_supported","id_token_encryption_alg_values_supported","id_token_encryption_enc_values_supported","userinfo_signing_alg_values_supported","userinfo_encryption_alg_values_supported","userinfo_encryption_enc_values_supported","request_object_signing_alg_values_supported","request_object_encryption_alg_values_supported","request_object_encryption_enc_values_supported","token_endpoint_auth_methods_supported","token_endpoint_auth_signing_alg_values_supported","display_values_supported","claim_types_supported","claims_supported","service_documentation","claims_locales_supported","ui_locales_supported","claims_parameter_supported","request_parameter_supported","request_uri_parameter_supported","require_request_uri_registration","op_policy_uri","op_tos_uri","processConfig","config","parsedConfig","Object","keys","forEach","key","Array","isArray","scopesSupported","IssuerConfigFetcher","storageUtility","openIdConfigUrl","window","fetch","issuerConfigRequestBody","json","issuerConfig","solid_client_authn_core_1","toString","message","set","getLocalStorageKey","JSON","stringify"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\IssuerConfigFetcher.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for fetching an IDP configuration\n */\nimport {\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n  ConfigurationError,\n} from \"@inrupt/solid-client-authn-core\";\nimport { appendToUrlPathname } from \"../../util/urlPath\";\n\nexport const WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\n\n/* eslint-disable camelcase */\nconst issuerConfigKeyMap: Record<\n  string,\n  { toKey: string; convertToUrl?: boolean }\n> = {\n  issuer: {\n    toKey: \"issuer\",\n    convertToUrl: true,\n  },\n  authorization_endpoint: {\n    toKey: \"authorizationEndpoint\",\n    convertToUrl: true,\n  },\n  token_endpoint: {\n    toKey: \"tokenEndpoint\",\n    convertToUrl: true,\n  },\n  userinfo_endpoint: {\n    toKey: \"userinfoEndpoint\",\n    convertToUrl: true,\n  },\n  jwks_uri: {\n    toKey: \"jwksUri\",\n    convertToUrl: true,\n  },\n  registration_endpoint: {\n    toKey: \"registrationEndpoint\",\n    convertToUrl: true,\n  },\n  scopes_supported: { toKey: \"scopesSupported\" },\n  response_types_supported: { toKey: \"responseTypesSupported\" },\n  response_modes_supported: { toKey: \"responseModesSupported\" },\n  grant_types_supported: { toKey: \"grantTypesSupported\" },\n  acr_values_supported: { toKey: \"acrValuesSupported\" },\n  subject_types_supported: { toKey: \"subjectTypesSupported\" },\n  id_token_signing_alg_values_supported: {\n    toKey: \"idTokenSigningAlgValuesSupported\",\n  },\n  id_token_encryption_alg_values_supported: {\n    toKey: \"idTokenEncryptionAlgValuesSupported\",\n  },\n  id_token_encryption_enc_values_supported: {\n    toKey: \"idTokenEncryptionEncValuesSupported\",\n  },\n  userinfo_signing_alg_values_supported: {\n    toKey: \"userinfoSigningAlgValuesSupported\",\n  },\n  userinfo_encryption_alg_values_supported: {\n    toKey: \"userinfoEncryptionAlgValuesSupported\",\n  },\n  userinfo_encryption_enc_values_supported: {\n    toKey: \"userinfoEncryptionEncValuesSupported\",\n  },\n  request_object_signing_alg_values_supported: {\n    toKey: \"requestObjectSigningAlgValuesSupported\",\n  },\n  request_object_encryption_alg_values_supported: {\n    toKey: \"requestObjectEncryptionAlgValuesSupported\",\n  },\n  request_object_encryption_enc_values_supported: {\n    toKey: \"requestObjectEncryptionEncValuesSupported\",\n  },\n  token_endpoint_auth_methods_supported: {\n    toKey: \"tokenEndpointAuthMethodsSupported\",\n  },\n  token_endpoint_auth_signing_alg_values_supported: {\n    toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\n  },\n  display_values_supported: { toKey: \"displayValuesSupported\" },\n  claim_types_supported: { toKey: \"claimTypesSupported\" },\n  claims_supported: { toKey: \"claimsSupported\" },\n  service_documentation: { toKey: \"serviceDocumentation\" },\n  claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\n  ui_locales_supported: { toKey: \"uiLocalesSupported\" },\n  claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\n  request_parameter_supported: { toKey: \"requestParameterSupported\" },\n  request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\n  require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\n  op_policy_uri: {\n    toKey: \"opPolicyUri\",\n    convertToUrl: true,\n  },\n  op_tos_uri: {\n    toKey: \"opTosUri\",\n    convertToUrl: true,\n  },\n};\n/* eslint-enable camelcase */\n\nfunction processConfig(\n  config: Record<string, string | string[]>\n): IIssuerConfig {\n  const parsedConfig: Record<string, string | string[]> = {};\n  Object.keys(config).forEach((key) => {\n    if (issuerConfigKeyMap[key]) {\n      // TODO: PMcB55: Validate URL if \"issuerConfigKeyMap[key].convertToUrl\"\n      //  if (issuerConfigKeyMap[key].convertToUrl) {\n      //   validateUrl(config[key]);\n      //  }\n      parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n    }\n  });\n  if (!Array.isArray(parsedConfig.scopesSupported)) {\n    parsedConfig.scopesSupported = [\"openid\"];\n  }\n  return parsedConfig as unknown as IIssuerConfig;\n}\n\n/**\n * @hidden\n */\nexport default class IssuerConfigFetcher implements IIssuerConfigFetcher {\n  constructor(private storageUtility: IStorageUtility) {}\n\n  // This method needs no state (so can be static), and can be exposed to allow\n  // callers to know where this implementation puts state it needs.\n  public static getLocalStorageKey(issuer: string): string {\n    return `issuerConfig:${issuer}`;\n  }\n\n  async fetchConfig(issuer: string): Promise<IIssuerConfig> {\n    let issuerConfig: IIssuerConfig;\n\n    const openIdConfigUrl = appendToUrlPathname(\n      issuer,\n      WELL_KNOWN_OPENID_CONFIG\n    );\n    const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\n    // Check the validity of the fetched config\n    try {\n      issuerConfig = processConfig(await issuerConfigRequestBody.json());\n    } catch (err) {\n      throw new ConfigurationError(\n        `[${issuer.toString()}] has an invalid configuration: ${\n          (err as { message: string }).message\n        }`\n      );\n    }\n\n    // Update store with fetched config\n    await this.storageUtility.set(\n      IssuerConfigFetcher.getLocalStorageKey(issuer),\n      JSON.stringify(issuerConfig)\n    );\n\n    return issuerConfig;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}