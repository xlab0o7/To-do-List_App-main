{"ast":null,"code":"// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst {\n  rdf,\n  xsd\n} = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term) return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType && this.value === other.value;\n  }\n\n  // ### Implement hashCode for Immutable.js, since we implement `equals`\n  // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()\n  hashCode() {\n    return 0;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value: this.value\n    };\n  }\n}\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id,\n      dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n    // If \"@\" follows, return rdf:langString; xsd:string otherwise\n    char !== '@' ? xsd.string : rdf.langString;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal) return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;\n  }\n  toJSON() {\n    return {\n      termType: this.termType,\n      value: this.value,\n      language: this.language,\n      datatype: {\n        termType: 'NamedNode',\n        value: this.datatypeString\n      }\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return this === other || !!other && this.termType === other.termType;\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id) return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n    case '?':\n      return factory.variable(id.substr(1));\n    case '_':\n      return factory.blankNode(id.substr(2));\n    case '\"':\n      // Shortcut for internal literals\n      if (factory === DataFactory) return new Literal(id);\n      // Literal without datatype or language\n      if (id[id.length - 1] === '\"') return factory.literal(id.substr(1, id.length - 2));\n      // Literal with datatype or language\n      const endPos = id.lastIndexOf('\"', id.length - 1);\n      return factory.literal(id.substr(1, endPos - 1), id[endPos + 1] === '@' ? id.substr(endPos + 2) : factory.namedNode(id.substr(endPos + 3)));\n    case '<':\n      const components = quadId.exec(id);\n      return factory.quad(termFromId(unescapeQuotes(components[1]), factory), termFromId(unescapeQuotes(components[2]), factory), termFromId(unescapeQuotes(components[3]), factory), components[4] && termFromId(unescapeQuotes(components[4]), factory));\n    default:\n      return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string') return term;\n  if (term instanceof Term && term.termType !== 'Quad') return term.id;\n  if (!term) return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n    case 'NamedNode':\n      return term.value;\n    case 'BlankNode':\n      return `_:${term.value}`;\n    case 'Variable':\n      return `?${term.value}`;\n    case 'DefaultGraph':\n      return '';\n    case 'Literal':\n      return `\"${term.value}\"${term.language ? `@${term.language}` : term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : ''}`;\n    case 'Quad':\n      // To identify RDF* quad components, we escape quotes by doubling them.\n      // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n      return `<<${escapeQuotes(termToId(term.subject))} ${escapeQuotes(termToId(term.predicate))} ${escapeQuotes(termToId(term.object))}${isDefaultGraph(term.graph) ? '' : ` ${termToId(term.graph)}`}>>`;\n    default:\n      throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject = subject;\n    this._predicate = predicate;\n    this._object = object;\n    this._graph = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n  get subject() {\n    return this._subject;\n  }\n  get predicate() {\n    return this._predicate;\n  }\n  get object() {\n    return this._object;\n  }\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType: this.termType,\n      subject: this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object: this._object.toJSON(),\n      graph: this._graph.toJSON()\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject) && this._predicate.equals(other.predicate) && this._object.equals(other.object) && this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string') return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean') datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value)) datatype = Number.isInteger(value) ? xsd.integer : xsd.double;else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value)) value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return datatype === '' || datatype === xsd.string ? new Literal(`\"${value}\"`) : new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}","map":{"version":3,"names":["namespaces","isDefaultGraph","rdf","xsd","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","namedNode","blankNode","variable","literal","defaultGraph","quad","triple","Term","constructor","id","value","equals","other","termType","hashCode","toJSON","NamedNode","Literal","substring","lastIndexOf","language","atPos","length","substr","toLowerCase","datatype","datatypeString","dtPos","char","string","langString","BlankNode","name","Variable","DefaultGraph","termFromId","factory","endPos","components","exec","unescapeQuotes","termToId","term","escapeQuotes","subject","predicate","object","graph","Error","Quad","_subject","_predicate","_object","_graph","Triple","replace","_","quoted","iri","languageOrDataType","boolean","Number","isFinite","isInteger","integer","double","isNaN"],"sources":["E:/react-todo-app/node_modules/n3/src/N3DataFactory.js"],"sourcesContent":["// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Implement hashCode for Immutable.js, since we implement `equals`\n  // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()\n  hashCode() {\n    return 0;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject   = subject;\n    this._predicate = predicate;\n    this._object    = object;\n    this._graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  get subject() {\n    return this._subject;\n  }\n\n  get predicate() {\n    return this._predicate;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object:    this._object.toJSON(),\n      graph:     this._graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject)     &&\n                      this._predicate.equals(other.predicate) &&\n                      this._object.equals(other.object)       &&\n                      this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}