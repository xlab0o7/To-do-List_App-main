{"ast":null,"code":"/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   * @param existing an existing Map to use.\n   * @param counter the counter to use.\n   */\n  constructor(prefix) {\n    let existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n    let counter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const {\n      prefix,\n      _existing,\n      counter\n    } = this;\n    return new IdentifierIssuer(prefix, new Map(_existing), counter);\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    const existing = old && this._existing.get(old);\n    if (existing) {\n      return existing;\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter++;\n\n    // save mapping\n    if (old) {\n      this._existing.set(old, identifier);\n    }\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return this._existing.has(old);\n  }\n\n  /**\n   * Returns all of the IDs that have been issued new IDs in the order in\n   * which they were issued new IDs.\n   *\n   * @return the list of old IDs that has been issued new IDs in order.\n   */\n  getOldIds() {\n    return [...this._existing.keys()];\n  }\n};","map":{"version":3,"names":["module","exports","IdentifierIssuer","constructor","prefix","existing","Map","counter","_existing","clone","getId","old","get","identifier","set","hasId","has","getOldIds","keys"],"sources":["E:/react-todo-app/node_modules/rdf-canonize/lib/IdentifierIssuer.js"],"sourcesContent":["/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   * @param existing an existing Map to use.\n   * @param counter the counter to use.\n   */\n  constructor(prefix, existing = new Map(), counter = 0) {\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const {prefix, _existing, counter} = this;\n    return new IdentifierIssuer(prefix, new Map(_existing), counter);\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    const existing = old && this._existing.get(old);\n    if(existing) {\n      return existing;\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter++;\n\n    // save mapping\n    if(old) {\n      this._existing.set(old, identifier);\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return this._existing.has(old);\n  }\n\n  /**\n   * Returns all of the IDs that have been issued new IDs in the order in\n   * which they were issued new IDs.\n   *\n   * @return the list of old IDs that has been issued new IDs in order.\n   */\n  getOldIds() {\n    return [...this._existing.keys()];\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,MAAMC,gBAAgB,CAAC;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,MAAM,EAAqC;IAAA,IAAnCC,QAAQ,uEAAG,IAAIC,GAAG,EAAE;IAAA,IAAEC,OAAO,uEAAG,CAAC;IACnD,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,SAAS,GAAGH,QAAQ;IACzB,IAAI,CAACE,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACEE,KAAK,GAAG;IACN,MAAM;MAACL,MAAM;MAAEI,SAAS;MAAED;IAAO,CAAC,GAAG,IAAI;IACzC,OAAO,IAAIL,gBAAgB,CAACE,MAAM,EAAE,IAAIE,GAAG,CAACE,SAAS,CAAC,EAAED,OAAO,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,KAAK,CAACC,GAAG,EAAE;IACT;IACA,MAAMN,QAAQ,GAAGM,GAAG,IAAI,IAAI,CAACH,SAAS,CAACI,GAAG,CAACD,GAAG,CAAC;IAC/C,IAAGN,QAAQ,EAAE;MACX,OAAOA,QAAQ;IACjB;;IAEA;IACA,MAAMQ,UAAU,GAAG,IAAI,CAACT,MAAM,GAAG,IAAI,CAACG,OAAO;IAC7C,IAAI,CAACA,OAAO,EAAE;;IAEd;IACA,IAAGI,GAAG,EAAE;MACN,IAAI,CAACH,SAAS,CAACM,GAAG,CAACH,GAAG,EAAEE,UAAU,CAAC;IACrC;IAEA,OAAOA,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,KAAK,CAACJ,GAAG,EAAE;IACT,OAAO,IAAI,CAACH,SAAS,CAACQ,GAAG,CAACL,GAAG,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEM,SAAS,GAAG;IACV,OAAO,CAAC,GAAG,IAAI,CAACT,SAAS,CAACU,IAAI,EAAE,CAAC;EACnC;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}