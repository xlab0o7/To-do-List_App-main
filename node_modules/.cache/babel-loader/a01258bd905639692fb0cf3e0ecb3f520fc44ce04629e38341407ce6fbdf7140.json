{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nclass ClientRegistrar {\n  constructor(storageUtility) {\n    this.storageUtility = storageUtility;\n  }\n  async getClient(options, issuerConfig) {\n    const [storedClientId, storedClientSecret] = await Promise.all([this.storageUtility.getForUser(options.sessionId, \"clientId\", {\n      secure: false\n    }), this.storageUtility.getForUser(options.sessionId, \"clientSecret\", {\n      secure: false\n    })]);\n    if (storedClientId) {\n      return {\n        clientId: storedClientId,\n        clientSecret: storedClientSecret,\n        clientType: \"dynamic\"\n      };\n    }\n    try {\n      const registeredClient = await (0, oidc_client_ext_1.registerClient)(options, issuerConfig);\n      const infoToSave = {\n        clientId: registeredClient.clientId\n      };\n      if (registeredClient.clientSecret) {\n        infoToSave.clientSecret = registeredClient.clientSecret;\n      }\n      if (registeredClient.idTokenSignedResponseAlg) {\n        infoToSave.idTokenSignedResponseAlg = registeredClient.idTokenSignedResponseAlg;\n      }\n      await this.storageUtility.setForUser(options.sessionId, infoToSave, {\n        secure: false\n      });\n      return registeredClient;\n    } catch (error) {\n      throw new Error(`Client registration failed: [${error}]`);\n    }\n  }\n}\nexports.default = ClientRegistrar;","map":{"version":3,"mappings":";;;;;AAiCA;AAKA,MAAqBA,eAAe;EAClCC,YAAoBC,cAA+B;IAA/B,mBAAc,GAAdA,cAAc;EAAoB;EAEtD,MAAMC,SAAS,CACbC,OAAgC,EAChCC,YAA2B;IAG3B,MAAM,CACJC,cAAc,EACdC,kBAAkB,CAEnB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpB,IAAI,CAACP,cAAc,CAACQ,UAAU,CAACN,OAAO,CAACO,SAAS,EAAE,UAAU,EAAE;MAC5DC,MAAM,EAAE;KACT,CAAC,EACF,IAAI,CAACV,cAAc,CAACQ,UAAU,CAACN,OAAO,CAACO,SAAS,EAAE,cAAc,EAAE;MAChEC,MAAM,EAAE;KACT,CAAC,CAKH,CAAC;IACF,IAAIN,cAAc,EAAE;MAClB,OAAO;QACLO,QAAQ,EAAEP,cAAc;QACxBQ,YAAY,EAAEP,kBAAkB;QAChCQ,UAAU,EAAE;OACb;;IAGH,IAAI;MACF,MAAMC,gBAAgB,GAAG,MAAM,oCAAc,EAACZ,OAAO,EAAEC,YAAY,CAAC;MAEpE,MAAMY,UAAU,GAA2B;QACzCJ,QAAQ,EAAEG,gBAAgB,CAACH;OAC5B;MACD,IAAIG,gBAAgB,CAACF,YAAY,EAAE;QACjCG,UAAU,CAACH,YAAY,GAAGE,gBAAgB,CAACF,YAAY;;MAEzD,IAAIE,gBAAgB,CAACE,wBAAwB,EAAE;QAC7CD,UAAU,CAACC,wBAAwB,GACjCF,gBAAgB,CAACE,wBAAwB;;MAE7C,MAAM,IAAI,CAAChB,cAAc,CAACiB,UAAU,CAACf,OAAO,CAACO,SAAS,EAAEM,UAAU,EAAE;QAIlEL,MAAM,EAAE;OACT,CAAC;MACF,OAAOI,gBAAgB;KACxB,CAAC,OAAOI,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gCAAgCD,KAAK,GAAG,CAAC;;EAE7D;;AAvDFE","names":["ClientRegistrar","constructor","storageUtility","getClient","options","issuerConfig","storedClientId","storedClientSecret","Promise","all","getForUser","sessionId","secure","clientId","clientSecret","clientType","registeredClient","infoToSave","idTokenSignedResponseAlg","setForUser","error","Error","exports"],"sources":["E:\\react-todo-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\ClientRegistrar.ts"],"sourcesContent":["//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  IStorageUtility,\n  IClientRegistrar,\n  IIssuerConfig,\n  IClient,\n  IClientRegistrarOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport { registerClient } from \"@inrupt/oidc-client-ext\";\n\n/**\n * @hidden\n */\nexport default class ClientRegistrar implements IClientRegistrar {\n  constructor(private storageUtility: IStorageUtility) {}\n\n  async getClient(\n    options: IClientRegistrarOptions,\n    issuerConfig: IIssuerConfig\n  ): Promise<IClient> {\n    // If client secret and/or client id are stored in storage, use those.\n    const [\n      storedClientId,\n      storedClientSecret,\n      // storedClientName,\n    ] = await Promise.all([\n      this.storageUtility.getForUser(options.sessionId, \"clientId\", {\n        secure: false,\n      }),\n      this.storageUtility.getForUser(options.sessionId, \"clientSecret\", {\n        secure: false,\n      }),\n      // this.storageUtility.getForUser(options.sessionId, \"clientName\", {\n      //   // FIXME: figure out how to persist secure storage at reload\n      //   secure: false,\n      // }),\n    ]);\n    if (storedClientId) {\n      return {\n        clientId: storedClientId,\n        clientSecret: storedClientSecret,\n        clientType: \"dynamic\",\n      };\n    }\n\n    try {\n      const registeredClient = await registerClient(options, issuerConfig);\n      // Save info\n      const infoToSave: Record<string, string> = {\n        clientId: registeredClient.clientId,\n      };\n      if (registeredClient.clientSecret) {\n        infoToSave.clientSecret = registeredClient.clientSecret;\n      }\n      if (registeredClient.idTokenSignedResponseAlg) {\n        infoToSave.idTokenSignedResponseAlg =\n          registeredClient.idTokenSignedResponseAlg;\n      }\n      await this.storageUtility.setForUser(options.sessionId, infoToSave, {\n        // FIXME: figure out how to persist secure storage at reload\n        // Otherwise, the client info cannot be retrieved from storage, and\n        // the lib tries to re-register the client on each fetch\n        secure: false,\n      });\n      return registeredClient;\n    } catch (error) {\n      throw new Error(`Client registration failed: [${error}]`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}