{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  parseLinkHeader,\n  buildHeaders\n} = require('../util');\nconst {\n  LINK_HEADER_CONTEXT\n} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\nconst {\n  prependBase\n} = require('../url');\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = function () {\n  let {\n    secure,\n    headers = {},\n    xhr\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    headers: {}\n  };\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n  async function loader(url) {\n    if (url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; only \"http\" and \"https\" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n    if (secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\\'s scheme is not \"https\".', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch (e) {\n      throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        cause: e\n      });\n    }\n    if (req.status >= 400) {\n      throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        httpStatusCode: req.status\n      });\n    }\n    let doc = {\n      contextUrl: null,\n      documentUrl: url,\n      document: req.response\n    };\n    let alternate = null;\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if (linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeaders = parseLinkHeader(linkHeader);\n      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];\n      if (Array.isArray(linkedContext)) {\n        throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {\n          code: 'multiple context link headers',\n          url\n        });\n      }\n      if (linkedContext) {\n        doc.contextUrl = linkedContext.target;\n      }\n\n      // \"alternate\" link header is a redirect\n      alternate = linkHeaders['alternate'];\n      if (alternate && alternate.type == 'application/ld+json' && !(contentType || '').match(/^application\\/(\\w*\\+)?json$/)) {\n        doc = await loader(prependBase(url, alternate.target));\n      }\n    }\n    return doc;\n  }\n};\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for (const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}","map":{"version":3,"names":["parseLinkHeader","buildHeaders","require","LINK_HEADER_CONTEXT","JsonLdError","RequestQueue","prependBase","REGEX_LINK_HEADER","module","exports","secure","headers","xhr","queue","wrapLoader","loader","url","indexOf","code","req","_get","e","cause","status","statusText","httpStatusCode","doc","contextUrl","documentUrl","document","response","alternate","contentType","getResponseHeader","linkHeader","test","getAllResponseHeaders","linkHeaders","linkedContext","Array","isArray","target","type","match","XMLHttpRequest","Promise","resolve","reject","onload","onerror","err","open","k","setRequestHeader","send"],"sources":["E:/react-todo-app/node_modules/jsonld/lib/documentLoaders/xhr.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {parseLinkHeader, buildHeaders} = require('../util');\nconst {LINK_HEADER_CONTEXT} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\nconst {prependBase} = require('../url');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {headers: {}}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    if(req.status >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + req.statusText,\n        'jsonld.LoadDocumentError', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: req.status\n        });\n    }\n\n    let doc = {contextUrl: null, documentUrl: url, document: req.response};\n    let alternate = null;\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if(linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeaders = parseLinkHeader(linkHeader);\n      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];\n      if(Array.isArray(linkedContext)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one ' +\n          'associated HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkedContext) {\n        doc.contextUrl = linkedContext.target;\n      }\n\n      // \"alternate\" link header is a redirect\n      alternate = linkHeaders['alternate'];\n      if(alternate &&\n        alternate.type == 'application/ld+json' &&\n        !(contentType || '').match(/^application\\/(\\w*\\+)?json$/)) {\n        doc = await loader(prependBase(url, alternate.target));\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for(const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAM;EAACA,eAAe;EAAEC;AAAY,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC1D,MAAM;EAACC;AAAmB,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AACrD,MAAME,WAAW,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAMG,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC/C,MAAM;EAACI;AAAW,CAAC,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAEvC,MAAMK,iBAAiB,GAAG,kBAAkB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,YAIK;EAAA,IAJJ;IAChBC,MAAM;IACNC,OAAO,GAAG,CAAC,CAAC;IACZC;EACF,CAAC,uEAAG;IAACD,OAAO,EAAE,CAAC;EAAC,CAAC;EACfA,OAAO,GAAGV,YAAY,CAACU,OAAO,CAAC;EAC/B,MAAME,KAAK,GAAG,IAAIR,YAAY,EAAE;EAChC,OAAOQ,KAAK,CAACC,UAAU,CAACC,MAAM,CAAC;EAE/B,eAAeA,MAAM,CAACC,GAAG,EAAE;IACzB,IAAGA,GAAG,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAID,GAAG,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC5D,MAAM,IAAIb,WAAW,CACnB,kEAAkE,GAClE,YAAY,EACZ,mBAAmB,EAAE;QAACc,IAAI,EAAE,yBAAyB;QAAEF;MAAG,CAAC,CAAC;IAChE;IACA,IAAGN,MAAM,IAAIM,GAAG,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;MACvC,MAAM,IAAIb,WAAW,CACnB,4DAA4D,GAC5D,mCAAmC,EACnC,mBAAmB,EAAE;QAACc,IAAI,EAAE,yBAAyB;QAAEF;MAAG,CAAC,CAAC;IAChE;IAEA,IAAIG,GAAG;IACP,IAAI;MACFA,GAAG,GAAG,MAAMC,IAAI,CAACR,GAAG,EAAEI,GAAG,EAAEL,OAAO,CAAC;IACrC,CAAC,CAAC,OAAMU,CAAC,EAAE;MACT,MAAM,IAAIjB,WAAW,CACnB,mDAAmD,EACnD,0BAA0B,EAC1B;QAACc,IAAI,EAAE,yBAAyB;QAAEF,GAAG;QAAEM,KAAK,EAAED;MAAC,CAAC,CAAC;IACrD;IAEA,IAAGF,GAAG,CAACI,MAAM,IAAI,GAAG,EAAE;MACpB,MAAM,IAAInB,WAAW,CACnB,iCAAiC,GAAGe,GAAG,CAACK,UAAU,EAClD,0BAA0B,EAAE;QAC1BN,IAAI,EAAE,yBAAyB;QAC/BF,GAAG;QACHS,cAAc,EAAEN,GAAG,CAACI;MACtB,CAAC,CAAC;IACN;IAEA,IAAIG,GAAG,GAAG;MAACC,UAAU,EAAE,IAAI;MAAEC,WAAW,EAAEZ,GAAG;MAAEa,QAAQ,EAAEV,GAAG,CAACW;IAAQ,CAAC;IACtE,IAAIC,SAAS,GAAG,IAAI;;IAEpB;IACA,MAAMC,WAAW,GAAGb,GAAG,CAACc,iBAAiB,CAAC,cAAc,CAAC;IACzD,IAAIC,UAAU;IACd,IAAG3B,iBAAiB,CAAC4B,IAAI,CAAChB,GAAG,CAACiB,qBAAqB,EAAE,CAAC,EAAE;MACtDF,UAAU,GAAGf,GAAG,CAACc,iBAAiB,CAAC,MAAM,CAAC;IAC5C;IACA,IAAGC,UAAU,IAAIF,WAAW,KAAK,qBAAqB,EAAE;MACtD;MACA,MAAMK,WAAW,GAAGrC,eAAe,CAACkC,UAAU,CAAC;MAC/C,MAAMI,aAAa,GAAGD,WAAW,CAAClC,mBAAmB,CAAC;MACtD,IAAGoC,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;QAC/B,MAAM,IAAIlC,WAAW,CACnB,sDAAsD,GACtD,8BAA8B,EAC9B,mBAAmB,EACnB;UAACc,IAAI,EAAE,+BAA+B;UAAEF;QAAG,CAAC,CAAC;MACjD;MACA,IAAGsB,aAAa,EAAE;QAChBZ,GAAG,CAACC,UAAU,GAAGW,aAAa,CAACG,MAAM;MACvC;;MAEA;MACAV,SAAS,GAAGM,WAAW,CAAC,WAAW,CAAC;MACpC,IAAGN,SAAS,IACVA,SAAS,CAACW,IAAI,IAAI,qBAAqB,IACvC,CAAC,CAACV,WAAW,IAAI,EAAE,EAAEW,KAAK,CAAC,6BAA6B,CAAC,EAAE;QAC3DjB,GAAG,GAAG,MAAMX,MAAM,CAACT,WAAW,CAACU,GAAG,EAAEe,SAAS,CAACU,MAAM,CAAC,CAAC;MACxD;IACF;IAEA,OAAOf,GAAG;EACZ;AACF,CAAC;AAED,SAASN,IAAI,CAACR,GAAG,EAAEI,GAAG,EAAEL,OAAO,EAAE;EAC/BC,GAAG,GAAGA,GAAG,IAAIgC,cAAc;EAC3B,MAAMzB,GAAG,GAAG,IAAIP,GAAG,EAAE;EACrB,OAAO,IAAIiC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC5B,GAAG,CAAC6B,MAAM,GAAG,MAAMF,OAAO,CAAC3B,GAAG,CAAC;IAC/BA,GAAG,CAAC8B,OAAO,GAAGC,GAAG,IAAIH,MAAM,CAACG,GAAG,CAAC;IAChC/B,GAAG,CAACgC,IAAI,CAAC,KAAK,EAAEnC,GAAG,EAAE,IAAI,CAAC;IAC1B,KAAI,MAAMoC,CAAC,IAAIzC,OAAO,EAAE;MACtBQ,GAAG,CAACkC,gBAAgB,CAACD,CAAC,EAAEzC,OAAO,CAACyC,CAAC,CAAC,CAAC;IACrC;IACAjC,GAAG,CAACmC,IAAI,EAAE;EACZ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}