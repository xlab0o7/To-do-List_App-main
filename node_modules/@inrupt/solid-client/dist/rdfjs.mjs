import rdfJsDatasetModule from '@rdfjs/dataset';
import { getChainBlankNodes, addRdfJsQuadToDataset, toRdfJsQuads } from './rdfjs.internal.mjs';

//
const rdfJsDataset = rdfJsDatasetModule.dataset;
/**
 * Convert an RDF/JS Dataset into a [[SolidDataset]]
 *
 * Parse an RDF/JS
 * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore},
 * into a [[SolidDataset]]. Note that, when saving the returned SolidDataset to
 * a Solid Pod, only Quads in the Default Graph will be stored.
 *
 * @param rdfJsDataset The source RDF/JS Dataset.
 * @returns A [[SolidDataset]] containing the same data as the given RDF/JS Dataset.
 * @since 1.9.0
 */
function fromRdfJsDataset(rdfJsDataset) {
    const dataset = {
        graphs: { default: {} },
        type: "Dataset",
    };
    const quads = Array.from(rdfJsDataset);
    const chainBlankNodes = getChainBlankNodes(quads);
    // Quads with chain Blank Nodes as their Subject will be parsed when those
    // Blank Nodes are referred to in an Object. See `addRdfJsQuadToObjects`.
    const quadsWithoutChainBlankNodeSubjects = quads.filter((quad) => chainBlankNodes.every((chainBlankNode) => !chainBlankNode.equals(quad.subject)));
    return quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {
        otherQuads: quads,
        chainBlankNodes,
    }), dataset);
}
/**
 * Convert a [[SolidDataset]] into an RDF/JS Dataset
 *
 * Export a [[SolidDataset]] into an RDF/JS
 * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore}.
 *
 * @param set A [[SolidDataset]] to export into an RDF/JS Dataset.
 * @param options Optional parameter that allows you to pass in your own RDF/JS DataFactory or DatasetCoreFactory.
 * @returns An RDF/JS Dataset containing the data from the given SolidDataset.
 * @since 1.9.0
 */
function toRdfJsDataset(set, options = {}) {
    var _a, _b;
    const datasetFactory = (_b = (_a = options.datasetFactory) === null || _a === void 0 ? void 0 : _a.dataset) !== null && _b !== void 0 ? _b : rdfJsDataset;
    return datasetFactory(toRdfJsQuads(set, options));
}

export { fromRdfJsDataset, toRdfJsDataset };
