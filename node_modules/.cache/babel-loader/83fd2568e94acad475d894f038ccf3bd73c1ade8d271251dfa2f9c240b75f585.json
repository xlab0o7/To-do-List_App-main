{"ast":null,"code":"// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({\n      encoding: 'utf8',\n      writableObjectMode: true\n    });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => {\n        this.push(quad);\n        callback && callback();\n      },\n      end: callback => {\n        this.push(null);\n        callback && callback();\n      }\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => {\n      writer.addQuad(quad, done);\n    };\n    this._flush = done => {\n      writer.end(done);\n    };\n  }\n\n  // ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data', quad => {\n      this.write(quad);\n    });\n    stream.on('end', () => {\n      this.end();\n    });\n    stream.on('error', error => {\n      this.emit('error', error);\n    });\n    stream.on('prefix', (prefix, iri) => {\n      this._writer.addPrefix(prefix, iri);\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["Transform","N3Writer","N3StreamWriter","constructor","options","encoding","writableObjectMode","writer","_writer","write","quad","callback","push","end","_transform","done","addQuad","_flush","import","stream","on","error","emit","prefix","iri","addPrefix"],"sources":["E:/react-todo-app/node_modules/n3/src/N3StreamWriter.js"],"sourcesContent":["// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,QAAQ,MAAM,YAAY;;AAEjC;AACA,eAAe,MAAMC,cAAc,SAASF,SAAS,CAAC;EACpDG,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC;MAAEC,QAAQ,EAAE,MAAM;MAAEC,kBAAkB,EAAE;IAAK,CAAC,CAAC;;IAErD;IACA,MAAMC,MAAM,GAAG,IAAI,CAACC,OAAO,GAAG,IAAIP,QAAQ,CAAC;MACzCQ,KAAK,EAAE,CAACC,IAAI,EAAEL,QAAQ,EAAEM,QAAQ,KAAK;QAAE,IAAI,CAACC,IAAI,CAACF,IAAI,CAAC;QAAEC,QAAQ,IAAIA,QAAQ,EAAE;MAAE,CAAC;MACjFE,GAAG,EAAEF,QAAQ,IAAI;QAAE,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;QAAED,QAAQ,IAAIA,QAAQ,EAAE;MAAE;IAC9D,CAAC,EAAEP,OAAO,CAAC;;IAEX;IACA,IAAI,CAACU,UAAU,GAAG,CAACJ,IAAI,EAAEL,QAAQ,EAAEU,IAAI,KAAK;MAAER,MAAM,CAACS,OAAO,CAACN,IAAI,EAAEK,IAAI,CAAC;IAAE,CAAC;IAC3E,IAAI,CAACE,MAAM,GAAGF,IAAI,IAAI;MAAER,MAAM,CAACM,GAAG,CAACE,IAAI,CAAC;IAAE,CAAC;EAC7C;;EAEF;EACEG,MAAM,CAACC,MAAM,EAAE;IACbA,MAAM,CAACC,EAAE,CAAC,MAAM,EAAIV,IAAI,IAAI;MAAE,IAAI,CAACD,KAAK,CAACC,IAAI,CAAC;IAAE,CAAC,CAAC;IAClDS,MAAM,CAACC,EAAE,CAAC,KAAK,EAAK,MAAM;MAAE,IAAI,CAACP,GAAG,EAAE;IAAE,CAAC,CAAC;IAC1CM,MAAM,CAACC,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAI;MAAE,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,KAAK,CAAC;IAAE,CAAC,CAAC;IAC5DF,MAAM,CAACC,EAAE,CAAC,QAAQ,EAAE,CAACG,MAAM,EAAEC,GAAG,KAAK;MAAE,IAAI,CAAChB,OAAO,CAACiB,SAAS,CAACF,MAAM,EAAEC,GAAG,CAAC;IAAE,CAAC,CAAC;IAC9E,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}