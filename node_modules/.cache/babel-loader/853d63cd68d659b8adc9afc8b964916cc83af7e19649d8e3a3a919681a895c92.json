{"ast":null,"code":"// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({\n    '': iri.value || iri\n  }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  var prefixes = Object.create(null);\n  for (var _prefix in defaultPrefixes) processPrefix(_prefix, defaultPrefixes[_prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      var cache = Object.create(null);\n      prefixes[prefix] = function (local) {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    } else if (!(prefix in prefixes)) {\n      throw new Error(\"Unknown prefix: \".concat(prefix));\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}","map":{"version":3,"names":["N3DataFactory","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","prefix","iri","factory","prefixes","value","defaultPrefixes","Object","create","processPrefix","cache","local","namedNode","Error"],"sources":["E:/react-todo-app/node_modules/n3/src/N3Util.js"],"sourcesContent":["// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri.value || iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n"],"mappings":"AAAA;;AAEA,OAAOA,aAAa,MAAM,iBAAiB;;AAE3C;AACA,OAAO,SAASC,WAAW,CAACC,IAAI,EAAE;EAChC,OAAO,CAAC,CAACA,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAK,WAAW;AAChD;;AAEA;AACA,OAAO,SAASC,WAAW,CAACF,IAAI,EAAE;EAChC,OAAO,CAAC,CAACA,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAK,WAAW;AAChD;;AAEA;AACA,OAAO,SAASE,SAAS,CAACH,IAAI,EAAE;EAC9B,OAAO,CAAC,CAACA,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAK,SAAS;AAC9C;;AAEA;AACA,OAAO,SAASG,UAAU,CAACJ,IAAI,EAAE;EAC/B,OAAO,CAAC,CAACA,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAK,UAAU;AAC/C;;AAEA;AACA,OAAO,SAASI,cAAc,CAACL,IAAI,EAAE;EACnC,OAAO,CAAC,CAACA,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAK,cAAc;AACnD;;AAEA;AACA,OAAO,SAASK,cAAc,CAACC,IAAI,EAAE;EACnC,OAAOF,cAAc,CAACE,IAAI,CAACC,KAAK,CAAC;AACnC;;AAEA;AACA,OAAO,SAASC,MAAM,CAACC,GAAG,EAAEC,OAAO,EAAE;EACnC,OAAOC,QAAQ,CAAC;IAAE,EAAE,EAAEF,GAAG,CAACG,KAAK,IAAIH;EAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,EAAE,CAAC;AACxD;;AAEA;AACA,OAAO,SAASC,QAAQ,CAACE,eAAe,EAAEH,OAAO,EAAE;EACjD;EACA,IAAMC,QAAQ,GAAGG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACpC,KAAK,IAAMP,OAAM,IAAIK,eAAe,EAClCG,aAAa,CAACR,OAAM,EAAEK,eAAe,CAACL,OAAM,CAAC,CAAC;EAChD;EACAE,OAAO,GAAGA,OAAO,IAAIb,aAAa;;EAElC;EACA;EACA,SAASmB,aAAa,CAACR,MAAM,EAAEC,GAAG,EAAE;IAClC;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAC3B;MACA,IAAMQ,KAAK,GAAGH,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACjCJ,QAAQ,CAACH,MAAM,CAAC,GAAG,UAAAU,KAAK,EAAI;QAC1B,OAAOD,KAAK,CAACC,KAAK,CAAC,KAAKD,KAAK,CAACC,KAAK,CAAC,GAAGR,OAAO,CAACS,SAAS,CAACV,GAAG,GAAGS,KAAK,CAAC,CAAC;MACxE,CAAC;IACH,CAAC,MACI,IAAI,EAAEV,MAAM,IAAIG,QAAQ,CAAC,EAAE;MAC9B,MAAM,IAAIS,KAAK,2BAAoBZ,MAAM,EAAG;IAC9C;IACA,OAAOG,QAAQ,CAACH,MAAM,CAAC;EACzB;EACA,OAAOQ,aAAa;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}