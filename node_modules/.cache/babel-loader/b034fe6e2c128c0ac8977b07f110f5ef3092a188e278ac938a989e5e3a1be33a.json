{"ast":null,"code":"/*!\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _createForOfIteratorHelper = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar MessageDigest = require('./MessageDigest');\nvar URDNA2015Sync = require('./URDNA2015Sync');\nmodule.exports = /*#__PURE__*/function (_URDNA2015Sync) {\n  _inherits(URDNA2012Sync, _URDNA2015Sync);\n  var _super = _createSuper(URDNA2012Sync);\n  function URDNA2012Sync() {\n    var _this;\n    _classCallCheck(this, URDNA2012Sync);\n    _this = _super.call(this);\n    _this.name = 'URGNA2012';\n    _this.createMessageDigest = function () {\n      return new MessageDigest('sha1');\n    };\n    return _this;\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  _createClass(URDNA2012Sync, [{\n    key: \"modifyFirstDegreeComponent\",\n    value: function modifyFirstDegreeComponent(id, component, key) {\n      if (component.termType !== 'BlankNode') {\n        return component;\n      }\n      if (key === 'graph') {\n        return {\n          termType: 'BlankNode',\n          value: '_:g'\n        };\n      }\n      return {\n        termType: 'BlankNode',\n        value: component.value === id ? '_:a' : '_:z'\n      };\n    }\n\n    // helper for getting a related predicate\n  }, {\n    key: \"getRelatedPredicate\",\n    value: function getRelatedPredicate(quad) {\n      return quad.predicate.value;\n    }\n\n    // helper for creating hash to related blank nodes map\n  }, {\n    key: \"createHashToRelated\",\n    value: function createHashToRelated(id, issuer) {\n      // 1) Create a hash to related blank nodes map for storing hashes that\n      // identify related blank nodes.\n      var hashToRelated = new Map();\n\n      // 2) Get a reference, quads, to the list of quads in the blank node to\n      // quads map for the key identifier.\n      var quads = this.blankNodeInfo.get(id).quads;\n\n      // 3) For each quad in quads:\n      var _iterator = _createForOfIteratorHelper(quads),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var quad = _step.value;\n          // 3.1) If the quad's subject is a blank node that does not match\n          // identifier, set hash to the result of the Hash Related Blank Node\n          // algorithm, passing the blank node identifier for subject as related,\n          // quad, path identifier issuer as issuer, and p as position.\n          var position = void 0;\n          var related = void 0;\n          if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n            related = quad.subject.value;\n            position = 'p';\n          } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n            // 3.2) Otherwise, if quad's object is a blank node that does not match\n            // identifier, to the result of the Hash Related Blank Node algorithm,\n            // passing the blank node identifier for object as related, quad, path\n            // identifier issuer as issuer, and r as position.\n            related = quad.object.value;\n            position = 'r';\n          } else {\n            // 3.3) Otherwise, continue to the next quad.\n            continue;\n          }\n          // 3.4) Add a mapping of hash to the blank node identifier for the\n          // component that matched (subject or object) to hash to related blank\n          // nodes map, adding an entry as necessary.\n          var hash = this.hashRelatedBlankNode(related, quad, issuer, position);\n          var entries = hashToRelated.get(hash);\n          if (entries) {\n            entries.push(related);\n          } else {\n            hashToRelated.set(hash, [related]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return hashToRelated;\n    }\n  }]);\n  return URDNA2012Sync;\n}(URDNA2015Sync);","map":{"version":3,"names":["MessageDigest","require","URDNA2015Sync","module","exports","name","createMessageDigest","id","component","key","termType","value","quad","predicate","issuer","hashToRelated","Map","quads","blankNodeInfo","get","position","related","subject","object","hash","hashRelatedBlankNode","entries","push","set"],"sources":["E:/react-todo-app/node_modules/rdf-canonize/lib/URGNA2012Sync.js"],"sourcesContent":["/*!\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst MessageDigest = require('./MessageDigest');\nconst URDNA2015Sync = require('./URDNA2015Sync');\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.createMessageDigest = () => new MessageDigest('sha1');\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    if(key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n    return {\n      termType: 'BlankNode',\n      value: (component.value === id ? '_:a' : '_:z')\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    for(const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = this.hashRelatedBlankNode(related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n      if(entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAEb,IAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,IAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAEhDE,MAAM,CAACC,OAAO;EAAA;EAAA;EACZ,yBAAc;IAAA;IAAA;IACZ;IACA,MAAKC,IAAI,GAAG,WAAW;IACvB,MAAKC,mBAAmB,GAAG;MAAA,OAAM,IAAIN,aAAa,CAAC,MAAM,CAAC;IAAA;IAAC;EAC7D;;EAEA;EAAA;IAAA;IAAA,OACA,oCAA2BO,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAE;MAC7C,IAAGD,SAAS,CAACE,QAAQ,KAAK,WAAW,EAAE;QACrC,OAAOF,SAAS;MAClB;MACA,IAAGC,GAAG,KAAK,OAAO,EAAE;QAClB,OAAO;UACLC,QAAQ,EAAE,WAAW;UACrBC,KAAK,EAAE;QACT,CAAC;MACH;MACA,OAAO;QACLD,QAAQ,EAAE,WAAW;QACrBC,KAAK,EAAGH,SAAS,CAACG,KAAK,KAAKJ,EAAE,GAAG,KAAK,GAAG;MAC3C,CAAC;IACH;;IAEA;EAAA;IAAA;IAAA,OACA,6BAAoBK,IAAI,EAAE;MACxB,OAAOA,IAAI,CAACC,SAAS,CAACF,KAAK;IAC7B;;IAEA;EAAA;IAAA;IAAA,OACA,6BAAoBJ,EAAE,EAAEO,MAAM,EAAE;MAC9B;MACA;MACA,IAAMC,aAAa,GAAG,IAAIC,GAAG,EAAE;;MAE/B;MACA;MACA,IAAMC,KAAK,GAAG,IAAI,CAACC,aAAa,CAACC,GAAG,CAACZ,EAAE,CAAC,CAACU,KAAK;;MAE9C;MAAA,2CACkBA,KAAK;QAAA;MAAA;QAAvB,oDAAyB;UAAA,IAAfL,IAAI;UACZ;UACA;UACA;UACA;UACA,IAAIQ,QAAQ;UACZ,IAAIC,OAAO;UACX,IAAGT,IAAI,CAACU,OAAO,CAACZ,QAAQ,KAAK,WAAW,IAAIE,IAAI,CAACU,OAAO,CAACX,KAAK,KAAKJ,EAAE,EAAE;YACrEc,OAAO,GAAGT,IAAI,CAACU,OAAO,CAACX,KAAK;YAC5BS,QAAQ,GAAG,GAAG;UAChB,CAAC,MAAM,IACLR,IAAI,CAACW,MAAM,CAACb,QAAQ,KAAK,WAAW,IAAIE,IAAI,CAACW,MAAM,CAACZ,KAAK,KAAKJ,EAAE,EAAE;YAClE;YACA;YACA;YACA;YACAc,OAAO,GAAGT,IAAI,CAACW,MAAM,CAACZ,KAAK;YAC3BS,QAAQ,GAAG,GAAG;UAChB,CAAC,MAAM;YACL;YACA;UACF;UACA;UACA;UACA;UACA,IAAMI,IAAI,GAAG,IAAI,CAACC,oBAAoB,CAACJ,OAAO,EAAET,IAAI,EAAEE,MAAM,EAAEM,QAAQ,CAAC;UACvE,IAAMM,OAAO,GAAGX,aAAa,CAACI,GAAG,CAACK,IAAI,CAAC;UACvC,IAAGE,OAAO,EAAE;YACVA,OAAO,CAACC,IAAI,CAACN,OAAO,CAAC;UACvB,CAAC,MAAM;YACLN,aAAa,CAACa,GAAG,CAACJ,IAAI,EAAE,CAACH,OAAO,CAAC,CAAC;UACpC;QACF;MAAC;QAAA;MAAA;QAAA;MAAA;MAED,OAAON,aAAa;IACtB;EAAC;EAAA;AAAA,EA3E0Cb,aAAa,CA4EzD"},"metadata":{},"sourceType":"script","externalDependencies":[]}