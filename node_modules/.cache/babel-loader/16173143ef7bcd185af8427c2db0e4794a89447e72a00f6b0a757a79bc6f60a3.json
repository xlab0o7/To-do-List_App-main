{"ast":null,"code":"'use strict';\n\nvar LinkHeader = require('http-link-header');\nvar RdfJsDataFactory = require('@rdfjs/data-model');\nvar rdfJsDatasetModule = require('@rdfjs/dataset');\nvar jsonld = require('jsonld');\nvar n3 = require('n3');\nvar crossFetch = require('cross-fetch');\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nvar jsonld__namespace = /*#__PURE__*/_interopNamespaceDefault(jsonld);\nvar crossFetch__namespace = /*#__PURE__*/_interopNamespaceDefault(crossFetch);\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was sent to.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was sent to, false if not.\r\n * @since 0.2.0\r\n */\nfunction hasResourceInfo(resource) {\n  const potentialResourceInfo = resource;\n  return typeof potentialResourceInfo === \"object\" && typeof potentialResourceInfo.internal_resourceInfo === \"object\";\n}\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was retrieved from.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.\r\n * @since 0.6.0\r\n */\nfunction hasServerResourceInfo(resource) {\n  const potentialResourceInfo = resource;\n  return typeof potentialResourceInfo === \"object\" && typeof potentialResourceInfo.internal_resourceInfo === \"object\" && typeof potentialResourceInfo.internal_resourceInfo.linkedResources === \"object\";\n}\n/** @internal */\nfunction hasChangelog(dataset) {\n  const potentialChangeLog = dataset;\n  return typeof potentialChangeLog.internal_changeLog === \"object\" && Array.isArray(potentialChangeLog.internal_changeLog.additions) && Array.isArray(potentialChangeLog.internal_changeLog.deletions);\n}\n/**\r\n * Errors thrown by solid-client extend this class, and can thereby be distinguished from errors\r\n * thrown in lower-level libraries.\r\n * @since 1.2.0\r\n */\nclass SolidClientError extends Error {}\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n/** @internal */\nfunction internal_toIriString(iri) {\n  return typeof iri === \"string\" ? iri : iri.value;\n}\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n/* eslint-disable prefer-const, global-require, no-shadow, @typescript-eslint/no-var-requires */\n/**\r\n * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.\r\n */\nconst fetch = async (resource, init) => {\n  /* istanbul ignore if: `require` is always defined in the unit test environment */\n  if (typeof window === \"object\" && typeof require !== \"function\") {\n    return window.fetch(resource, init);\n  }\n  /* istanbul ignore if: `require` is always defined in the unit test environment */\n  if (typeof require !== \"function\") {\n    // When using Node.js with ES Modules, require is not defined:\n    const crossFetchModule = await import('cross-fetch');\n    const fetch = crossFetchModule.default;\n    return fetch(resource, init);\n  }\n  // Implementation note: it's up to the client application to resolve these module names to the\n  // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if\n  // the module names are literal strings.\n  // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js\n  // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a\n  // warning. Since the use of package names instead of file names requires a bundles anyway, this\n  // should not have any practical consequences. For more background, see:\n  // https://github.com/webpack/webpack/issues/7713\n  // Unfortunately solid-client-authn-browser does not support a default session yet.\n  // Once it does, we can auto-detect if it is available and use it as follows:\n  // try {\n  //   fetch = require(\"solid-client-authn-browser\").fetch;\n  // } catch (e) {\n  // When enabling the above, make sure to add a similar try {...} catch block using `import`\n  // statements in the elseif above.\n  const fetch = require(\"cross-fetch\");\n  // }\n  return fetch(resource, init);\n};\n\n//\n/**\r\n * @internal\r\n */\nfunction internal_parseResourceInfo(response) {\n  var _a, _b, _c, _d, _e;\n  const contentTypeParts = (_b = (_a = response.headers.get(\"Content-Type\")) === null || _a === void 0 ? void 0 : _a.split(\";\")) !== null && _b !== void 0 ? _b : [];\n  // If the server offers a Turtle or JSON-LD serialisation on its own accord,\n  // that tells us whether it is RDF data that the server can understand\n  // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),\n  // in which case our SolidDataset-related functions should handle it.\n  // For more context, see https://github.com/inrupt/solid-client-js/pull/214.\n  const isSolidDataset = contentTypeParts.length > 0 && [\"text/turtle\", \"application/ld+json\"].includes(contentTypeParts[0]);\n  const resourceInfo = {\n    sourceIri: response.url,\n    isRawData: !isSolidDataset,\n    contentLocation: (_c = response.headers.get(\"Content-Location\")) !== null && _c !== void 0 ? _c : undefined,\n    contentType: (_d = response.headers.get(\"Content-Type\")) !== null && _d !== void 0 ? _d : undefined,\n    linkedResources: {},\n    location: (_e = response.headers.get(\"Location\")) !== null && _e !== void 0 ? _e : undefined\n  };\n  const linkHeader = response.headers.get(\"Link\");\n  if (linkHeader) {\n    const parsedLinks = LinkHeader.parse(linkHeader);\n    // Set ACL link\n    const aclLinks = parsedLinks.get(\"rel\", \"acl\");\n    if (aclLinks.length === 1) {\n      resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;\n    }\n    // Parse all link headers and expose them in a standard way\n    // (this can replace the parsing of the ACL link above):\n    resourceInfo.linkedResources = parsedLinks.refs.reduce((rels, ref) => {\n      var _a;\n      var _b;\n      (_a = rels[_b = ref.rel]) !== null && _a !== void 0 ? _a : rels[_b] = [];\n      rels[ref.rel].push(new URL(ref.uri, resourceInfo.sourceIri).href);\n      return rels;\n    }, resourceInfo.linkedResources);\n  }\n  const wacAllowHeader = response.headers.get(\"WAC-Allow\");\n  if (wacAllowHeader) {\n    resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);\n  }\n  return resourceInfo;\n}\n/**\r\n * Parse a WAC-Allow header into user and public access booleans.\r\n *\r\n * @param wacAllowHeader A WAC-Allow header in the format `user=\"read append write control\",public=\"read\"`\r\n * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers\r\n */\nfunction parseWacAllowHeader(wacAllowHeader) {\n  function parsePermissionStatement(permissionStatement) {\n    const permissions = permissionStatement.split(\" \");\n    const writePermission = permissions.includes(\"write\");\n    return writePermission ? {\n      read: permissions.includes(\"read\"),\n      append: true,\n      write: true,\n      control: permissions.includes(\"control\")\n    } : {\n      read: permissions.includes(\"read\"),\n      append: permissions.includes(\"append\"),\n      write: false,\n      control: permissions.includes(\"control\")\n    };\n  }\n  function getStatementFor(header, scope) {\n    const relevantEntries = header.split(\",\").map(rawEntry => rawEntry.split(\"=\")).filter(parts => parts.length === 2 && parts[0].trim() === scope);\n    // There should only be one statement with the given scope:\n    if (relevantEntries.length !== 1) {\n      return \"\";\n    }\n    const relevantStatement = relevantEntries[0][1].trim();\n    // The given statement should be wrapped in double quotes to be valid:\n    if (relevantStatement.charAt(0) !== '\"' || relevantStatement.charAt(relevantStatement.length - 1) !== '\"') {\n      return \"\";\n    }\n    // Return the statment without the wrapping quotes, e.g.: read append write control\n    return relevantStatement.substring(1, relevantStatement.length - 1);\n  }\n  return {\n    user: parsePermissionStatement(getStatementFor(wacAllowHeader, \"user\")),\n    public: parsePermissionStatement(getStatementFor(wacAllowHeader, \"public\"))\n  };\n}\n/** @hidden Used to instantiate a separate instance from input parameters */\nfunction internal_cloneResource(resource) {\n  let clonedResource;\n  if (typeof resource.slice === \"function\") {\n    // If given Resource is a File:\n    clonedResource = Object.assign(resource.slice(), Object.assign({}, resource));\n  } else {\n    // If it is just a plain object containing metadata:\n    clonedResource = Object.assign({}, resource);\n  }\n  return clonedResource;\n}\n/** @internal */\nfunction internal_isUnsuccessfulResponse(response) {\n  return !response.ok;\n}\nfunction internal_isAuthenticationFailureResponse(response) {\n  return response.status === 401 || response.status === 403;\n}\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// TODO: These should be replaced by auto-generated constants,\n//       if we can ensure that unused constants will be excluded from bundles.\n/** @hidden */\nconst acl = {\n  Authorization: \"http://www.w3.org/ns/auth/acl#Authorization\",\n  AuthenticatedAgent: \"http://www.w3.org/ns/auth/acl#AuthenticatedAgent\",\n  accessTo: \"http://www.w3.org/ns/auth/acl#accessTo\",\n  agent: \"http://www.w3.org/ns/auth/acl#agent\",\n  agentGroup: \"http://www.w3.org/ns/auth/acl#agentGroup\",\n  agentClass: \"http://www.w3.org/ns/auth/acl#agentClass\",\n  default: \"http://www.w3.org/ns/auth/acl#default\",\n  defaultForNew: \"http://www.w3.org/ns/auth/acl#defaultForNew\",\n  mode: \"http://www.w3.org/ns/auth/acl#mode\",\n  origin: \"http://www.w3.org/ns/auth/acl#origin\"\n};\n/** @hidden */\nconst rdf = {\n  type: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n};\n/** @hidden */\nconst ldp = {\n  BasicContainer: \"http://www.w3.org/ns/ldp#BasicContainer\",\n  Container: \"http://www.w3.org/ns/ldp#Container\",\n  Resource: \"http://www.w3.org/ns/ldp#Resource\",\n  contains: \"http://www.w3.org/ns/ldp#contains\"\n};\n/** @hidden */\nconst foaf = {\n  Agent: \"http://xmlns.com/foaf/0.1/Agent\",\n  primaryTopic: \"http://xmlns.com/foaf/0.1/primaryTopic\",\n  isPrimaryTopicOf: \"http://xmlns.com/foaf/0.1/isPrimaryTopicOf\"\n};\n/** @hidden */\nconst acp = {\n  AccessControlResource: \"http://www.w3.org/ns/solid/acp#AccessControlResource\",\n  Policy: \"http://www.w3.org/ns/solid/acp#Policy\",\n  AccessControl: \"http://www.w3.org/ns/solid/acp#AccessControl\",\n  Read: \"http://www.w3.org/ns/solid/acp#Read\",\n  Append: \"http://www.w3.org/ns/solid/acp#Append\",\n  Write: \"http://www.w3.org/ns/solid/acp#Write\",\n  /** @deprecated Removed from the ACP proposal, to be replaced by Matchers. */\n  Rule: \"http://www.w3.org/ns/solid/acp#Rule\",\n  Matcher: \"http://www.w3.org/ns/solid/acp#Matcher\",\n  accessControl: \"http://www.w3.org/ns/solid/acp#accessControl\",\n  memberAccessControl: \"http://www.w3.org/ns/solid/acp#memberAccessControl\",\n  apply: \"http://www.w3.org/ns/solid/acp#apply\",\n  /** @deprecated Removed from the ACP proposal, to be replaced by memberAccessControls. */\n  applyMembers: \"http://www.w3.org/ns/solid/acp#applyMembers\",\n  allow: \"http://www.w3.org/ns/solid/acp#allow\",\n  deny: \"http://www.w3.org/ns/solid/acp#deny\",\n  allOf: \"http://www.w3.org/ns/solid/acp#allOf\",\n  anyOf: \"http://www.w3.org/ns/solid/acp#anyOf\",\n  noneOf: \"http://www.w3.org/ns/solid/acp#noneOf\",\n  access: \"http://www.w3.org/ns/solid/acp#access\",\n  /** @deprecated Removed from the ACP proposal, to be replaced by memberAccessControls. */\n  accessMembers: \"http://www.w3.org/ns/solid/acp#accessMembers\",\n  agent: \"http://www.w3.org/ns/solid/acp#agent\",\n  group: \"http://www.w3.org/ns/solid/acp#group\",\n  client: \"http://www.w3.org/ns/solid/acp#client\",\n  PublicAgent: \"http://www.w3.org/ns/solid/acp#PublicAgent\",\n  AuthenticatedAgent: \"http://www.w3.org/ns/solid/acp#AuthenticatedAgent\",\n  CreatorAgent: \"http://www.w3.org/ns/solid/acp#CreatorAgent\"\n};\n/** @hidden */\nconst solid = {\n  PublicOidcClient: \"http://www.w3.org/ns/solid/terms#PublicOidcClient\"\n};\n/** @hidden */\nconst security = {\n  publicKey: \"https://w3id.org/security#publicKey\"\n};\n/** @hidden */\nconst pim = {\n  storage: \"http://www.w3.org/ns/pim/space#storage\"\n};\n\n//\n/** @ignore For internal use only. */\nconst internal_defaultFetchOptions = {\n  fetch\n};\n/**\r\n * Retrieve the information about a resource (e.g. access permissions) without\r\n * fetching the resource itself.\r\n *\r\n * @param url URL to fetch Resource metadata from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.\r\n * @since 0.4.0\r\n */\nasync function getResourceInfo(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.assign(Object.assign({}, internal_defaultFetchOptions), {\n    ignoreAuthenticationErrors: false\n  });\n  var _a;\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const response = await config.fetch(url, {\n    method: \"HEAD\"\n  });\n  return responseToResourceInfo(response, {\n    ignoreAuthenticationErrors: (_a = options.ignoreAuthenticationErrors) !== null && _a !== void 0 ? _a : false\n  });\n}\n/**\r\n * Parse Solid metadata from a Response obtained by fetching a Resource from a Solid Pod,\r\n *\r\n * @param response A Fetch API Response. See {@link https://developer.mozilla.org/en-US/docs/Web/API/Response MDN}.\r\n * @returns Resource metadata readable by functions such as [[getSourceUrl]].\r\n * @hidden This interface is not exposed yet until we've tried it out in practice.\r\n */\nfunction responseToResourceInfo(response) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    ignoreAuthenticationErrors: false\n  };\n  if (internal_isUnsuccessfulResponse(response) && (!internal_isAuthenticationFailureResponse(response) || !options.ignoreAuthenticationErrors)) {\n    throw new FetchError(`Fetching the metadata of the Resource at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const resourceInfo = internal_parseResourceInfo(response);\n  return {\n    internal_resourceInfo: resourceInfo\n  };\n}\n/**\r\n * @param resource Resource for which to check whether it is a Container.\r\n * @returns Whether `resource` is a Container.\r\n */\nfunction isContainer(resource) {\n  const containerUrl = hasResourceInfo(resource) ? getSourceUrl(resource) : internal_toIriString(resource);\n  return containerUrl.endsWith(\"/\");\n}\n/**\r\n * This function will tell you whether a given Resource contains raw data, or a SolidDataset.\r\n *\r\n * @param resource Resource for which to check whether it contains raw data.\r\n * @return Whether `resource` contains raw data.\r\n */\nfunction isRawData(resource) {\n  return resource.internal_resourceInfo.isRawData;\n}\n/**\r\n * @param resource Resource for which to determine the Content Type.\r\n * @returns The Content Type, if known, or null if not known.\r\n */\nfunction getContentType$1(resource) {\n  var _a;\n  return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;\n}\nfunction getSourceUrl(resource) {\n  if (hasResourceInfo(resource)) {\n    return resource.internal_resourceInfo.sourceIri;\n  }\n  return null;\n}\n/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */\nconst getSourceIri = getSourceUrl;\n/**\r\n * Given a Resource that exposes information about the owner of the Pod it is in, returns the WebID of that owner.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns The WebID of the owner of the Pod the Resource is in, if provided, or `null` if not.\r\n * @since 0.6.0\r\n */\nfunction getPodOwner(resource) {\n  var _a;\n  if (!hasServerResourceInfo(resource)) {\n    return null;\n  }\n  const podOwners = (_a = getLinkedResourceUrlAll(resource)[\"http://www.w3.org/ns/solid/terms#podOwner\"]) !== null && _a !== void 0 ? _a : [];\n  return podOwners.length === 1 ? podOwners[0] : null;\n}\n/**\r\n * Given a WebID and a Resource that exposes information about the owner of the Pod it is in, returns whether the given WebID is the owner of the Pod.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param webId The WebID of which to check whether it is the Pod Owner's.\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns Whether the given WebID is the Pod Owner's, if the Pod Owner is exposed, or `null` if it is not exposed.\r\n * @since 0.6.0\r\n */\nfunction isPodOwner(webId, resource) {\n  const podOwner = getPodOwner(resource);\n  if (typeof podOwner !== \"string\") {\n    return null;\n  }\n  return podOwner === webId;\n}\n/**\r\n * Get the URLs of Resources linked to the given Resource.\r\n *\r\n * Solid servers can link Resources to each other. For example, in servers\r\n * implementing Web Access Control, Resources can have an Access Control List\r\n * Resource linked to it via the `acl` relation.\r\n *\r\n * @param resource A Resource fetched from a Solid Pod.\r\n * @returns The URLs of Resources linked to the given Resource, indexed by the key that links them.\r\n * @since 1.7.0\r\n */\nfunction getLinkedResourceUrlAll(resource) {\n  return resource.internal_resourceInfo.linkedResources;\n}\n/**\r\n * Get what access the current user has to the given Resource.\r\n *\r\n * This function can tell you what access the current user has for the given\r\n * Resource, allowing you to e.g. determine that changes to it will be rejected\r\n * before attempting to do so.\r\n * Additionally, for servers adhering to the Web Access Control specification,\r\n * it will tell you what access unauthenticated users have to the given Resource.\r\n *\r\n * @param resource A Resource fetched from a Solid Pod.\r\n * @returns What access the current user and, if supported by the server, unauthenticated users have to the given Resource.\r\n * @since 1.7.0\r\n */\nfunction getEffectiveAccess(resource) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  if (typeof resource.internal_resourceInfo.permissions === \"object\") {\n    return {\n      user: {\n        read: resource.internal_resourceInfo.permissions.user.read,\n        append: resource.internal_resourceInfo.permissions.user.append,\n        write: resource.internal_resourceInfo.permissions.user.write\n      },\n      public: {\n        read: resource.internal_resourceInfo.permissions.public.read,\n        append: resource.internal_resourceInfo.permissions.public.append,\n        write: resource.internal_resourceInfo.permissions.public.write\n      }\n    };\n  }\n  const linkedResourceUrls = getLinkedResourceUrlAll(resource);\n  return {\n    user: {\n      read: (_b = (_a = linkedResourceUrls[acp.allow]) === null || _a === void 0 ? void 0 : _a.includes(acp.Read)) !== null && _b !== void 0 ? _b : false,\n      append: (_e = ((_c = linkedResourceUrls[acp.allow]) === null || _c === void 0 ? void 0 : _c.includes(acp.Append)) || ((_d = linkedResourceUrls[acp.allow]) === null || _d === void 0 ? void 0 : _d.includes(acp.Write))) !== null && _e !== void 0 ? _e : false,\n      write: (_g = (_f = linkedResourceUrls[acp.allow]) === null || _f === void 0 ? void 0 : _f.includes(acp.Write)) !== null && _g !== void 0 ? _g : false\n    }\n  };\n}\n/**\r\n * Extends the regular JavaScript error object with access to the status code and status message.\r\n * @since 1.2.0\r\n */\nclass FetchError extends SolidClientError {\n  constructor(message, errorResponse) {\n    super(message);\n    this.response = errorResponse;\n  }\n  get statusCode() {\n    return this.response.status;\n  }\n  get statusText() {\n    return this.response.statusText;\n  }\n}\n\n//\nconst defaultGetFileOptions = {\n  fetch\n};\nconst RESERVED_HEADERS = [\"Slug\", \"If-None-Match\", \"Content-Type\"];\n/**\r\n * Some of the headers must be set by the library, rather than directly.\r\n */\nfunction containsReserved(header) {\n  return RESERVED_HEADERS.some(reserved => header[reserved] !== undefined);\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file from a URL and returns the file as a blob.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * const fileBlob = await getFile(\"https://pod.example.com/some/file\", { fetch: fetch });\r\n * ```\r\n *\r\n * For additional examples, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#retrieve-a-file).\r\n *\r\n * @param fileUrl The URL of the file to return\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns The file as a blob.\r\n */\nasync function getFile(fileUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetFileOptions;\n  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\n  const url = internal_toIriString(fileUrl);\n  const response = await config.fetch(url, config.init);\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Fetching the File failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const resourceInfo = internal_parseResourceInfo(response);\n  const data = await response.blob();\n  const fileWithResourceInfo = Object.assign(data, {\n    internal_resourceInfo: resourceInfo\n  });\n  return fileWithResourceInfo;\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Deletes a file at a given URL.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * await deleteFile( \"https://pod.example.com/some/file\", { fetch: fetch });\r\n * ```\r\n *\r\n * For additional examples, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#delete-a-file).\r\n *\r\n * @param file The URL of the file to delete or the file itself (if it has ResourceInfo).\r\n */\nasync function deleteFile(file) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetFileOptions;\n  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\n  const url = hasResourceInfo(file) ? internal_toIriString(getSourceIri(file)) : internal_toIriString(file);\n  const response = await config.fetch(url, Object.assign(Object.assign({}, config.init), {\n    method: \"DELETE\"\n  }));\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Deleting the file at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file in an existing folder/Container associated with the given URL.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * const savedFile = await saveFileInContainer(\r\n *   \"https://pod.example.com/some/existing/container/\",\r\n *   new Blob([\"This is a plain piece of text\"], { type: \"plain/text\" }),\r\n *   { slug: \"suggestedFileName.txt\", contentType: \"text/plain\", fetch: fetch }\r\n * );\r\n * ```\r\n *\r\n * For additional example, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#save-a-file-into-an-existing-container).\r\n *\r\n * In the `options` parameter,\r\n *\r\n * - You can suggest a file name in the `slug` field.  However, the Solid\r\n *   Server may or may not use the suggested `slug` as the file name.\r\n *\r\n * - *Recommended:* You can specify the [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)\r\n *   of the file in the `contentType`.  If unspecified, the function uses the default type of\r\n *   `application/octet-stream`, indicating a binary data file.\r\n *\r\n * The function saves a file into an *existing* Container. If the\r\n * Container does not exist, either:\r\n * - Create the Container first using [[createContainerAt]], and then\r\n *   use the function, or\r\n * - Use [[overwriteFile]] to save the file. [[overwriteFile]] creates\r\n *   the Containers in the saved file path as needed.\r\n *\r\n * Users who only have `Append` but not `Write` access to a Container\r\n * can use [[saveFileInContainer]] to save new files to the Container.\r\n * That is, [[saveFileInContainer]] is useful in situations where users\r\n * can add new files to a Container but not change existing files in\r\n * the Container, such as users given access to send notifications to\r\n * another's Pod but not to view or delete existing notifications in that Pod.\r\n *\r\n * Users with `Write` access to the given folder/Container may prefer to\r\n * use [[overwriteFile]].\r\n *\r\n * @param folderUrl The URL of an existing folder where the new file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g. a slug).\r\n * @returns A Promise that resolves to the saved file, if available, or `null` if the current user does not have Read access to the newly-saved file. It rejects if saving fails.\r\n */\nasync function saveFileInContainer(folderUrl, file) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetFileOptions;\n  const folderUrlString = internal_toIriString(folderUrl);\n  const response = await writeFile(folderUrlString, file, \"POST\", options);\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Saving the file in [${folderUrl}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const locationHeader = response.headers.get(\"Location\");\n  if (locationHeader === null) {\n    throw new Error(\"Could not determine the location of the newly saved file.\");\n  }\n  const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;\n  const blobClone = internal_cloneResource(file);\n  const resourceInfo = {\n    internal_resourceInfo: {\n      isRawData: true,\n      sourceIri: fileIri,\n      contentType: getContentType(file, options.contentType)\n    }\n  };\n  return Object.assign(blobClone, resourceInfo);\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file at a given URL. If a file already exists at the URL,\r\n * the function overwrites the existing file.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * const savedFile = await overwriteFile(\r\n *   \"https://pod.example.com/some/container/myFile.txt\",\r\n *   new Blob([\"This is a plain piece of text\"], { type: \"plain/text\" }),\r\n *   { contentType: \"text/plain\", fetch: fetch }\r\n * );\r\n * ```\r\n *\r\n * For additional example, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#write-a-file-to-a-specific-url).\r\n *\r\n * *Recommended:* In the `options` parameter, you can specify the\r\n * [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)\r\n * of the file in the `contentType`.  If unspecified, the function uses the default type of\r\n * `application/octet-stream`, indicating a binary data file.\r\n *\r\n * When saving a file with [[overwriteFile]], the Solid server creates any\r\n * intermediary Containers as needed; i.e., the Containers do not\r\n * need to be created in advance. For example, when saving a file to the target URL of\r\n * https://example.pod/container/resource, if https://example.pod/container/ does not exist,\r\n * the container is created as part of the save.\r\n *\r\n * @param fileUrl The URL where the file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g., media type).\r\n */\nasync function overwriteFile(fileUrl, file) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetFileOptions;\n  const fileUrlString = internal_toIriString(fileUrl);\n  const response = await writeFile(fileUrlString, file, \"PUT\", options);\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Overwriting the file at [${fileUrlString}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const blobClone = internal_cloneResource(file);\n  const resourceInfo = internal_parseResourceInfo(response);\n  resourceInfo.sourceIri = fileUrlString;\n  resourceInfo.isRawData = true;\n  return Object.assign(blobClone, {\n    internal_resourceInfo: resourceInfo\n  });\n}\nfunction isHeadersArray(headers) {\n  return Array.isArray(headers);\n}\n/**\r\n * The return type of this function is misleading: it should ONLY be used to check\r\n * whether an object has a forEach method that returns <key, value> pairs.\r\n *\r\n * @param headers A headers object that might have a forEach\r\n */\nfunction hasHeadersObjectForEach(headers) {\n  return typeof headers.forEach === \"function\";\n}\n/**\r\n * @hidden\r\n * This function feels unnecessarily complicated, but is required in order to\r\n * have Headers according to type definitions in both Node and browser environments.\r\n * This might require a fix upstream to be cleaned up.\r\n *\r\n * @param headersToFlatten A structure containing headers potentially in several formats\r\n */\nfunction flattenHeaders(headersToFlatten) {\n  if (typeof headersToFlatten === \"undefined\") {\n    return {};\n  }\n  let flatHeaders = {};\n  if (isHeadersArray(headersToFlatten)) {\n    headersToFlatten.forEach(_ref => {\n      let [key, value] = _ref;\n      flatHeaders[key] = value;\n    });\n    // Note that the following line must be a elsif, because string[][] has a forEach,\n    // but it returns string[] instead of <key, value>\n  } else if (hasHeadersObjectForEach(headersToFlatten)) {\n    headersToFlatten.forEach((value, key) => {\n      flatHeaders[key] = value;\n    });\n  } else {\n    // If the headers are already a Record<string, string>,\n    // they can directly be returned.\n    flatHeaders = headersToFlatten;\n  }\n  return flatHeaders;\n}\n/**\r\n * Internal function that performs the actual write HTTP query, either POST\r\n * or PUT depending on the use case.\r\n *\r\n * @param fileUrl The URL where the file is saved\r\n * @param file The file to be written\r\n * @param method The HTTP method\r\n * @param options Additional parameters for file creation (e.g. a slug, or media type)\r\n */\nasync function writeFile(targetUrl, file, method, options) {\n  var _a, _b;\n  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\n  const headers = flattenHeaders((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});\n  if (containsReserved(headers)) {\n    throw new Error(`No reserved header (${RESERVED_HEADERS.join(\", \")}) should be set in the optional RequestInit.`);\n  }\n  // If a slug is in the parameters, set the request headers accordingly\n  if (config.slug !== undefined) {\n    headers.Slug = config.slug;\n  }\n  headers[\"Content-Type\"] = getContentType(file, options.contentType);\n  const targetUrlString = internal_toIriString(targetUrl);\n  return config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), {\n    headers,\n    method,\n    body: file\n  }));\n}\nfunction getContentType(file, contentTypeOverride) {\n  if (typeof contentTypeOverride === \"string\") {\n    return contentTypeOverride;\n  }\n  const fileType = typeof file === \"object\" && file !== null && typeof file.type === \"string\" && file.type.length > 0 ? file.type : undefined;\n  return fileType !== null && fileType !== void 0 ? fileType : \"application/octet-stream\";\n}\n\n//\nrdfJsDatasetModule.dataset;\nconst localNodeSkolemPrefix = \"https://inrupt.com/.well-known/sdk-local-node/\";\n/**\r\n * Runtime freezing might be too much overhead;\r\n * if so, this function allows us to replace it by a function\r\n * that merely marks its input as Readonly<> for static analysis.\r\n */\nconst {\n  freeze\n} = Object;\nfunction isLocalNodeIri(iri) {\n  return iri.substring(0, localNodeSkolemPrefix.length) === localNodeSkolemPrefix;\n}\nfunction getLocalNodeName(localNodeIri) {\n  return localNodeIri.substring(localNodeSkolemPrefix.length);\n}\nfunction getLocalNodeIri(localNodeName) {\n  return `${localNodeSkolemPrefix}${localNodeName}`;\n}\nfunction isBlankNodeId(value) {\n  return typeof value === \"string\" && value.substring(0, 2) === \"_:\";\n}\nfunction getBlankNodeValue(blankNodeId) {\n  return blankNodeId.substring(2);\n}\nfunction getBlankNodeId(blankNode) {\n  return `_:${blankNode.value}`;\n}\n\n//\n/**\r\n * IRIs of the XML Schema data types we support\r\n */\nconst xmlSchemaTypes = {\n  boolean: \"http://www.w3.org/2001/XMLSchema#boolean\",\n  dateTime: \"http://www.w3.org/2001/XMLSchema#dateTime\",\n  date: \"http://www.w3.org/2001/XMLSchema#date\",\n  time: \"http://www.w3.org/2001/XMLSchema#time\",\n  decimal: \"http://www.w3.org/2001/XMLSchema#decimal\",\n  integer: \"http://www.w3.org/2001/XMLSchema#integer\",\n  string: \"http://www.w3.org/2001/XMLSchema#string\",\n  langString: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\"\n};\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\nfunction serializeBoolean(value) {\n  return value ? \"true\" : \"false\";\n}\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\nfunction deserializeBoolean(value) {\n  if (value === \"true\" || value === \"1\") {\n    return true;\n  }\n  if (value === \"false\" || value === \"0\") {\n    return false;\n  }\n  return null;\n}\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value` in UTC.\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\nfunction serializeTime(value) {\n  let millisecondString;\n  let timezoneString;\n  if (value.millisecond) {\n    if (value.millisecond < 10) {\n      millisecondString = `00${value.millisecond}`;\n    } else if (value.millisecond < 100) {\n      millisecondString = `0${value.millisecond}`;\n    } else {\n      millisecondString = value.millisecond;\n    }\n  }\n  if (typeof value.timezoneHourOffset === \"number\") {\n    const timezoneFormatted = Math.abs(value.timezoneHourOffset) < 10 ? `0${Math.abs(value.timezoneHourOffset)}` : Math.abs(value.timezoneHourOffset);\n    timezoneString = value.timezoneHourOffset >= 0 ? `+${timezoneFormatted}` : `-${timezoneFormatted}`;\n    if (value.timezoneMinuteOffset) {\n      timezoneString = `${timezoneString}:${value.timezoneMinuteOffset < 10 ? `0${value.timezoneMinuteOffset}` : value.timezoneMinuteOffset}`;\n    } else {\n      timezoneString += \":00\";\n    }\n  }\n  return `${value.hour < 10 ? `0${value.hour}` : value.hour}:${value.minute < 10 ? `0${value.minute}` : value.minute}:${value.second < 10 ? `0${value.second}` : value.second}${value.millisecond ? `.${millisecondString}` : \"\"}${timezoneString || \"\"}`;\n}\n/**\r\n * @internal\r\n * @param literalString Value to deserialise.\r\n * @returns Deserialized time, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\nfunction deserializeTime(literalString) {\n  // Time in the format described at\n  // https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\n  // \\d\\d:\\d\\d:\\d\\d - Two digits for the hour, minute and second, respectively, separated by a `:`.\n  //                  Example: \"13:37:42\".\n  // (\\.\\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.\n  //            Example: \".1337\".\n  // (Z|(\\+|-)\\d\\d:\\d\\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for\n  //                       the hour offset and two for the minute offset, separated by a `:`.\n  //                       Example: \"+13:37\".\n  const timeRegEx = /\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)?/;\n  if (!timeRegEx.test(literalString)) {\n    return null;\n  }\n  const [timeString, timezoneString] = splitTimeFromTimezone(literalString);\n  const [hourString, minuteString, timeRest] = timeString.split(\":\");\n  let utcHours = Number.parseInt(hourString, 10);\n  let utcMinutes = Number.parseInt(minuteString, 10);\n  const [secondString, optionalMillisecondString] = timeRest.split(\".\");\n  const utcSeconds = Number.parseInt(secondString, 10);\n  const utcMilliseconds = optionalMillisecondString ? Number.parseInt(optionalMillisecondString, 10) : undefined;\n  if (utcMinutes >= 60) {\n    utcHours += 1;\n    utcMinutes -= 60;\n  }\n  const deserializedTime = {\n    hour: utcHours,\n    minute: utcMinutes,\n    second: utcSeconds\n  };\n  if (typeof utcMilliseconds === \"number\") {\n    deserializedTime.millisecond = utcMilliseconds;\n  }\n  if (typeof timezoneString === \"string\") {\n    const [hourOffset, minuteOffset] = getTimezoneOffsets(timezoneString);\n    if (typeof hourOffset !== \"number\" || hourOffset > 24 || typeof minuteOffset !== \"number\" || minuteOffset > 59) {\n      return null;\n    }\n    deserializedTime.timezoneHourOffset = hourOffset;\n    deserializedTime.timezoneMinuteOffset = minuteOffset;\n  }\n  return deserializedTime;\n}\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\nfunction serializeDatetime(value) {\n  // Although the XML Schema DateTime is not _exactly_ an ISO 8601 string\n  // (see https://www.w3.org/TR/xmlschema-2/#deviantformats),\n  // the deviations only affect the parsing, not the serialisation.\n  // Therefore, we can just use .toISOString():\n  return value.toISOString();\n}\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\nfunction deserializeDatetime(literalString) {\n  // DateTime in the format described at\n  // https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\n  // (without constraints on the value).\n  // -? - An optional leading `-`.\n  // \\d{4,}- - Four or more digits followed by a `-` representing the year. Example: \"3000-\".\n  // \\d\\d-\\d\\d - Two digits representing the month and two representing the day of the month,\n  //             separated by a `-`. Example: \"11-03\".\n  // T - The letter T, separating the date from the time.\n  // \\d\\d:\\d\\d:\\d\\d - Two digits for the hour, minute and second, respectively, separated by a `:`.\n  //                  Example: \"13:37:42\".\n  // (\\.\\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.\n  //            Example: \".1337\".\n  // (Z|(\\+|-)\\d\\d:\\d\\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for\n  //                       the hour offset and two for the minute offset, separated by a `:`.\n  //                       Example: \"+13:37\".\n  const datetimeRegEx = /-?\\d{4,}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)?/;\n  if (!datetimeRegEx.test(literalString)) {\n    return null;\n  }\n  const [signedDateString, rest] = literalString.split(\"T\");\n  // The date string can optionally be prefixed with `-`,\n  // in which case the year is negative:\n  const [yearMultiplier, dateString] = signedDateString.charAt(0) === \"-\" ? [-1, signedDateString.substring(1)] : [1, signedDateString];\n  const [yearString, monthString, dayString] = dateString.split(\"-\");\n  const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;\n  const utcMonth = Number.parseInt(monthString, 10) - 1;\n  const utcDate = Number.parseInt(dayString, 10);\n  const [timeString, timezoneString] = splitTimeFromTimezone(rest);\n  const [hourOffset, minuteOffset] = typeof timezoneString === \"string\" ? getTimezoneOffsets(timezoneString) : [0, 0];\n  const [hourString, minuteString, timeRest] = timeString.split(\":\");\n  const utcHours = Number.parseInt(hourString, 10) + hourOffset;\n  const utcMinutes = Number.parseInt(minuteString, 10) + minuteOffset;\n  const [secondString, optionalMillisecondString] = timeRest.split(\".\");\n  const utcSeconds = Number.parseInt(secondString, 10);\n  const utcMilliseconds = optionalMillisecondString ? Number.parseInt(optionalMillisecondString, 10) : 0;\n  const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, utcHours, utcMinutes, utcSeconds, utcMilliseconds));\n  // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation\n  // always writes out the years fully, we should correct this to actually map to the years 0 to 99.\n  // See\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values\n  if (utcFullYear >= 0 && utcFullYear < 100) {\n    // Note that we base it on the calculated year, rather than the year that was actually read.\n    // This is because the year might actually differ from the value listed in the serialisation,\n    // i.e. when moving the timezone offset to UTC pushes it into a different year:\n    date.setUTCFullYear(date.getUTCFullYear() - 1900);\n  }\n  return date;\n}\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation\r\n */\nfunction serializeDate(value) {\n  const year = value.getFullYear();\n  const month = value.getMonth() + 1;\n  const day = value.getDate();\n  const [_, timezone] = splitTimeFromTimezone(value.toISOString());\n  return `${year}-${String(month).padStart(2, \"0\")}-${String(day).padStart(2, \"0\")}${timezone}`;\n}\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation\r\n */\nfunction deserializeDate(literalString) {\n  // Date in the format described at\n  // https://www.w3.org/TR/xmlschema-2/#date-lexical-representation\n  // (without constraints on the value).\n  // -? - An optional leading `-`.\n  // \\d{4,}- - Four or more digits followed by a `-` representing the year. Example: \"3000-\".\n  // \\d\\d-\\d\\d - Two digits representing the month and two representing the day of the month,\n  //             separated by a `-`. Example: \"11-03\".\n  // (Z|(\\+|-)\\d\\d:\\d\\d) - Optionally, the letter Z indicating UTC, or a `+` or `-` followed by two digits for\n  //                       the hour offset and two for the minute offset, separated by a `:`.\n  //                       Example: \"+13:37\".\n  const dateRegEx = /-?\\d{4,}-\\d\\d-\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?/;\n  if (!dateRegEx.test(literalString)) {\n    return null;\n  }\n  const signedDateString = literalString;\n  // The date string can optionally be prefixed with `-`,\n  // in which case the year is negative:\n  const [yearMultiplier, dateString] = signedDateString.charAt(0) === \"-\" ? [-1, signedDateString.substring(1)] : [1, signedDateString];\n  const [yearString, monthString, dayAndTimezoneString] = dateString.split(\"-\");\n  const dayString = dayAndTimezoneString.length > 2 ? dayAndTimezoneString.substring(0, 2) : dayAndTimezoneString;\n  const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;\n  const utcMonth = Number.parseInt(monthString, 10) - 1;\n  const utcDate = Number.parseInt(dayString, 10);\n  const hour = 12;\n  // setting at 12:00 avoids all timezones\n  const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, hour));\n  // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation\n  // always writes out the years fully, we should correct this to actually map to the years 0 to 99.\n  // See\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values\n  if (utcFullYear >= 0 && utcFullYear < 100) {\n    date.setUTCFullYear(date.getUTCFullYear() - 1900);\n  }\n  return date;\n}\n/**\r\n * @param timeString An XML Schema time string.\r\n * @returns A tuple [timeString, timezoneString].\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\nfunction splitTimeFromTimezone(timeString) {\n  if (timeString.endsWith(\"Z\")) {\n    return [timeString.substring(0, timeString.length - 1), \"Z\"];\n  }\n  const splitOnPlus = timeString.split(\"+\");\n  const splitOnMinus = timeString.split(\"-\");\n  if (splitOnPlus.length === 1 && splitOnMinus.length === 1) {\n    return [splitOnPlus[0], undefined];\n  }\n  return splitOnPlus.length > splitOnMinus.length ? [splitOnPlus[0], `+${splitOnPlus[1]}`] : [splitOnMinus[0], `-${splitOnMinus[1]}`];\n}\n/**\r\n * @param timezoneString Lexical representation of a time zone in XML Schema.\r\n * @returns A tuple of the hour and minute offset of the time zone.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-timezones\r\n */\nfunction getTimezoneOffsets(timezoneString) {\n  if (timezoneString === \"Z\") {\n    return [0, 0];\n  }\n  const multiplier = timezoneString.charAt(0) === \"+\" ? 1 : -1;\n  const [hourString, minuteString] = timezoneString.substring(1).split(\":\");\n  const hours = Number.parseInt(hourString, 10);\n  const minutes = Number.parseInt(minuteString, 10);\n  return [hours * multiplier, minutes * multiplier];\n}\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\nfunction serializeDecimal(value) {\n  return value.toString();\n}\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\nfunction deserializeDecimal(literalString) {\n  const deserialized = Number.parseFloat(literalString);\n  if (Number.isNaN(deserialized)) {\n    return null;\n  }\n  return deserialized;\n}\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\nfunction serializeInteger(value) {\n  return value.toString();\n}\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized integer, or null if the given value is not a valid serialised integer.\r\n */\nfunction deserializeInteger(literalString) {\n  const deserialized = Number.parseInt(literalString, 10);\n  if (Number.isNaN(deserialized)) {\n    return null;\n  }\n  return deserialized;\n}\n/**\r\n * @internal\r\n * @param locale Locale to transform into a consistent format.\r\n */\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase();\n}\n/**\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param value The value that might or might not be a Named Node.\r\n * @returns Whether `value` is a Named Node.\r\n */\nfunction isNamedNode(value) {\n  return isTerm(value) && value.termType === \"NamedNode\";\n}\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Literals.\r\n * @param value The value that might or might not be a Literal.\r\n * @returns Whether `value` is a Literal.\r\n */\nfunction isLiteral(value) {\n  return isTerm(value) && value.termType === \"Literal\";\n}\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Terms.\r\n * @param value The value that might or might not be a Term.\r\n * @returns Whether `value` is a Term.\r\n */\nfunction isTerm(value) {\n  return value !== null && typeof value === \"object\" && typeof value.termType === \"string\" && typeof value.value === \"string\" && typeof value.equals === \"function\";\n}\n/**\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param value The value that might or might not be a Node with no known IRI yet.\r\n * @returns Whether `value` is a Node with no known IRI yet.\r\n */\nfunction isLocalNode(value) {\n  return isNamedNode(value) && isLocalNodeIri(value.value);\n}\n/**\r\n * Ensure that a given value is a valid URL.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw URLs.\r\n * @param iri The value of which to verify that it is a valid URL.\r\n */\nfunction internal_isValidUrl(iri) {\n  const iriString = internal_toIriString(iri);\n  // If the runtime environment supports URL, instantiate one.\n  // If the given IRI is not a valid URL, it will throw an error.\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/URL\n  /* istanbul ignore if [URL is available in our testing environment, so we cannot test the alternative] */\n  if (typeof URL !== \"function\") {\n    // If we can't validate the URL, do not throw an error:\n    return true;\n  }\n  try {\n    // const here is needed to avoid a \"no-new\" warning:\n    const url = new URL(iriString);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param localNode The LocalNode to resolve to a NamedNode.\r\n * @param resourceIri The Resource in which the Node will be saved.\r\n */\nfunction resolveIriForLocalNode(localNode, resourceIri) {\n  return DataFactory.namedNode(resolveLocalIri(getLocalNodeName(localNode.value), resourceIri));\n}\n/**\r\n * @internal API for internal use only.\r\n * @param name The name identifying a Thing.\r\n * @param resourceIri The Resource in which the Thing can be found.\r\n */\nfunction resolveLocalIri(name, resourceIri) {\n  /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */\n  if (typeof URL !== \"function\") {\n    throw new Error(\"The URL interface is not available, so an IRI cannot be determined.\");\n  }\n  const thingIri = new URL(resourceIri);\n  thingIri.hash = name;\n  return thingIri.href;\n}\n\n//\nconst DataFactory = RdfJsDataFactory;\nfunction addRdfJsQuadToDataset(dataset, quad) {\n  let quadParseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  const supportedGraphTypes = [\"NamedNode\", \"DefaultGraph\"];\n  if (!supportedGraphTypes.includes(quad.graph.termType)) {\n    throw new Error(`Cannot parse Quads with nodes of type [${quad.graph.termType}] as their Graph node.`);\n  }\n  const graphId = quad.graph.termType === \"DefaultGraph\" ? \"default\" : quad.graph.value;\n  const graph = (_a = dataset.graphs[graphId]) !== null && _a !== void 0 ? _a : {};\n  return freeze(Object.assign(Object.assign({}, dataset), {\n    graphs: freeze(Object.assign(Object.assign({}, dataset.graphs), {\n      [graphId]: addRdfJsQuadToGraph(graph, quad, quadParseOptions)\n    }))\n  }));\n}\nfunction addRdfJsQuadToGraph(graph, quad, quadParseOptions) {\n  var _a;\n  const supportedSubjectTypes = [\"NamedNode\", \"BlankNode\"];\n  if (!supportedSubjectTypes.includes(quad.subject.termType)) {\n    throw new Error(`Cannot parse Quads with nodes of type [${quad.subject.termType}] as their Subject node.`);\n  }\n  const subjectIri = quad.subject.termType === \"BlankNode\" ? `_:${quad.subject.value}` : quad.subject.value;\n  const subject = (_a = graph[subjectIri]) !== null && _a !== void 0 ? _a : {\n    type: \"Subject\",\n    url: subjectIri,\n    predicates: {}\n  };\n  return freeze(Object.assign(Object.assign({}, graph), {\n    [subjectIri]: addRdfJsQuadToSubject(subject, quad, quadParseOptions)\n  }));\n}\nfunction addRdfJsQuadToSubject(subject, quad, quadParseOptions) {\n  return freeze(Object.assign(Object.assign({}, subject), {\n    predicates: addRdfJsQuadToPredicates(subject.predicates, quad, quadParseOptions)\n  }));\n}\nfunction addRdfJsQuadToPredicates(predicates, quad, quadParseOptions) {\n  var _a;\n  const supportedPredicateTypes = [\"NamedNode\"];\n  if (!supportedPredicateTypes.includes(quad.predicate.termType)) {\n    throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);\n  }\n  const predicateIri = quad.predicate.value;\n  const objects = (_a = predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n  return freeze(Object.assign(Object.assign({}, predicates), {\n    [predicateIri]: addRdfJsQuadToObjects(objects, quad, quadParseOptions)\n  }));\n}\nfunction addRdfJsQuadToObjects(objects, quad, quadParseOptions) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  if (quad.object.termType === \"NamedNode\") {\n    const namedNodes = freeze([...((_a = objects.namedNodes) !== null && _a !== void 0 ? _a : []), quad.object.value]);\n    return freeze(Object.assign(Object.assign({}, objects), {\n      namedNodes\n    }));\n  }\n  if (quad.object.termType === \"Literal\") {\n    if (quad.object.datatype.value === xmlSchemaTypes.langString) {\n      const locale = quad.object.language.toLowerCase();\n      const thisLocaleStrings = freeze([...((_c = (_b = objects.langStrings) === null || _b === void 0 ? void 0 : _b[locale]) !== null && _c !== void 0 ? _c : []), quad.object.value]);\n      const langStrings = freeze(Object.assign(Object.assign({}, (_d = objects.langStrings) !== null && _d !== void 0 ? _d : {}), {\n        [locale]: thisLocaleStrings\n      }));\n      return freeze(Object.assign(Object.assign({}, objects), {\n        langStrings\n      }));\n    }\n    // If the Object is a non-langString Literal\n    const thisTypeValues = freeze([...((_f = (_e = objects.literals) === null || _e === void 0 ? void 0 : _e[quad.object.datatype.value]) !== null && _f !== void 0 ? _f : []), quad.object.value]);\n    const literals = freeze(Object.assign(Object.assign({}, (_g = objects.literals) !== null && _g !== void 0 ? _g : {}), {\n      [quad.object.datatype.value]: thisTypeValues\n    }));\n    return freeze(Object.assign(Object.assign({}, objects), {\n      literals\n    }));\n  }\n  if (quad.object.termType === \"BlankNode\") {\n    const blankNodePredicates = getPredicatesForBlankNode(quad.object, quadParseOptions);\n    const blankNodes = freeze([...((_h = objects.blankNodes) !== null && _h !== void 0 ? _h : []), blankNodePredicates]);\n    return freeze(Object.assign(Object.assign({}, objects), {\n      blankNodes\n    }));\n  }\n  throw new Error(`Objects of type [${quad.object.termType}] are not supported.`);\n}\nfunction getPredicatesForBlankNode(node, quadParseOptions) {\n  var _a, _b;\n  const chainBlankNodes = (_a = quadParseOptions.chainBlankNodes) !== null && _a !== void 0 ? _a : [];\n  if (chainBlankNodes.find(chainBlankNode => chainBlankNode.equals(node)) === undefined) {\n    // If this Blank Node is not used to provide nested values for another Subject,\n    // just return its identifier.\n    // That identifier will also be listed among the Subjects in the Graph.\n    return getBlankNodeId(node);\n  }\n  /* istanbul ignore next: If there are chain nodes, there will always be other Quads, so the `?? []` can't be reached: */\n  const quads = (_b = quadParseOptions.otherQuads) !== null && _b !== void 0 ? _b : [];\n  const quadsWithNodeAsSubject = quads.filter(quad => quad.subject.equals(node));\n  // First add the Quads with regular Objects\n  const predicates = quadsWithNodeAsSubject.filter(quad => !isBlankNode(quad.object)).reduce((predicatesAcc, quad) => {\n    var _a;\n    const supportedPredicateTypes = [\"NamedNode\"];\n    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {\n      throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);\n    }\n    const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};\n    return freeze(Object.assign(Object.assign({}, predicatesAcc), {\n      [quad.predicate.value]: addRdfJsQuadToObjects(objects, quad, quadParseOptions)\n    }));\n  }, {});\n  // And then also add the Quads that have another Blank Node as the Object\n  // in addition to the Blank Node `node` as the Subject:\n  const blankNodeObjectQuads = quadsWithNodeAsSubject.filter(quad => isBlankNode(quad.object));\n  return blankNodeObjectQuads.reduce((predicatesAcc, quad) => {\n    var _a, _b;\n    const supportedPredicateTypes = [\"NamedNode\"];\n    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {\n      throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);\n    }\n    /* istanbul ignore next: The `?? {}` doesn't get hit; presumably it's initialised above. */\n    const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};\n    /* istanbul ignore next: The `?? []` doesn't get hit; presumably it's initialised above. */\n    const blankNodes = (_b = objects.blankNodes) !== null && _b !== void 0 ? _b : [];\n    return freeze(Object.assign(Object.assign({}, predicatesAcc), {\n      // The BlankNode assertions are valid because we filtered on BlankNodes above:\n      [quad.predicate.value]: Object.assign(Object.assign({}, objects), {\n        blankNodes: [...blankNodes, getPredicatesForBlankNode(quad.object, quadParseOptions)]\n      })\n    }));\n  }, predicates);\n}\n/**\r\n * Given an array of Quads, returns all Blank Nodes that are used in a single chain of Nodes.\r\n *\r\n * This allows you to obtain which Blank Nodes are involved in e.g. RDF lists.\r\n * This is useful because those can be represented as nested data that will have\r\n * a deterministic structure, whereas a representation of Blank Nodes that\r\n * create a cycle or are re-used will need ad-hoc, non-deterministic identifiers\r\n * to allow for representation without inifinite nesting.\r\n */\nfunction getChainBlankNodes(quads) {\n  // All Blank Nodes that occur in Subject position:\n  const blankNodeSubjects = quads.map(quad => quad.subject).filter(isBlankNode);\n  // All Blank Nodes that occur in Object position:\n  const blankNodeObjects = quads.map(quad => quad.object).filter(isBlankNode);\n  // Makes sure that all given Nodes are the same,\n  // which will be used to verify that a set of Quads all have the same Subject:\n  function everyNodeTheSame(nodes) {\n    // This could potentially be made more performant by mapping every term\n    // to their value and using native JS comparisons, assuming every node is\n    // either a Blank or a Named Node.\n    return nodes.every(otherNode => nodes.every(anotherNode => otherNode.equals(anotherNode)));\n  }\n  // Get all Blank Nodes that are part of a cycle in the graph:\n  const cycleBlankNodes = [];\n  blankNodeObjects.forEach(blankNodeObject => {\n    cycleBlankNodes.push(...getCycleBlankNodes(blankNodeObject, quads));\n  });\n  // Get Blank Nodes that are used to provide nested values for a single Subject,\n  // which we'll represent as nested values as well\n  // (this allows us to avoid generating a non-deterministic, ad-hoc identifier\n  // for those Blank Nodes).\n  // We'll do this by taking all Blank Nodes in the given Quads...\n  const chainBlankNodes = blankNodeSubjects.concat(blankNodeObjects).filter(blankNode => {\n    // ....removing those Blank Nodes that are part of a cycle...\n    if (cycleBlankNodes.some(cycleBlankNode => cycleBlankNode.equals(blankNode))) {\n      return false;\n    }\n    // ...and then returning only those Blank Nodes that only occur in the\n    // Object position for a single Subject, i.e. that are part of a single\n    // chain:\n    const subjectsWithThisNodeAsObject = quads.filter(quad => quad.object.equals(blankNode)).map(quad => quad.subject);\n    return subjectsWithThisNodeAsObject.length > 0 && everyNodeTheSame(subjectsWithThisNodeAsObject);\n  });\n  return chainBlankNodes;\n}\nfunction toRdfJsQuads(dataset) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  const quads = [];\n  const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : RdfJsDataFactory;\n  Object.keys(dataset.graphs).forEach(graphIri => {\n    const graph = dataset.graphs[graphIri];\n    const graphNode = graphIri === \"default\" ? dataFactory.defaultGraph() : dataFactory.namedNode(graphIri);\n    Object.keys(graph).forEach(subjectIri => {\n      const {\n        predicates\n      } = graph[subjectIri];\n      const subjectNode = isBlankNodeId(subjectIri) ? dataFactory.blankNode(getBlankNodeValue(subjectIri)) : dataFactory.namedNode(subjectIri);\n      quads.push(...subjectToRdfJsQuads(predicates, subjectNode, graphNode, options));\n    });\n  });\n  return quads;\n}\nfunction subjectToRdfJsQuads(predicates, subjectNode, graphNode) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _a;\n  const quads = [];\n  const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : RdfJsDataFactory;\n  Object.keys(predicates).forEach(predicateIri => {\n    var _a, _b, _c, _d;\n    const predicateNode = dataFactory.namedNode(predicateIri);\n    const langStrings = (_a = predicates[predicateIri].langStrings) !== null && _a !== void 0 ? _a : {};\n    const namedNodes = (_b = predicates[predicateIri].namedNodes) !== null && _b !== void 0 ? _b : [];\n    const literals = (_c = predicates[predicateIri].literals) !== null && _c !== void 0 ? _c : {};\n    const blankNodes = (_d = predicates[predicateIri].blankNodes) !== null && _d !== void 0 ? _d : [];\n    const literalTypes = Object.keys(literals);\n    literalTypes.forEach(typeIri => {\n      const typeNode = dataFactory.namedNode(typeIri);\n      const literalValues = literals[typeIri];\n      literalValues.forEach(value => {\n        const literalNode = dataFactory.literal(value, typeNode);\n        quads.push(dataFactory.quad(subjectNode, predicateNode, literalNode, graphNode));\n      });\n    });\n    const locales = Object.keys(langStrings);\n    locales.forEach(locale => {\n      const localeValues = langStrings[locale];\n      localeValues.forEach(value => {\n        const langStringNode = dataFactory.literal(value, locale);\n        quads.push(dataFactory.quad(subjectNode, predicateNode, langStringNode, graphNode));\n      });\n    });\n    namedNodes.forEach(namedNodeIri => {\n      const node = dataFactory.namedNode(namedNodeIri);\n      quads.push(dataFactory.quad(subjectNode, predicateNode, node, graphNode));\n    });\n    blankNodes.forEach(blankNodeIdOrPredicates => {\n      if (isBlankNodeId(blankNodeIdOrPredicates)) {\n        const blankNode = dataFactory.blankNode(getBlankNodeValue(blankNodeIdOrPredicates));\n        quads.push(dataFactory.quad(subjectNode, predicateNode, blankNode, graphNode));\n      } else {\n        const node = dataFactory.blankNode();\n        const blankNodeObjectQuad = dataFactory.quad(subjectNode, predicateNode, node, graphNode);\n        const blankNodeSubjectQuads = subjectToRdfJsQuads(blankNodeIdOrPredicates, node, graphNode);\n        quads.push(blankNodeObjectQuad);\n        quads.push(...blankNodeSubjectQuads);\n      }\n    });\n  });\n  return quads;\n}\n/**\r\n * A recursive function that finds all Blank Nodes in an array of Quads that create a cycle in the graph.\r\n *\r\n * This function will traverse the graph starting from `currentNode`, keeping\r\n * track of all the Blank Nodes it encounters twice while doing so, and\r\n * returning those.\r\n */\nfunction getCycleBlankNodes(currentNode, quads) {\n  let traversedBlankNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  // If we've encountered `currentNode` before, all the Blank Nodes we've\n  // encountered so far are part of a cycle. Return those.\n  if (traversedBlankNodes.find(traversedBlankNode => traversedBlankNode.equals(currentNode)) !== undefined) {\n    return traversedBlankNodes;\n  }\n  // Find all Blank Nodes that are connected to `currentNode`:\n  const blankNodeObjects = quads.filter(quad => quad.subject.equals(currentNode) && isBlankNode(quad.object)).map(quad => quad.object);\n  // If no Blank Nodes are connected to `currentNode`, and `currentNode` is not\n  // part of a cycle, we're done; the currently traversed Nodes do not form a\n  // cycle:\n  if (blankNodeObjects.length === 0) {\n    return [];\n  }\n  // Store that we've traversed `currentNode`, then move on to all the Blank\n  // Nodes connected to it, which will then take up the role of `currentNode`:\n  const nextTraversedNodes = [...traversedBlankNodes, currentNode];\n  const cycleBlankNodeArrays = blankNodeObjects.map(nextNode => getCycleBlankNodes(nextNode, quads, nextTraversedNodes));\n  // Collect all the cycle Blank Nodes found in those traverals,\n  // then return them:\n  const allCycleBlankNodes = [];\n  for (const cycleBlankNodes of cycleBlankNodeArrays) {\n    allCycleBlankNodes.push(...cycleBlankNodes);\n  }\n  return allCycleBlankNodes;\n}\nfunction isBlankNode(term) {\n  return term.termType === \"BlankNode\";\n}\n\n//\nconst fetchDocumentLoader = async url => {\n  const res = await fetch(url);\n  return {\n    contextUrl: undefined,\n    documentUrl: url,\n    document: await res.json()\n  };\n};\n/**\r\n * ```{note} This function is still experimental and subject to change, even\r\n * in a non-major release.\r\n * ```\r\n * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.\r\n *\r\n * @returns A Parser object.\r\n * @since 1.15.0\r\n */\nconst getJsonLdParser = () => {\n  const onQuadCallbacks = [];\n  const onCompleteCallbacks = [];\n  const onErrorCallbacks = [];\n  return {\n    onQuad: callback => {\n      onQuadCallbacks.push(callback);\n    },\n    onError: callback => {\n      onErrorCallbacks.push(callback);\n    },\n    onComplete: callback => {\n      onCompleteCallbacks.push(callback);\n    },\n    parse: async (source, resourceInfo) => {\n      let quads = [];\n      try {\n        const plainQuads = await jsonld__namespace.toRDF(JSON.parse(source), {\n          base: getSourceUrl(resourceInfo),\n          documentLoader: fetchDocumentLoader\n        });\n        quads = fixQuads(plainQuads);\n      } catch (error) {\n        onErrorCallbacks.forEach(callback => callback(error));\n      }\n      quads.forEach(quad => {\n        onQuadCallbacks.forEach(callback => callback(quad));\n      });\n      onCompleteCallbacks.forEach(callback => callback());\n    }\n  };\n};\n/* Quads returned by jsonld parser are not spec-compliant\r\n * see https://github.com/digitalbazaar/jsonld.js/issues/243\r\n * Also, no specific type for these 'quads' is exposed by the library\r\n */\n// change to MaybeQuad\nfunction fixQuads(plainQuads) {\n  const fixedQuads = plainQuads.map(plainQuad => DataFactory.quad(term(plainQuad.subject), term(plainQuad.predicate), term(plainQuad.object), term(plainQuad.graph)));\n  return fixedQuads;\n}\nfunction term(term) {\n  switch (term.termType) {\n    case \"NamedNode\":\n      return DataFactory.namedNode(term.value);\n    case \"BlankNode\":\n      return DataFactory.blankNode(term.value.substr(2));\n    // Remove the '_:' prefix. see https://github.com/digitalbazaar/jsonld.js/issues/244\n    case \"Literal\":\n      return DataFactory.literal(term.value, term.language || term.datatype);\n    case \"DefaultGraph\":\n      return DataFactory.defaultGraph();\n    default:\n      throw Error(`unknown termType: ${term.termType}`);\n  }\n}\n\n//\n/**\r\n * ```{note} This function is still experimental and subject to change, even\r\n * in a non-major release.\r\n * ```\r\n * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.\r\n *\r\n * @returns A Parser object.\r\n * @since 1.15.0\r\n */\nconst getTurtleParser = () => {\n  const onQuadCallbacks = [];\n  const onCompleteCallbacks = [];\n  const onErrorCallbacks = [];\n  return {\n    onQuad: callback => {\n      onQuadCallbacks.push(callback);\n    },\n    onError: callback => {\n      onErrorCallbacks.push(callback);\n    },\n    onComplete: callback => {\n      onCompleteCallbacks.push(callback);\n    },\n    parse: async (source, resourceInfo) => {\n      const parser = await getParser(getSourceUrl(resourceInfo));\n      parser.parse(source, (error, quad) => {\n        if (error) {\n          onErrorCallbacks.forEach(callback => callback(error));\n        } else if (quad) {\n          onQuadCallbacks.forEach(callback => callback(quad));\n        } else {\n          onCompleteCallbacks.forEach(callback => callback());\n        }\n      });\n    }\n  };\n};\nasync function getParser(baseIri) {\n  return new n3.Parser({\n    format: \"text/turtle\",\n    baseIRI: baseIri\n  });\n}\n/**\r\n * @param quads Triples that should be serialised to Turtle\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\nasync function triplesToTurtle(quads) {\n  const format = \"text/turtle\";\n  const writer = new n3.Writer({\n    format\n  });\n  // Remove any potentially lingering references to Named Graphs in Quads;\n  // they'll be determined by the URL the Turtle will be sent to:\n  const triples = quads.map(quad => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));\n  writer.addQuads(triples);\n  const writePromise = new Promise((resolve, reject) => {\n    writer.end((error, result) => {\n      /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n  const rawTurtle = await writePromise;\n  return rawTurtle;\n}\n\n//\n/** @hidden For internal use only. */\nfunction internal_getReadableValue(value) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  if (isNamedNode(value)) {\n    return `<${value.value}> (URL)`;\n  }\n  if (isLiteral(value)) {\n    /* istanbul ignore if: thingAsMarkdown always instantiates a NamedNode, so we can't hit this code path in tests. */\n    if (!isNamedNode(value.datatype)) {\n      return `[${value.value}] (RDF/JS Literal of unknown type)`;\n    }\n    let val;\n    switch (value.datatype.value) {\n      case xmlSchemaTypes.boolean:\n        val = (_b = (_a = deserializeBoolean(value.value)) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : `Invalid data: \\`${value.value}\\``;\n        return `${val} (boolean)`;\n      case xmlSchemaTypes.dateTime:\n        val = (_d = (_c = deserializeDatetime(value.value)) === null || _c === void 0 ? void 0 : _c.toUTCString()) !== null && _d !== void 0 ? _d : `Invalid data: \\`${value.value}\\``;\n        return `${val} (datetime)`;\n      case xmlSchemaTypes.decimal:\n        val = (_f = (_e = deserializeDecimal(value.value)) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : `Invalid data: \\`${value.value}\\``;\n        return `${val} (decimal)`;\n      case xmlSchemaTypes.integer:\n        val = (_h = (_g = deserializeInteger(value.value)) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : `Invalid data: \\`${value.value}\\``;\n        return `${val} (integer)`;\n      case xmlSchemaTypes.langString:\n        return `\"${value.value}\" (${value.language} string)`;\n      case xmlSchemaTypes.string:\n        return `\"${value.value}\" (string)`;\n      default:\n        return `[${value.value}] (RDF/JS Literal of type: \\`${value.datatype.value}\\`)`;\n    }\n  }\n  /* istanbul ignore else: thingAsMarkdown doesn't generate other Nodes, so we can't hit this path in tests. */\n  if (value.termType === \"BlankNode\") {\n    return `[${value.value}] (RDF/JS BlankNode)`;\n  }\n  /* istanbul ignore next: thingAsMarkdown doesn't generate Quad Nodes, so we can't hit this path in tests. */\n  if (value.termType === \"Quad\") {\n    return `??? (nested RDF* Quad)`;\n  }\n  /* istanbul ignore else: The if statements are exhaustive; if not, TypeScript will complain. */\n  /* istanbul ignore next: thingAsMarkdown doesn't generate Variable Nodes, so we can't hit this path in tests. */\n  if (value.termType === \"Variable\") {\n    return `?${value.value} (RDF/JS Variable)`;\n  }\n  /* istanbul ignore next: The if statements are exhaustive; if not, TypeScript will complain. */\n  return value;\n}\n/**\r\n * @hidden\r\n */\nfunction internal_throwIfNotThing(thing) {\n  if (!isThing(thing)) {\n    throw new ThingExpectedError(thing);\n  }\n}\n/**\r\n * @hidden\r\n * @param solidDataset\r\n */\nfunction internal_addAdditionsToChangeLog(solidDataset, additions) {\n  const changeLog = hasChangelog(solidDataset) ? solidDataset.internal_changeLog : /* istanbul ignore next: This function always gets called after addDeletionsToChangeLog, so the ChangeLog always already exists in tests: */\n  {\n    additions: [],\n    deletions: []\n  };\n  const [newAdditions, newDeletions] = additions.filter(addition => !containsBlankNode(addition)).reduce((_ref2, addition) => {\n    let [additionsAcc, deletionsAcc] = _ref2;\n    const existingDeletion = deletionsAcc.find(deletion => deletion.equals(addition));\n    if (typeof existingDeletion !== \"undefined\") {\n      return [additionsAcc, deletionsAcc.filter(deletion => !deletion.equals(addition))];\n    }\n    return [additionsAcc.concat(addition), deletionsAcc];\n  }, [changeLog.additions, changeLog.deletions]);\n  return freeze(Object.assign(Object.assign({}, solidDataset), {\n    internal_changeLog: {\n      additions: newAdditions,\n      deletions: newDeletions\n    }\n  }));\n}\n/**\r\n * @hidden\r\n * @param solidDataset\r\n */\nfunction internal_addDeletionsToChangeLog(solidDataset, deletions) {\n  const changeLog = hasChangelog(solidDataset) ? solidDataset.internal_changeLog : {\n    additions: [],\n    deletions: []\n  };\n  const [newAdditions, newDeletions] = deletions.filter(deletion => !containsBlankNode(deletion)).reduce((_ref3, deletion) => {\n    let [additionsAcc, deletionsAcc] = _ref3;\n    const existingAddition = additionsAcc.find(addition => addition.equals(deletion));\n    if (typeof existingAddition !== \"undefined\") {\n      return [additionsAcc.filter(addition => !addition.equals(deletion)), deletionsAcc];\n    }\n    return [additionsAcc, deletionsAcc.concat(deletion)];\n  }, [changeLog.additions, changeLog.deletions]);\n  return freeze(Object.assign(Object.assign({}, solidDataset), {\n    internal_changeLog: {\n      additions: newAdditions,\n      deletions: newDeletions\n    }\n  }));\n}\n/**\r\n * Enforces the presence of a Changelog for a given dataset. If a changelog is\r\n * already present, it is unchanged. Otherwise, an empty changelog is created.\r\n * @hidden\r\n * @param solidDataset\r\n */\nfunction internal_withChangeLog(solidDataset) {\n  const newSolidDataset = hasChangelog(solidDataset) ? solidDataset : freeze(Object.assign(Object.assign({}, solidDataset), {\n    internal_changeLog: {\n      additions: [],\n      deletions: []\n    }\n  }));\n  return newSolidDataset;\n}\n/**\r\n * We don't currently support reading and writing Blank Nodes, so this function can be used to skip those Quads.\r\n *\r\n * This is needed because we cannot reconcile Blank Nodes in additions and\r\n * deletions. Down the road, we should do a diff before saving a SolidDataset\r\n * against a saved copy of the originally-fetched one, based on our own data\r\n * structures, which should make it easier to reconcile.\r\n */\nfunction containsBlankNode(quad) {\n  return quad.subject.termType === \"BlankNode\" || quad.object.termType === \"BlankNode\";\n}\n\n//\n/**\r\n * Returns the URLs of all Properties that the given [[Thing ]]has values for.b\r\n *\r\n * @param thing The [[Thing]] of which to get that Property URLs that have a value.\r\n * @returns The URLs of the Properties for which values are defined for the given Thing.\r\n * @hidden This is an advanced API that should not be needed for most Solid use cases. If you do find yourself needing this, please file a feature request sharing your use case.\r\n */\nfunction getPropertyAll(thing) {\n  return Object.keys(thing.predicates).filter(predicate => getTerm(thing, predicate) !== null);\n}\n/**\r\n * Returns the URL value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type URL, returns null.\r\n * If the Property has multiple URL values, returns one of its URL values.\r\n *\r\n * @param thing The [[Thing]] to read a URL value from.\r\n * @param property The Property whose URL value to return.\r\n * @returns A URL value for the given Property if present, or null if the Property is not present or the value is not of type URL.\r\n */\nfunction getUrl(thing, property) {\n  var _a, _b, _c;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateUrl = internal_toIriString(property);\n  const firstUrl = (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : null;\n  if (firstUrl === null) {\n    return null;\n  }\n  return isLocalNodeIri(firstUrl) ? `#${getLocalNodeName(firstUrl)}` : firstUrl;\n}\n/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */\nconst getIri = getUrl;\n/**\r\n * Returns the URL values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type URL, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the URL values from.\r\n * @param property The Property whose URL values to return.\r\n * @returns An array of URL values for the given Property.\r\n */\nfunction getUrlAll(thing, property) {\n  var _a, _b, _c;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateUrl = internal_toIriString(property);\n  return (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.map(iri => isLocalNodeIri(iri) ? `#${getLocalNodeName(iri)}` : iri)) !== null && _c !== void 0 ? _c : [];\n}\n/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */\nconst getIriAll = getUrlAll;\n/**\r\n * Returns the boolean value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type boolean, returns null.\r\n * If the Property has multiple boolean values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a boolean value from.\r\n * @param property The Property whose boolean value to return.\r\n * @returns A boolean value for the given Property if present, or null if the Property is not present or the value is not of type boolean.\r\n */\nfunction getBoolean(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);\n  if (literalString === null) {\n    return null;\n  }\n  return deserializeBoolean(literalString);\n}\n/**\r\n * Returns the boolean values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type boolean, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the boolean values from.\r\n * @param property The Property whose boolean values to return.\r\n * @returns An array of boolean values for the given Property.\r\n */\nfunction getBooleanAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);\n  return literalStrings.map(deserializeBoolean).filter(possibleBoolean => possibleBoolean !== null);\n}\n/**\r\n * Returns the datetime value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type datetime, returns null.\r\n * If the Property has multiple datetime values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a datetime value from.\r\n * @param property The Property whose datetime value to return.\r\n * @returns A datetime value for the given Property if present, or null if the Property is not present or the value is not of type datetime.\r\n */\nfunction getDatetime(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);\n  if (literalString === null) {\n    return null;\n  }\n  return deserializeDatetime(literalString);\n}\n/**\r\n * Returns the datetime values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type datetime, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the datetime values from.\r\n * @param property The Property whose datetime values to return.\r\n * @returns An array of datetime values for the given Property.\r\n */\nfunction getDatetimeAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);\n  return literalStrings.map(deserializeDatetime).filter(potentialDatetime => potentialDatetime !== null);\n}\n/**\r\n * Returns the date value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type date, returns null.\r\n * If the Property has multiple date values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a date value from.\r\n * @param property The Property whose date value to return.\r\n * @returns A date value for the given Property if present, or null if the Property is not present or the value is not of type date.\r\n * @since 1.10.0\r\n */\nfunction getDate(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.date);\n  if (literalString === null) {\n    return null;\n  }\n  return deserializeDate(literalString);\n}\n/**\r\n * Returns the date values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type date, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the date values from.\r\n * @param property The Property whose date values to return.\r\n * @returns An array of date values for the given Property.\r\n * @since 1.10.0\r\n */\nfunction getDateAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.date);\n  return literalStrings.map(deserializeDate).filter(potentialDate => potentialDate !== null);\n}\n/**\r\n * Returns the time value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type time, returns null.\r\n * If the Property has multiple time values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a time value from.\r\n * @param property The Property whose time value to return.\r\n * @returns A time value for the given Property if present, or null if the Property is not present or the value is not of type time.\r\n * @since 1.10.0\r\n */\nfunction getTime(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.time);\n  if (literalString === null) {\n    return null;\n  }\n  return deserializeTime(literalString);\n}\n/**\r\n * Returns the time values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type time, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the time values from.\r\n * @param property The Property whose time values to return.\r\n * @returns An array of time values for the given Property.\r\n * @since 1.10.0\r\n */\nfunction getTimeAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.time);\n  return literalStrings.map(deserializeTime).filter(potentialTime => potentialTime !== null);\n}\n/**\r\n * Returns the decimal value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type decimal, returns null.\r\n * If the Property has multiple decimal values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a decimal value from.\r\n * @param property The Property whose decimal value to return.\r\n * @returns A decimal value for the given Property if present, or null if the Property is not present or the value is not of type decimal.\r\n */\nfunction getDecimal(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);\n  if (literalString === null) {\n    return null;\n  }\n  return deserializeDecimal(literalString);\n}\n/**\r\n * Returns the decimal values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type decimal, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the decimal values from.\r\n * @param property The Property whose decimal values to return.\r\n * @returns An array of decimal values for the given Property.\r\n */\nfunction getDecimalAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);\n  return literalStrings.map(literalString => deserializeDecimal(literalString)).filter(potentialDecimal => potentialDecimal !== null);\n}\n/**\r\n * Returns the integer value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type integer, returns null.\r\n * If the Property has multiple integer values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read an integer value from.\r\n * @param property The Property whose integer value to return.\r\n * @returns A integer value for the given Property if present, or null if the Property is not present or the value is not of type datetime.\r\n */\nfunction getInteger(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);\n  if (literalString === null) {\n    return null;\n  }\n  return deserializeInteger(literalString);\n}\n/**\r\n * Returns the integer values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type integer, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the integer values from.\r\n * @param property The Property whose integer values to return.\r\n * @returns An array of integer values for the given Property.\r\n */\nfunction getIntegerAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);\n  return literalStrings.map(literalString => deserializeInteger(literalString)).filter(potentialInteger => potentialInteger !== null);\n}\n/**\r\n * Returns the English (language tag \"en\") string value of the specified Property from a [[Thing]].\r\n * If the Property is not present as a string in English, returns null.\r\n * If the Property has multiple English string values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @returns An English string value for the given Property if present, or null otherwise.\r\n * @since 1.13.0\r\n */\nfunction getStringEnglish(thing, property) {\n  return getStringWithLocale(thing, property, \"en\");\n}\n/**\r\n * Returns the localized string value of the specified Property from a [[Thing]].\r\n * If the Property is not present as a string in the specified locale, returns null.\r\n * If the Property has multiple string values for the specified locale, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @param locale The desired locale for the string value.\r\n * @returns A localised string value for the given Property if present in the specified `locale`, or null otherwise.\r\n */\nfunction getStringWithLocale(thing, property, locale) {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\n  const existingLocales = Object.keys(langStrings);\n  const matchingLocale = existingLocales.find(existingLocale => existingLocale.toLowerCase() === locale.toLowerCase() && Array.isArray(langStrings[existingLocale]) && langStrings[existingLocale].length > 0);\n  return typeof matchingLocale === \"string\" ? langStrings[matchingLocale][0] : null;\n}\n/**\r\n * Returns the English (language tag \"en\") string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not an English string, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @returns An array of English string values for the given Property.\r\n */\nfunction getStringEnglishAll(thing, property) {\n  return getStringWithLocaleAll(thing, property, \"en\");\n}\n/**\r\n * Returns the localized string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not a string of the specified locale, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The Property whose localised string values to return.\r\n * @param locale The desired locale for the string values.\r\n * @returns An array of localised string values for the given Property.\r\n */\nfunction getStringWithLocaleAll(thing, property, locale) {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\n  const existingLocales = Object.keys(langStrings);\n  const matchingLocale = existingLocales.find(existingLocale => existingLocale.toLowerCase() === locale.toLowerCase() && Array.isArray(langStrings[existingLocale]) && langStrings[existingLocale].length > 0);\n  return typeof matchingLocale === \"string\" ? [...langStrings[matchingLocale]] : [];\n}\n/**\r\n * Returns all localized string values mapped by the locales for the specified property from the\r\n * specified [[Thing]] (explicitly filters out non-language string literals).\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The Property whose localised string values to return.\r\n * @returns A Map of objects, keyed on locale with the value an array of string values (for that locale).\r\n */\nfunction getStringByLocaleAll(thing, property) {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const stringsByLocale = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\n  return new Map(Object.entries(stringsByLocale).map(_ref4 => {\n    let [locale, values] = _ref4;\n    return [locale, [...values]];\n  }));\n}\n/**\r\n * Returns the string value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type string, returns null.\r\n * If the Property has multiple string values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a string value from.\r\n * @param property The Property whose string value to return.\r\n * @returns A string value for the given Property if present, or null if the Property is not present or the value is not of type string.\r\n */\nfunction getStringNoLocale(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);\n  return literalString;\n}\n/**\r\n * Returns the string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type string, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the string values from.\r\n * @param property The Property whose string values to return.\r\n * @returns An array of string values for the given Property.\r\n */\nfunction getStringNoLocaleAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);\n  return literalStrings;\n}\n/**\r\n * @param thing The [[Thing]] to read a NamedNode value from.\r\n * @param property The given Property for which you want the NamedNode value.\r\n * @returns A NamedNode value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\nfunction getNamedNode(thing, property) {\n  const iriString = getIri(thing, property);\n  if (iriString === null) {\n    return null;\n  }\n  return DataFactory.namedNode(iriString);\n}\n/**\r\n * @param thing The [[Thing]] to read the NamedNode values from.\r\n * @param property The given Property for which you want the NamedNode values.\r\n * @returns The NamedNode values for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\nfunction getNamedNodeAll(thing, property) {\n  const iriStrings = getIriAll(thing, property);\n  return iriStrings.map(iriString => DataFactory.namedNode(iriString));\n}\n/**\r\n * @param thing The [[Thing]] to read a Literal value from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @returns A Literal value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\nfunction getLiteral(thing, property) {\n  var _a, _b, _c, _d;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\n  const locales = Object.keys(langStrings);\n  if (locales.length > 0) {\n    const nonEmptyLocale = locales.find(locale => Array.isArray(langStrings[locale]) && langStrings[locale].length > 0);\n    if (typeof nonEmptyLocale === \"string\") {\n      return DataFactory.literal(langStrings[nonEmptyLocale][0], nonEmptyLocale);\n    }\n  }\n  const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};\n  const dataTypes = Object.keys(otherLiterals);\n  if (dataTypes.length > 0) {\n    const nonEmptyDataType = dataTypes.find(dataType => Array.isArray(otherLiterals[dataType]) && otherLiterals[dataType].length > 0);\n    if (typeof nonEmptyDataType === \"string\") {\n      return DataFactory.literal(otherLiterals[nonEmptyDataType][0], DataFactory.namedNode(nonEmptyDataType));\n    }\n  }\n  return null;\n}\n/**\r\n * @param thing The [[Thing]] to read the Literal values from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @returns The Literal values for the given Property.\r\n * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\nfunction getLiteralAll(thing, property) {\n  var _a, _b, _c, _d;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  let literals = [];\n  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\n  const locales = Object.keys(langStrings);\n  for (const locale of locales) {\n    const stringsInLocale = langStrings[locale];\n    const localeLiterals = stringsInLocale.map(langString => DataFactory.literal(langString, locale));\n    literals = literals.concat(localeLiterals);\n  }\n  const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};\n  const dataTypes = Object.keys(otherLiterals);\n  for (const dataType of dataTypes) {\n    const values = otherLiterals[dataType];\n    const typeNode = DataFactory.namedNode(dataType);\n    const dataTypeLiterals = values.map(value => DataFactory.literal(value, typeNode));\n    literals = literals.concat(dataTypeLiterals);\n  }\n  return literals;\n}\n/**\r\n * @param thing The [[Thing]] to read a raw RDF/JS value from.\r\n * @param property The given Property for which you want the raw value.\r\n * @returns A Term for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\nfunction getTerm(thing, property) {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  const namedNode = getNamedNode(thing, property);\n  if (namedNode !== null) {\n    return namedNode;\n  }\n  const literal = getLiteral(thing, property);\n  if (literal !== null) {\n    return literal;\n  }\n  const predicateIri = internal_toIriString(property);\n  const blankNodes = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];\n  if (blankNodes.length > 0) {\n    const blankNodeValue = isBlankNodeId(blankNodes[0]) ? getBlankNodeValue(blankNodes[0]) : undefined;\n    return DataFactory.blankNode(blankNodeValue);\n  }\n  return null;\n}\n/**\r\n * @param thing The [[Thing]] to read the raw RDF/JS values from.\r\n * @param property The given Property for which you want the raw values.\r\n * @returns The Terms for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\nfunction getTermAll(thing, property) {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  const namedNodes = getNamedNodeAll(thing, property);\n  const literals = getLiteralAll(thing, property);\n  const predicateIri = internal_toIriString(property);\n  const blankNodeValues = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];\n  const blankNodes = blankNodeValues.map(rawBlankNode => {\n    const blankNodeName = isBlankNodeId(rawBlankNode) ? getBlankNodeValue(rawBlankNode) : undefined;\n    return DataFactory.blankNode(blankNodeName);\n  });\n  const terms = namedNodes.concat(literals).concat(blankNodes);\n  return terms;\n}\n/**\r\n * @param thing The [Thing]] to read a Literal of the given type from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified value for the given Property and type, if present, or null otherwise.\r\n */\nfunction getLiteralOfType(thing, property, literalType) {\n  var _a, _b, _c, _d;\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  return (_d = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : null;\n}\n/**\r\n * @param thing The [Thing]] to read the Literals of the given type from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified values for the given Property and type.\r\n */\nfunction getLiteralAllOfType(thing, property, literalType) {\n  var _a, _b, _c;\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const literalsOfType = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) !== null && _c !== void 0 ? _c : [];\n  return [...literalsOfType];\n}\n\n//\n/**\r\n * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.\r\n * @param thingUrl The URL of the desired [[Thing]].\r\n * @param options Not yet implemented.\r\n */\nfunction getThing(solidDataset, thingUrl) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  if (!internal_isValidUrl(thingUrl)) {\n    throw new ValidThingUrlExpectedError(thingUrl);\n  }\n  const graph = typeof options.scope !== \"undefined\" ? internal_toIriString(options.scope) : \"default\";\n  const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};\n  const thingIri = internal_toIriString(thingUrl);\n  const resolvedThingIri = isLocalNodeIri(thingIri) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thingIri), getSourceUrl(solidDataset)) : thingIri;\n  const thing = thingsByIri[resolvedThingIri];\n  if (typeof thing === \"undefined\") {\n    return null;\n  }\n  return thing;\n}\n/**\r\n * Get all [[Thing]]s in a [[SolidDataset]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.\r\n * @param options Not yet implemented.\r\n */\nfunction getThingAll(solidDataset) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    acceptBlankNodes: false\n  };\n  var _a;\n  const graph = typeof options.scope !== \"undefined\" ? internal_toIriString(options.scope) : \"default\";\n  const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};\n  return Object.values(thingsByIri).filter(thing => !isBlankNodeId(thing.url) || options.acceptBlankNodes);\n}\n/**\r\n * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.\r\n *\r\n * @param solidDataset The SolidDataset to insert a Thing into.\r\n * @param thing The Thing to insert into the given SolidDataset.\r\n * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.\r\n */\nfunction setThing(solidDataset, thing) {\n  var _a;\n  const thingIri = isThingLocal(thing) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thing.url), getSourceUrl(solidDataset)) : thing.url;\n  const defaultGraph = solidDataset.graphs.default;\n  const updatedDefaultGraph = freeze(Object.assign(Object.assign({}, defaultGraph), {\n    [thingIri]: freeze(Object.assign(Object.assign({}, thing), {\n      url: thingIri\n    }))\n  }));\n  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {\n    default: updatedDefaultGraph\n  }));\n  const subjectNode = DataFactory.namedNode(thingIri);\n  const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;\n  const deletions = typeof deletedThingPredicates !== \"undefined\" ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph()) : [];\n  const additions = subjectToRdfJsQuads(thing.predicates, subjectNode, DataFactory.defaultGraph());\n  return internal_addAdditionsToChangeLog(internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), {\n    graphs: updatedGraphs\n  })), deletions), additions);\n}\n/**\r\n * Remove a Thing from a SolidDataset.\r\n *\r\n * @param solidDataset The SolidDataset to remove a Thing from.\r\n * @param thing The Thing to remove from `solidDataset`.\r\n * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.\r\n */\nfunction removeThing(solidDataset, thing) {\n  var _a;\n  let thingIri;\n  if (isNamedNode(thing)) {\n    thingIri = thing.value;\n  } else if (typeof thing === \"string\") {\n    thingIri = isLocalNodeIri(thing) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thing), getSourceUrl(solidDataset)) : thing;\n  } else if (isThingLocal(thing)) {\n    thingIri = thing.url;\n  } else {\n    thingIri = asIri(thing);\n  }\n  const defaultGraph = solidDataset.graphs.default;\n  const updatedDefaultGraph = Object.assign({}, defaultGraph);\n  delete updatedDefaultGraph[thingIri];\n  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {\n    default: freeze(updatedDefaultGraph)\n  }));\n  const subjectNode = DataFactory.namedNode(thingIri);\n  const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;\n  const deletions = typeof deletedThingPredicates !== \"undefined\" ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph()) : [];\n  return internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), {\n    graphs: updatedGraphs\n  })), deletions);\n}\nfunction createThing() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a;\n  if (typeof options.url !== \"undefined\") {\n    const {\n      url\n    } = options;\n    if (!internal_isValidUrl(url)) {\n      throw new ValidThingUrlExpectedError(url);\n    }\n    const thing = freeze({\n      type: \"Subject\",\n      predicates: freeze({}),\n      url\n    });\n    return thing;\n  }\n  const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();\n  const localNodeIri = getLocalNodeIri(name);\n  const thing = freeze({\n    type: \"Subject\",\n    predicates: freeze({}),\n    url: localNodeIri\n  });\n  return thing;\n}\n/**\r\n * @param input An value that might be a [[Thing]].\r\n * @returns Whether `input` is a Thing.\r\n * @since 0.2.0\r\n */\nfunction isThing(input) {\n  return typeof input === \"object\" && input !== null && typeof input.type === \"string\" && input.type === \"Subject\";\n}\nfunction asUrl(thing, baseUrl) {\n  if (isThingLocal(thing)) {\n    if (typeof baseUrl === \"undefined\") {\n      throw new Error(\"The URL of a Thing that has not been persisted cannot be determined without a base URL.\");\n    }\n    return resolveLocalIri(getLocalNodeName(thing.url), baseUrl);\n  }\n  return thing.url;\n}\n/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */\nconst asIri = asUrl;\n/**\r\n * Gets a human-readable representation of the given Thing to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param thing The Thing to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\nfunction thingAsMarkdown(thing) {\n  let thingAsMarkdown = \"\";\n  if (isThingLocal(thing)) {\n    thingAsMarkdown += `## Thing (no URL yet — identifier: \\`#${getLocalNodeName(thing.url)}\\`)\\n`;\n  } else {\n    thingAsMarkdown += `## Thing: ${thing.url}\\n`;\n  }\n  const predicateIris = Object.keys(thing.predicates);\n  if (predicateIris.length === 0) {\n    thingAsMarkdown += \"\\n<empty>\\n\";\n  } else {\n    for (const predicate of predicateIris) {\n      thingAsMarkdown += `\\nProperty: ${predicate}\\n`;\n      const values = getTermAll(thing, predicate);\n      thingAsMarkdown += values.reduce((acc, value) => {\n        return `${acc}- ${internal_getReadableValue(value)}\\n`;\n      }, \"\");\n    }\n  }\n  return thingAsMarkdown;\n}\n/**\r\n * @param thing The [[Thing]] of which a URL might or might not be known.\r\n * @return `true` if `thing` has no known URL yet.\r\n * @since 1.7.0\r\n */\nfunction isThingLocal(thing) {\n  return isLocalNodeIri(thing.url);\n}\n/**\r\n * This error is thrown when a function expected to receive a [[Thing]] but received something else.\r\n * @since 1.2.0\r\n */\nclass ThingExpectedError extends SolidClientError {\n  constructor(receivedValue) {\n    const message = `Expected a Thing, but received: [${receivedValue}].`;\n    super(message);\n    this.receivedValue = receivedValue;\n  }\n}\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a property but received something else.\r\n */\nclass ValidPropertyUrlExpectedError extends SolidClientError {\n  constructor(receivedValue) {\n    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;\n    const message = `Expected a valid URL to identify a property, but received: [${value}].`;\n    super(message);\n    this.receivedProperty = value;\n  }\n}\n/**\r\n * This error is thrown when a function expected to receive a valid URL value but received something else.\r\n */\nclass ValidValueUrlExpectedError extends SolidClientError {\n  constructor(receivedValue) {\n    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;\n    const message = `Expected a valid URL value, but received: [${value}].`;\n    super(message);\n    this.receivedValue = value;\n  }\n}\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a [[Thing]] but received something else.\r\n */\nclass ValidThingUrlExpectedError extends SolidClientError {\n  constructor(receivedValue) {\n    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;\n    const message = `Expected a valid URL to identify a Thing, but received: [${value}].`;\n    super(message);\n    this.receivedValue = value;\n  }\n}\n/**\r\n * Generate a string that can be used as the unique identifier for a Thing\r\n *\r\n * This function works by starting with a date string (so that Things can be\r\n * sorted chronologically), followed by a random number generated by taking a\r\n * random number between 0 and 1, and cutting off the `0.`.\r\n *\r\n * @internal\r\n * @returns An string that's likely to be unique\r\n */\nconst generateName = () => {\n  return Date.now().toString() + Math.random().toString().substring(\"0.\".length);\n};\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n/**\r\n * This function normalizes IRIs as managed by the server to ease accurate comparison.\r\n * @param iri\r\n * @hidden\r\n */\nfunction normalizeServerSideIri(iri) {\n  const iriObj = new URL(iri);\n  iriObj.hash = \"\";\n  return iriObj.href;\n}\n\n//\n/**\r\n * Initialise a new [[SolidDataset]] in memory.\r\n *\r\n * @returns An empty [[SolidDataset]].\r\n */\nfunction createSolidDataset() {\n  return freeze({\n    type: \"Dataset\",\n    graphs: {\n      default: {}\n    }\n  });\n}\n/**\r\n * @hidden This interface is not exposed yet until we've tried it out in practice.\r\n */\nasync function responseToSolidDataset(response) {\n  let parseOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Fetching the SolidDataset at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const resourceInfo = responseToResourceInfo(response);\n  const parsers = Object.assign({\n    \"text/turtle\": getTurtleParser()\n  }, parseOptions.parsers);\n  const contentType = getContentType$1(resourceInfo);\n  if (contentType === null) {\n    throw new Error(`Could not determine the content type of the Resource at [${getSourceUrl(resourceInfo)}].`);\n  }\n  const mimeType = contentType.split(\";\")[0];\n  const parser = parsers[mimeType];\n  if (typeof parser === \"undefined\") {\n    throw new Error(`The Resource at [${getSourceUrl(resourceInfo)}] has a MIME type of [${mimeType}], but the only parsers available are for the following MIME types: [${Object.keys(parsers).join(\", \")}].`);\n  }\n  const data = await response.text();\n  const parsingPromise = new Promise((resolve, reject) => {\n    let solidDataset = freeze({\n      graphs: freeze({\n        default: freeze({})\n      }),\n      type: \"Dataset\"\n    });\n    // While Quads without Blank Nodes can be added to the SolidDataset as we\n    // encounter them, to parse Quads with Blank Nodes, we'll have to wait until\n    // we've seen all the Quads, so that we can reconcile equal Blank Nodes.\n    const quadsWithBlankNodes = [];\n    const allQuads = [];\n    parser.onError(error => {\n      reject(new Error(`Encountered an error parsing the Resource at [${getSourceUrl(resourceInfo)}] with content type [${contentType}]: ${error}`));\n    });\n    parser.onQuad(quad => {\n      allQuads.push(quad);\n      if (quad.subject.termType === \"BlankNode\" || quad.object.termType === \"BlankNode\") {\n        // Quads with Blank Nodes will be parsed when all Quads are known,\n        // so that equal Blank Nodes can be reconciled:\n        quadsWithBlankNodes.push(quad);\n      } else {\n        solidDataset = addRdfJsQuadToDataset(solidDataset, quad);\n      }\n    });\n    parser.onComplete(async () => {\n      // If a Resource contains more than this number of Blank Nodes,\n      // we consider the detection of chains (O(n^2), I think) to be too\n      // expensive, and just incorporate them as regular Blank Nodes with\n      // non-deterministic, ad-hoc identifiers into the SolidDataset:\n      const maxBlankNodesToDetectChainsFor = 20;\n      // Some Blank Nodes only serve to use a set of Quads as the Object for a\n      // single Subject. Those Quads will be added to the SolidDataset when\n      // their Subject's Blank Node is encountered in the Object position.\n      const chainBlankNodes = quadsWithBlankNodes.length <= maxBlankNodesToDetectChainsFor ? getChainBlankNodes(quadsWithBlankNodes) : [];\n      const quadsWithoutChainBlankNodeSubjects = quadsWithBlankNodes.filter(quad => chainBlankNodes.every(chainBlankNode => !chainBlankNode.equals(quad.subject)));\n      solidDataset = quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {\n        otherQuads: allQuads,\n        chainBlankNodes\n      }), solidDataset);\n      const solidDatasetWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));\n      resolve(solidDatasetWithResourceInfo);\n    });\n    parser.parse(data, resourceInfo);\n  });\n  return parsingPromise;\n}\n/**\r\n * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).\r\n *\r\n * Note that the URL of a container ends with a [trailing slash \"/\"](https://solidproject.org/TR/protocol#uri).\r\n * If it is missing, some libraries will add it automatically, which may result in additional round-trips, possibly including\r\n * authentication errors ([more information](https://github.com/inrupt/solid-client-js/issues/1216#issuecomment-904703695)).\r\n *\r\n * @param url URL to fetch a [[SolidDataset]] from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.\r\n */\nasync function getSolidDataset(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  var _a;\n  url = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const parserContentTypes = Object.keys((_a = options.parsers) !== null && _a !== void 0 ? _a : {});\n  const acceptedContentTypes = parserContentTypes.length > 0 ? parserContentTypes.join(\", \") : \"text/turtle\";\n  const response = await config.fetch(url, {\n    headers: {\n      Accept: acceptedContentTypes\n    }\n  });\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Fetching the Resource at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const solidDataset = await responseToSolidDataset(response, options);\n  return solidDataset;\n}\n/**\r\n * Create a SPARQL UPDATE Patch request from a [[SolidDataset]] with a changelog.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PATCH request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a SPARQL UPDATE.\r\n * @hidden\r\n */\nasync function prepareSolidDatasetUpdate(solidDataset) {\n  const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0 ? `DELETE DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};` : \"\";\n  const insertStatement = solidDataset.internal_changeLog.additions.length > 0 ? `INSERT DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};` : \"\";\n  return {\n    method: \"PATCH\",\n    body: `${deleteStatement} ${insertStatement}`,\n    headers: {\n      \"Content-Type\": \"application/sparql-update\"\n    }\n  };\n}\n/**\r\n * Create a Put request to write a locally created [[SolidDataset]] to a Pod.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PUT request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a serialization of the [[SolidDataset]].\r\n * @hidden\r\n */\nasync function prepareSolidDatasetCreation(solidDataset) {\n  return {\n    method: \"PUT\",\n    body: await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes)),\n    headers: {\n      \"Content-Type\": \"text/turtle\",\n      \"If-None-Match\": \"*\",\n      Link: `<${ldp.Resource}>; rel=\"type\"`\n    }\n  };\n}\n/**\r\n * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).\r\n *\r\n * A SolidDataset keeps track of the data changes compared to the data in the Pod; i.e.,\r\n * the changelog tracks both the old value and new values of the property being modified. This\r\n * function applies the changes to the current SolidDataset. If the old value specified in the\r\n * changelog does not correspond to the value currently in the Pod, this function will throw an\r\n * error (common issues are listed in [the documentation](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/error-codes/)).\r\n *\r\n * The SolidDataset returned by this function will contain the data sent to the Pod, and a ChangeLog\r\n * up-to-date with the saved data. Note that if the data on the server was modified in between the\r\n * first fetch and saving it, the updated data will not be reflected in the returned SolidDataset.\r\n * To make sure you have the latest data, call [[getSolidDataset]] again after saving the data.\r\n *\r\n * The Solid server will create any intermediary Containers that do not exist yet, so they do not\r\n * need to be created in advance. For example, if the target URL is\r\n * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,\r\n * it will exist after this function resolves successfully.\r\n *\r\n * @param url URL to save `solidDataset` to.\r\n * @param solidDataset The [[SolidDataset]] to save.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.\r\n */\nasync function saveSolidDatasetAt(url, solidDataset) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  url = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const datasetWithChangelog = internal_withChangeLog(solidDataset);\n  const requestInit = isUpdate(datasetWithChangelog, url) ? await prepareSolidDatasetUpdate(datasetWithChangelog) : await prepareSolidDatasetCreation(datasetWithChangelog);\n  const response = await config.fetch(url, requestInit);\n  if (internal_isUnsuccessfulResponse(response)) {\n    const diagnostics = isUpdate(datasetWithChangelog, url) ? `The changes that were sent to the Pod are listed below.\\n\\n${changeLogAsMarkdown(datasetWithChangelog)}` : `The SolidDataset that was sent to the Pod is listed below.\\n\\n${solidDatasetAsMarkdown(datasetWithChangelog)}`;\n    throw new FetchError(`Storing the Resource at [${url}] failed: [${response.status}] [${response.statusText}].\\n\\n${diagnostics}`, response);\n  }\n  const resourceInfo = Object.assign(Object.assign({}, internal_parseResourceInfo(response)), {\n    isRawData: false\n  });\n  const storedDataset = freeze(Object.assign(Object.assign({}, solidDataset), {\n    internal_changeLog: {\n      additions: [],\n      deletions: []\n    },\n    internal_resourceInfo: resourceInfo\n  }));\n  const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);\n  return storedDatasetWithResolvedIris;\n}\n/**\r\n * Deletes the SolidDataset at a given URL.\r\n *\r\n * If operating on a container, the container must be empty otherwise a 409 CONFLICT will be raised.\r\n *\r\n * @param solidDataset The URL of the SolidDataset to delete or the SolidDataset itself (if it has ResourceInfo).\r\n * @since 0.6.0\r\n */\nasync function deleteSolidDataset(solidDataset) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const url = hasResourceInfo(solidDataset) ? internal_toIriString(getSourceUrl(solidDataset)) : internal_toIriString(solidDataset);\n  const response = await config.fetch(url, {\n    method: \"DELETE\"\n  });\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Deleting the SolidDataset at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n}\n/**\r\n * Create a Container at the given URL. Some content may optionally be specified,\r\n * e.g. to add metadata describing the container.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to, or because the Container already exists.\r\n *\r\n * Note that a Solid server will automatically create the necessary Containers when storing a\r\n * Resource; i.e. there is no need to call this function if it is immediately followed by\r\n * [[saveSolidDatasetAt]] or [[overwriteFile]].\r\n *\r\n * @param url URL of the empty Container that is to be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @param solidDataset Optional parameter - if provided we use this dataset as the body of the HTT request, meaning it's data is included in the Container resource.\r\n * @since 0.2.0\r\n */\nasync function createContainerAt(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  var _a;\n  url = internal_toIriString(url);\n  url = url.endsWith(\"/\") ? url : `${url}/`;\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const response = await config.fetch(url, {\n    method: \"PUT\",\n    body: config.initialContent ? await triplesToTurtle(toRdfJsQuads(config.initialContent).map(getNamedNodesForLocalNodes)) : undefined,\n    headers: {\n      Accept: \"text/turtle\",\n      \"Content-Type\": \"text/turtle\",\n      \"If-None-Match\": \"*\",\n      // This header should not be required to create a Container,\n      // but ESS currently expects it:\n      Link: `<${ldp.BasicContainer}>; rel=\"type\"`\n    }\n  });\n  if (internal_isUnsuccessfulResponse(response)) {\n    const containerType = config.initialContent === undefined ? \"empty\" : \"non-empty\";\n    throw new FetchError(`Creating the ${containerType} Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const resourceInfo = internal_parseResourceInfo(response);\n  const containerDataset = freeze(Object.assign(Object.assign({}, (_a = options.initialContent) !== null && _a !== void 0 ? _a : createSolidDataset()), {\n    internal_changeLog: {\n      additions: [],\n      deletions: []\n    },\n    internal_resourceInfo: resourceInfo\n  }));\n  return containerDataset;\n}\nfunction isSourceIriEqualTo(dataset, iri) {\n  return normalizeServerSideIri(dataset.internal_resourceInfo.sourceIri) === normalizeServerSideIri(iri);\n}\nfunction isUpdate(solidDataset, url) {\n  return hasChangelog(solidDataset) && hasResourceInfo(solidDataset) && typeof solidDataset.internal_resourceInfo.sourceIri === \"string\" && isSourceIriEqualTo(solidDataset, url);\n}\n/**\r\n * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.\r\n *\r\n * The Container at the given URL should already exist; if it does not, you can initialise it first\r\n * using [[createContainerAt]], or directly save the SolidDataset at the desired location using\r\n * [[saveSolidDatasetAt]].\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[saveSolidDatasetAt]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param containerUrl URL of the Container in which to create a new Resource.\r\n * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the saved data. The Promise rejects if the save failed.\r\n */\nasync function saveSolidDatasetInContainer(containerUrl, solidDataset) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  containerUrl = internal_toIriString(containerUrl);\n  const rawTurtle = await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes));\n  const headers = {\n    \"Content-Type\": \"text/turtle\",\n    Link: `<${ldp.Resource}>; rel=\"type\"`\n  };\n  if (options.slugSuggestion) {\n    headers.slug = options.slugSuggestion;\n  }\n  const response = await config.fetch(containerUrl, {\n    method: \"POST\",\n    body: rawTurtle,\n    headers\n  });\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Storing the Resource in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].\\n\\n` + `The SolidDataset that was sent to the Pod is listed below.\\n\\n${solidDatasetAsMarkdown(solidDataset)}`, response);\n  }\n  const internalResourceInfo = internal_parseResourceInfo(response);\n  if (!internalResourceInfo.location) {\n    throw new Error(\"Could not determine the location of the newly saved SolidDataset.\");\n  }\n  let resourceIri;\n  try {\n    // Try to parse the location header as a URL (safe if it's an absolute URL)``\n    // This should help determine the container URL if normalisation happened on the server side.\n    resourceIri = new URL(internalResourceInfo.location).href;\n  } catch (e) {\n    // If it's a relative URL then, rely on the response.url to construct the sourceIri\n    resourceIri = new URL(internalResourceInfo.location, response.url).href;\n  }\n  const resourceInfo = {\n    internal_resourceInfo: {\n      isRawData: false,\n      sourceIri: resourceIri\n    }\n  };\n  const resourceWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));\n  const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);\n  return resourceWithResolvedIris;\n}\n/**\r\n * Create an empty Container inside the Container at the given URL.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to.\r\n *\r\n * The Container in which to create the new Container should itself already exist.\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[createContainerAt]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param containerUrl URL of the Container in which the empty Container is to\r\n * be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch`\r\n * function to make the HTTP request, compatible with the browser-native [fetch\r\n * API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).`options.slugSuggestion`\r\n * accepts a string for your new Container's name.\r\n * @returns A promise that resolves to a SolidDataset with ResourceInfo if\r\n * successful, and that rejects otherwise.\r\n * @since 0.2.0\r\n */\nasync function createContainerInContainer(containerUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  containerUrl = internal_toIriString(containerUrl);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const headers = {\n    \"Content-Type\": \"text/turtle\",\n    Link: `<${ldp.BasicContainer}>; rel=\"type\"`\n  };\n  if (options.slugSuggestion) {\n    headers.slug = options.slugSuggestion;\n  }\n  const response = await config.fetch(containerUrl, {\n    method: \"POST\",\n    headers\n  });\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Creating an empty Container in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n  const internalResourceInfo = internal_parseResourceInfo(response);\n  if (!internalResourceInfo.location) {\n    throw new Error(\"Could not determine the location of the newly created Container.\");\n  }\n  try {\n    // Try to parse the location header as a URL (safe if it's an absolute URL)``\n    // This should help determine the container URL if normalisation happened on the server side.\n    const sourceIri = new URL(internalResourceInfo.location).toString();\n    return freeze(Object.assign(Object.assign({}, createSolidDataset()), {\n      internal_resourceInfo: Object.assign(Object.assign({}, internalResourceInfo), {\n        sourceIri\n      })\n    }));\n  } catch (e) {\n    // If it's a relative URL then, rely on the response.url to construct the sourceIri\n  }\n  return freeze(Object.assign(Object.assign({}, createSolidDataset()), {\n    internal_resourceInfo: Object.assign(Object.assign({}, internalResourceInfo), {\n      sourceIri: new URL(internalResourceInfo.location, response.url).href\n    })\n  }));\n}\n/**\r\n * Deletes the Container at a given URL.\r\n *\r\n * @param container The URL of the Container to delete or the Container Dataset itself (if it has ResourceInfo).\r\n * @since 0.6.0\r\n */\nasync function deleteContainer(container) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const url = hasResourceInfo(container) ? internal_toIriString(getSourceUrl(container)) : internal_toIriString(container);\n  if (!isContainer(container)) {\n    throw new Error(`You're trying to delete the Container at [${url}], but Container URLs should end in a \\`/\\`. Are you sure this is a Container?`);\n  }\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const response = await config.fetch(url, {\n    method: \"DELETE\"\n  });\n  if (internal_isUnsuccessfulResponse(response)) {\n    throw new FetchError(`Deleting the Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\n  }\n}\n/**\r\n * Given a [[SolidDataset]] representing a Container (see [[isContainer]]), fetch the URLs of all\r\n * contained resources.\r\n * If the solidDataset given is not a container, or is missing resourceInfo, throw an error.\r\n *\r\n * @param solidDataset The container from which to fetch all contained Resource URLs.\r\n * @returns A list of URLs, each of which points to a contained Resource of the given SolidDataset.\r\n * @since 1.3.0\r\n */\nfunction getContainedResourceUrlAll(solidDataset) {\n  const container = getThing(solidDataset, getSourceUrl(solidDataset));\n  // See https://www.w3.org/TR/2015/REC-ldp-20150226/#h-ldpc-http_post:\n  // > a containment triple MUST be added to the state of the LDPC whose subject is the LDPC URI,\n  // > whose predicate is ldp:contains and whose object is the URI for the newly created document\n  return container !== null ? getIriAll(container, ldp.contains) : [];\n}\n/**\r\n * Gets a human-readable representation of the given SolidDataset to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\nfunction solidDatasetAsMarkdown(solidDataset) {\n  let readableSolidDataset = \"\";\n  if (hasResourceInfo(solidDataset)) {\n    readableSolidDataset += `# SolidDataset: ${getSourceUrl(solidDataset)}\\n`;\n  } else {\n    readableSolidDataset += `# SolidDataset (no URL yet)\\n`;\n  }\n  const things = getThingAll(solidDataset);\n  if (things.length === 0) {\n    readableSolidDataset += \"\\n<empty>\\n\";\n  } else {\n    things.forEach(thing => {\n      readableSolidDataset += `\\n${thingAsMarkdown(thing)}`;\n      if (hasChangelog(solidDataset)) {\n        readableSolidDataset += `\\n${getReadableChangeLogSummary(solidDataset, thing)}\\n`;\n      }\n    });\n  }\n  return readableSolidDataset;\n}\n/**\r\n * Gets a human-readable representation of the local changes to a Resource to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The Resource of which to get a human-readable representation of the changes applied to it locally.\r\n * @since 0.3.0\r\n */\nfunction changeLogAsMarkdown(solidDataset) {\n  if (!hasResourceInfo(solidDataset)) {\n    return \"This is a newly initialized SolidDataset, so there is no source to compare it to.\";\n  }\n  if (!hasChangelog(solidDataset) || solidDataset.internal_changeLog.additions.length === 0 && solidDataset.internal_changeLog.deletions.length === 0) {\n    return `## Changes compared to ${getSourceUrl(solidDataset)}\\n\\n` + `This SolidDataset has not been modified since it was fetched from ${getSourceUrl(solidDataset)}.\\n`;\n  }\n  let readableChangeLog = `## Changes compared to ${getSourceUrl(solidDataset)}\\n`;\n  const changeLogsByThingAndProperty = sortChangeLogByThingAndProperty(solidDataset);\n  Object.keys(changeLogsByThingAndProperty).forEach(thingUrl => {\n    readableChangeLog += `\\n### Thing: ${thingUrl}\\n`;\n    const changeLogByProperty = changeLogsByThingAndProperty[thingUrl];\n    Object.keys(changeLogByProperty).forEach(propertyUrl => {\n      readableChangeLog += `\\nProperty: ${propertyUrl}\\n`;\n      const {\n        deleted\n      } = changeLogByProperty[propertyUrl];\n      const {\n        added\n      } = changeLogByProperty[propertyUrl];\n      if (deleted.length > 0) {\n        readableChangeLog += \"- Removed:\\n\";\n        readableChangeLog += deleted.reduce((acc, deletedValue) => {\n          return `${acc}  - ${internal_getReadableValue(deletedValue)}\\n`;\n        }, \"\");\n      }\n      if (added.length > 0) {\n        readableChangeLog += \"- Added:\\n\";\n        readableChangeLog += added.reduce((acc, addedValue) => {\n          return `${acc}  - ${internal_getReadableValue(addedValue)}\\n`;\n        }, \"\");\n      }\n    });\n  });\n  return readableChangeLog;\n}\nfunction sortChangeLogByThingAndProperty(solidDataset) {\n  const changeLogsByThingAndProperty = {};\n  solidDataset.internal_changeLog.deletions.forEach(deletion => {\n    var _a, _b;\n    var _c;\n    const subjectNode = isLocalNode(deletion.subject) ? /* istanbul ignore next: Unsaved deletions should be removed from the additions list instead, so this code path shouldn't be hit: */\n    resolveIriForLocalNode(deletion.subject, getSourceUrl(solidDataset)) : deletion.subject;\n    if (!isNamedNode(subjectNode) || !isNamedNode(deletion.predicate)) {\n      return;\n    }\n    const thingUrl = internal_toIriString(subjectNode);\n    const propertyUrl = internal_toIriString(deletion.predicate);\n    (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : changeLogsByThingAndProperty[thingUrl] = {};\n    (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : _c[propertyUrl] = {\n      added: [],\n      deleted: []\n    };\n    changeLogsByThingAndProperty[thingUrl][propertyUrl].deleted.push(deletion.object);\n  });\n  solidDataset.internal_changeLog.additions.forEach(addition => {\n    var _a, _b;\n    var _c;\n    const subjectNode = isLocalNode(addition.subject) ? /* istanbul ignore next: setThing already resolves local Subjects when adding them, so this code path should never be hit. */\n    resolveIriForLocalNode(addition.subject, getSourceUrl(solidDataset)) : addition.subject;\n    if (!isNamedNode(subjectNode) || !isNamedNode(addition.predicate)) {\n      return;\n    }\n    const thingUrl = internal_toIriString(subjectNode);\n    const propertyUrl = internal_toIriString(addition.predicate);\n    (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : changeLogsByThingAndProperty[thingUrl] = {};\n    (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : _c[propertyUrl] = {\n      added: [],\n      deleted: []\n    };\n    changeLogsByThingAndProperty[thingUrl][propertyUrl].added.push(addition.object);\n  });\n  return changeLogsByThingAndProperty;\n}\nfunction getReadableChangeLogSummary(solidDataset, thing) {\n  const subject = DataFactory.namedNode(thing.url);\n  const nrOfAdditions = solidDataset.internal_changeLog.additions.reduce((count, addition) => addition.subject.equals(subject) ? count + 1 : count, 0);\n  const nrOfDeletions = solidDataset.internal_changeLog.deletions.reduce((count, deletion) => deletion.subject.equals(subject) ? count + 1 : count, 0);\n  const additionString = nrOfAdditions === 1 ? \"1 new value added\" : `${nrOfAdditions} new values added`;\n  const deletionString = nrOfDeletions === 1 ? \"1 value removed\" : `${nrOfDeletions} values removed`;\n  return `(${additionString} / ${deletionString})`;\n}\nfunction getNamedNodesForLocalNodes(quad) {\n  const subject = isNamedNode(quad.subject) ? getNamedNodeFromLocalNode(quad.subject) : /* istanbul ignore next: We don't allow non-NamedNodes as the Subject, so this code path should never be hit: */\n  quad.subject;\n  const object = isNamedNode(quad.object) ? getNamedNodeFromLocalNode(quad.object) : quad.object;\n  return DataFactory.quad(subject, quad.predicate, object, quad.graph);\n}\nfunction getNamedNodeFromLocalNode(node) {\n  if (isLocalNodeIri(node.value)) {\n    return DataFactory.namedNode(`#${getLocalNodeName(node.value)}`);\n  }\n  return node;\n}\nfunction resolveLocalIrisInSolidDataset(solidDataset) {\n  const resourceIri = getSourceUrl(solidDataset);\n  const defaultGraph = solidDataset.graphs.default;\n  const thingIris = Object.keys(defaultGraph);\n  const updatedDefaultGraph = thingIris.reduce((graphAcc, thingIri) => {\n    const resolvedThing = resolveLocalIrisInThing(graphAcc[thingIri], resourceIri);\n    const resolvedThingIri = isLocalNodeIri(thingIri) ? `${resourceIri}#${getLocalNodeName(thingIri)}` : thingIri;\n    const updatedGraph = Object.assign({}, graphAcc);\n    delete updatedGraph[thingIri];\n    updatedGraph[resolvedThingIri] = resolvedThing;\n    return freeze(updatedGraph);\n  }, defaultGraph);\n  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {\n    default: updatedDefaultGraph\n  }));\n  return freeze(Object.assign(Object.assign({}, solidDataset), {\n    graphs: updatedGraphs\n  }));\n}\nfunction resolveLocalIrisInThing(thing, baseIri) {\n  const predicateIris = Object.keys(thing.predicates);\n  const updatedPredicates = predicateIris.reduce((predicatesAcc, predicateIri) => {\n    var _a;\n    const namedNodes = (_a = predicatesAcc[predicateIri].namedNodes) !== null && _a !== void 0 ? _a : [];\n    if (namedNodes.every(namedNode => !isLocalNodeIri(namedNode))) {\n      // This Predicate has no local node Objects, so return it unmodified:\n      return predicatesAcc;\n    }\n    const updatedNamedNodes = freeze(namedNodes.map(namedNode => isLocalNodeIri(namedNode) ? `${baseIri}#${getLocalNodeName(namedNode)}` : namedNode));\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, predicatesAcc[predicateIri]), {\n      namedNodes: updatedNamedNodes\n    }));\n    return freeze(Object.assign(Object.assign({}, predicatesAcc), {\n      [predicateIri]: updatedPredicate\n    }));\n  }, thing.predicates);\n  return freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates,\n    url: isLocalNodeIri(thing.url) ? `${baseIri}#${getLocalNodeName(thing.url)}` : thing.url\n  }));\n}\n/**\r\n * @hidden\r\n *\r\n * Fetch a SolidDataset containing information about the capabilities of the\r\n * storage server that hosts the given resource URL. For more information,\r\n * please see the [ESS\r\n * Documentation](https://docs.inrupt.com/ess/latest/services/discovery-endpoint/#well-known-solid).\r\n *\r\n * **Note:** The data contained in this dataset has changed between ESS 1.1 and\r\n * ESS 2.0, as such you will need to check for multiple predicates to support\r\n * both versions.\r\n *\r\n * ```typescript\r\n * const wellKnown = await getWellKnownSolid(resource);\r\n *\r\n * // The wellKnown dataset uses a blank node for the subject all of it’s predicates,\r\n * // such that we need to call getThingAll with acceptBlankNodes set to true to\r\n * // retrieve back predicates contained within the dataset\r\n * const wellKnownSubjects = getThingAll(wellKnown, {\r\n *   acceptBlankNodes: true,\r\n * });\r\n * const wellKnownSubject = wellKnownSubjects[0];\r\n *\r\n * // Retrieve a value from the wellKnown dataset:\r\n * let notificationGateway = getIri(\r\n *   wellKnownSubject,\r\n *   \"http://www.w3.org/ns/solid/terms#notificationGateway\"\r\n * );\r\n * ```\r\n *\r\n *\r\n * @param url URL of a Resource.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch`\r\n * function to make the HTTP request, compatible with the browser-native [fetch\r\n * API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at\r\n * '.well-known/solid' for the given Resource, or rejecting if fetching it\r\n * failed.\r\n * @since 1.12.0\r\n */\nasync function getWellKnownSolid(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  // Try to fetch the well-known solid dataset from the server's root\n  try {\n    const wellKnownSolidUrl = new URL(\"/.well-known/solid\", new URL(urlString).origin).href;\n    // Technically, the request here should be public and shouldn't require an\n    // authenticated fetch, however, in some environments, fetcher.ts fails to\n    // load cross-fetch sometimes, which results in this call failing if we\n    // don't pass the fetch method through:\n    return await getSolidDataset(wellKnownSolidUrl, {\n      fetch: options.fetch\n    });\n  } catch (e) {\n    // In case of error, do nothing and try to discover the .well-known\n    // at the pod's root.\n  }\n  // 1.1s implementation:\n  const resourceMetadata = await getResourceInfo(urlString, {\n    fetch: options.fetch,\n    // Discovering the .well-known/solid document is useful even for resources\n    // we don't have access to.\n    ignoreAuthenticationErrors: true\n  });\n  const linkedResources = getLinkedResourceUrlAll(resourceMetadata);\n  const rootResources = linkedResources[pim.storage];\n  const rootResource = (rootResources === null || rootResources === void 0 ? void 0 : rootResources.length) === 1 ? rootResources[0] : null;\n  // If pod root (storage) was advertised, retrieve well known solid from pod's root\n  if (rootResource !== null) {\n    const wellKnownSolidUrl = new URL(\".well-known/solid\", rootResource.endsWith(\"/\") ? rootResource : `${rootResource}/`).href;\n    return getSolidDataset(wellKnownSolidUrl, Object.assign(Object.assign({}, options), {\n      parsers: {\n        \"application/ld+json\": getJsonLdParser()\n      }\n    }));\n  }\n  throw new Error(\"Could not determine storage root or well-known solid resource.\");\n}\n\n//\nconst {\n  Response\n} = crossFetch__namespace;\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new [[SolidDataset]] with metadata as though the\r\n * SolidDataset has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted SolidDatasets; e.g., unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned SolidDataset appears to be retrieved.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\nfunction mockSolidDatasetFrom(url) {\n  const solidDataset = createSolidDataset();\n  const solidDatasetWithResourceInfo = Object.assign(Object.assign({}, solidDataset), {\n    internal_resourceInfo: {\n      sourceIri: internal_toIriString(url),\n      isRawData: false,\n      contentType: \"text/turtle\",\n      linkedResources: {}\n    }\n  });\n  return solidDatasetWithResourceInfo;\n}\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Container [[SolidDataset]] with metadata as though the\r\n * Container has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted Containers; e.g., unit tests that call [[isContainer]].\r\n *\r\n * @param url The URL from which the returned Container appears to be retrieved. The `url` must end in a slash.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\nfunction mockContainerFrom(url) {\n  const sourceIri = internal_toIriString(url);\n  if (!sourceIri.endsWith(\"/\")) {\n    throw new Error(\"A Container's URL should end in a slash. Please update your tests.\");\n  }\n  return mockSolidDatasetFrom(sourceIri);\n}\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new File with metadata as though the\r\n * File has been retrieved from the given URL. The mock File can be used in\r\n * unit tests that require persisted Files; e.g. unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned File appears to be retrieved.\r\n * @returns A mock File that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\nfunction mockFileFrom(url, options) {\n  const file = new Blob();\n  const fileWithResourceInfo = Object.assign(file, {\n    internal_resourceInfo: {\n      sourceIri: internal_toIriString(url),\n      isRawData: true,\n      contentType: options === null || options === void 0 ? void 0 : options.contentType,\n      linkedResources: {}\n    }\n  });\n  return fileWithResourceInfo;\n}\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Error object with metadata as though the\r\n * it was the result of getting a 404 when trying to fetch the Resource at the\r\n * given URL. The mock Error can be used in unit tests that require functions\r\n * that fetch Resources (like [[getSolidDataset]]) to fail.\r\n *\r\n * @param url The URL of the Resource that could not be fetched according to the error.\r\n * @param statusCode Optional status code (defaults to 404) that caused the error.\r\n * @returns A mock Error that represents not having been able to fetch the Resource at `url` due to a 404 Response.\r\n * @since 1.1.0\r\n */\nfunction mockFetchError(fetchedUrl) {\n  let statusCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 404;\n  const failedResponse = new Response(undefined, {\n    status: statusCode\n  });\n  return new FetchError(`Fetching the Resource at [${fetchedUrl}] failed: [${failedResponse.status}] [${failedResponse.statusText}].`, failedResponse);\n}\n\n//\n/**\r\n * Create a new Thing with a URL added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a URL value to.\r\n * @param property Property for which to add the given URL value.\r\n * @param url URL to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nconst addUrl = (thing, property, url) => {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  if (!isThing(url) && !internal_isValidUrl(url)) {\n    throw new ValidValueUrlExpectedError(url);\n  }\n  const predicateIri = internal_toIriString(property);\n  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n  const existingNamedNodes = (_b = existingPredicate.namedNodes) !== null && _b !== void 0 ? _b : [];\n  let iriToAdd;\n  if (isNamedNode(url)) {\n    iriToAdd = url.value;\n  } else if (typeof url === \"string\") {\n    iriToAdd = url;\n  } else if (isThingLocal(url)) {\n    iriToAdd = url.url;\n  } else {\n    iriToAdd = asIri(url);\n  }\n  const updatedNamedNodes = freeze(existingNamedNodes.concat(internal_toIriString(iriToAdd)));\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {\n    namedNodes: updatedNamedNodes\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n  return updatedThing;\n};\n/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */\nconst addIri = addUrl;\n/**\r\n * Create a new Thing with a boolean added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a boolean value to.\r\n * @param property Property for which to add the given boolean value.\r\n * @param value Boolean to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nconst addBoolean = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\n};\n/**\r\n * Create a new Thing with a datetime added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value Datetime to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nconst addDatetime = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\n};\n/**\r\n * Create a new Thing with a date added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDate]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a date value to.\r\n * @param property Property for which to add the given date value.\r\n * @param value Date to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 1.10.0\r\n */\nconst addDate = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, serializeDate(value), xmlSchemaTypes.date);\n};\n/**\r\n * Create a new Thing with a time added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value time to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 1.10.0\r\n */\nconst addTime = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, serializeTime(value), xmlSchemaTypes.time);\n};\n/**\r\n * Create a new Thing with a decimal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a decimal value to.\r\n * @param property Property for which to add the given decimal value.\r\n * @param value Decimal to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nconst addDecimal = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\n};\n/**\r\n * Create a new Thing with an integer added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an integer value to.\r\n * @param property Property for which to add the given integer value.\r\n * @param value Integer to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nconst addInteger = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\n};\n/**\r\n * Create a new Thing with an English string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringEnglish]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a localised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 1.13.0\r\n */\nfunction addStringEnglish(thing, property, value) {\n  return addStringWithLocale(thing, property, value, \"en\");\n}\n/**\r\n * Create a new Thing with a localised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a localised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nfunction addStringWithLocale(thing, property, value, locale) {\n  var _a, _b, _c;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const normalizedLocale = normalizeLocale(locale);\n  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n  const existingLangStrings = (_b = existingPredicate.langStrings) !== null && _b !== void 0 ? _b : {};\n  const existingStringsInLocale = (_c = existingLangStrings[normalizedLocale]) !== null && _c !== void 0 ? _c : [];\n  const updatedStringsInLocale = freeze(existingStringsInLocale.concat(value));\n  const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), {\n    [normalizedLocale]: updatedStringsInLocale\n  }));\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {\n    langStrings: updatedLangStrings\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n  return updatedThing;\n}\n/**\r\n * Create a new Thing with an unlocalised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an unlocalised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nconst addStringNoLocale = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);\n};\n/**\r\n * Create a new Thing with a Named Node added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Named Node to.\r\n * @param property Property for which to add a value.\r\n * @param value The Named Node to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nfunction addNamedNode(thing, property, value) {\n  return addUrl(thing, property, value.value);\n}\n/**\r\n * Create a new Thing with a Literal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Literal to.\r\n * @param property Property for which to add a value.\r\n * @param value The Literal to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\nfunction addLiteral(thing, property, value) {\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const typeIri = value.datatype.value;\n  if (typeIri === xmlSchemaTypes.langString) {\n    return addStringWithLocale(thing, property, value.value, value.language);\n  }\n  return addLiteralOfType(thing, property, value.value, value.datatype.value);\n}\n/**\r\n * Creates a new Thing with a Term added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Term to.\r\n * @param property Property for which to add a value.\r\n * @param value The Term to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 0.3.0\r\n */\nfunction addTerm(thing, property, value) {\n  var _a, _b;\n  if (value.termType === \"NamedNode\") {\n    return addNamedNode(thing, property, value);\n  }\n  if (value.termType === \"Literal\") {\n    return addLiteral(thing, property, value);\n  }\n  if (value.termType === \"BlankNode\") {\n    internal_throwIfNotThing(thing);\n    if (!internal_isValidUrl(property)) {\n      throw new ValidPropertyUrlExpectedError(property);\n    }\n    const predicateIri = internal_toIriString(property);\n    const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n    const existingBlankNodes = (_b = existingPredicate.blankNodes) !== null && _b !== void 0 ? _b : [];\n    const updatedBlankNodes = freeze(existingBlankNodes.concat(getBlankNodeId(value)));\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {\n      blankNodes: updatedBlankNodes\n    }));\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n      [predicateIri]: updatedPredicate\n    }));\n    const updatedThing = freeze(Object.assign(Object.assign({}, thing), {\n      predicates: updatedPredicates\n    }));\n    return updatedThing;\n  }\n  throw new Error(`Term type [${value.termType}] is not supported by @inrupt/solid-client.`);\n}\nfunction addLiteralOfType(thing, property, value, type) {\n  var _a, _b, _c;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n  const existingLiterals = (_b = existingPredicate.literals) !== null && _b !== void 0 ? _b : {};\n  const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];\n  const updatedValuesOfType = freeze(existingValuesOfType.concat(value));\n  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {\n    [type]: updatedValuesOfType\n  }));\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {\n    literals: updatedLiterals\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n  return updatedThing;\n}\n\n//\nfunction removeAll(thing, property) {\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const newPredicates = Object.assign({}, thing.predicates);\n  delete newPredicates[predicateIri];\n  return freeze(Object.assign(Object.assign({}, thing), {\n    predicates: freeze(newPredicates)\n  }));\n}\n/**\r\n * Create a new Thing with the given URL removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a URL value from.\r\n * @param property Property for which to remove the given URL value.\r\n * @param value URL to remove from `thing` for the given `Property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nconst removeUrl = (thing, property, value) => {\n  var _a, _b, _c;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  if (!isThing(value) && !internal_isValidUrl(value)) {\n    throw new ValidValueUrlExpectedError(value);\n  }\n  const iriToRemove = isThing(value) ? asIri(value) : internal_toIriString(value);\n  const updatedNamedNodes = freeze((_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.filter(namedNode => namedNode.toLowerCase() !== iriToRemove.toLowerCase())) !== null && _c !== void 0 ? _c : []);\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), {\n    namedNodes: updatedNamedNodes\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  return freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n};\n/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */\nconst removeIri = removeUrl;\n/**\r\n * Create a new Thing with the given boolean removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a boolean value from.\r\n * @param property Property for which to remove the given boolean value.\r\n * @param value Boolean to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nconst removeBoolean = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.boolean, foundBoolean => deserializeBoolean(foundBoolean) === value);\n};\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Datetime to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nconst removeDatetime = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.dateTime, foundDatetime => {\n    var _a;\n    return ((_a = deserializeDatetime(foundDatetime)) === null || _a === void 0 ? void 0 : _a.getTime()) === value.getTime();\n  });\n};\n/**\r\n * Create a new Thing with the given date removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a date value from.\r\n * @param property Property for which to remove the given date value.\r\n * @param value Date to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n * @since 1.10.0\r\n */\nconst removeDate = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.date, function (foundDate) {\n    const deserializedDate = deserializeDate(foundDate);\n    if (deserializedDate) {\n      return deserializedDate.getFullYear() === value.getFullYear() && deserializedDate.getMonth() === value.getMonth() && deserializedDate.getDate() === value.getDate();\n    }\n    return false;\n  });\n};\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Time to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n * @since 1.10.0\r\n */\nconst removeTime = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.time, function (foundTime) {\n    const deserializedTime = deserializeTime(foundTime);\n    if (deserializedTime) {\n      return deserializedTime.hour === value.hour && deserializedTime.minute === value.minute && deserializedTime.second === value.second && deserializedTime.millisecond === value.millisecond && deserializedTime.timezoneHourOffset === value.timezoneHourOffset && deserializedTime.timezoneMinuteOffset === value.timezoneMinuteOffset;\n    }\n    return false;\n  });\n};\n/**\r\n * Create a new Thing with the given decimal removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a decimal value from.\r\n * @param property Property for which to remove the given decimal value.\r\n * @param value Decimal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nconst removeDecimal = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.decimal, foundDecimal => deserializeDecimal(foundDecimal) === value);\n};\n/**\r\n * Create a new Thing with the given integer removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an integer value from.\r\n * @param property Property for which to remove the given integer value.\r\n * @param value Integer to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nconst removeInteger = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.integer, foundInteger => deserializeInteger(foundInteger) === value);\n};\n/**\r\n * Create a new Thing with the given English string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a localised string value from.\r\n * @param property Property for which to remove the given localised string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n * @since 1.13.0\r\n */\nfunction removeStringEnglish(thing, property, value) {\n  return removeStringWithLocale(thing, property, value, \"en\");\n}\n/**\r\n * Create a new Thing with the given localised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a localised string value from.\r\n * @param property Property for which to remove the given localised string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @param locale Locale of the string to remove.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nfunction removeStringWithLocale(thing, property, value, locale) {\n  var _a, _b;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const existingLangStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\n  const matchingLocale = Object.keys(existingLangStrings).find(existingLocale => normalizeLocale(existingLocale) === normalizeLocale(locale) && Array.isArray(existingLangStrings[existingLocale]) && existingLangStrings[existingLocale].length > 0);\n  if (typeof matchingLocale !== \"string\") {\n    // Nothing to remove.\n    return thing;\n  }\n  const existingStringsInLocale = existingLangStrings[matchingLocale];\n  const updatedStringsInLocale = freeze(existingStringsInLocale.filter(existingString => existingString !== value));\n  const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), {\n    [matchingLocale]: updatedStringsInLocale\n  }));\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), {\n    langStrings: updatedLangStrings\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  return freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n}\n/**\r\n * Create a new Thing with the given unlocalised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an unlocalised string value from.\r\n * @param property Property for which to remove the given string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nconst removeStringNoLocale = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return removeLiteralMatching(thing, property, xmlSchemaTypes.string, foundString => foundString === value);\n};\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a NamedNode value from.\r\n * @param property Property for which to remove the given NamedNode value.\r\n * @param value NamedNode to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nfunction removeNamedNode(thing, property, value) {\n  return removeUrl(thing, property, value.value);\n}\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param value Literal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\nfunction removeLiteral(thing, property, value) {\n  var _a, _b, _c;\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const typeIri = value.datatype.value;\n  if (typeIri === xmlSchemaTypes.langString) {\n    return removeStringWithLocale(thing, property, value.value, value.language);\n  }\n  const predicateIri = internal_toIriString(property);\n  const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n  const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};\n  const existingValuesOfType = (_c = existingLiterals[typeIri]) !== null && _c !== void 0 ? _c : [];\n  const updatedValues = freeze(existingValuesOfType.filter(existingValue => existingValue !== value.value));\n  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {\n    [typeIri]: updatedValues\n  }));\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), {\n    literals: updatedLiterals\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n  return updatedThing;\n}\n/**\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param type Data type that the Literal should be stored as.\r\n * @param matcher Function that returns true if the given value is an equivalent serialisation of the value to remove. For example, when removing a `false` boolean, the matcher should return true for both \"0\" and \"false\".\r\n */\nfunction removeLiteralMatching(thing, property, type, matcher) {\n  var _a, _b, _c;\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  const predicateIri = internal_toIriString(property);\n  const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\n  const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};\n  const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];\n  const updatedValues = freeze(existingValuesOfType.filter(existingValue => !matcher(existingValue)));\n  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {\n    [type]: updatedValues\n  }));\n  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), {\n    literals: updatedLiterals\n  }));\n  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {\n    [predicateIri]: updatedPredicate\n  }));\n  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {\n    predicates: updatedPredicates\n  }));\n  return updatedThing;\n}\n\n//\n/**\r\n * Create a new Thing with existing values replaced by the given URL for the given Property.\r\n *\r\n * To preserve existing values, see [[addUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a URL value on.\r\n * @param property Property for which to set the given URL value.\r\n * @param url URL to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nconst setUrl = (thing, property, url) => {\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  if (!isThing(url) && !internal_isValidUrl(url)) {\n    throw new ValidValueUrlExpectedError(url);\n  }\n  return addUrl(removeAll(thing, property), property, url);\n};\n/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */\nconst setIri = setUrl;\n/**\r\n * Create a new Thing with existing values replaced by the given boolean for the given Property.\r\n *\r\n * To preserve existing values, see [[addBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a boolean value on.\r\n * @param property Property for which to set the given boolean value.\r\n * @param value Boolean to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nconst setBoolean = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addBoolean(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given datetime for the given Property.\r\n *\r\n * To preserve existing values, see [[addDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an datetime value on.\r\n * @param property Property for which to set the given datetime value.\r\n * @param value Datetime to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nconst setDatetime = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addDatetime(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given date for the given Property.\r\n *\r\n * To preserve existing values, see [[addDate]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an date value on.\r\n * @param property Property for which to set the given date value.\r\n * @param value Date to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 1.10.0\r\n */\nconst setDate = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addDate(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given time for the given Property.\r\n *\r\n * To preserve existing values, see [[addTime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an time value on.\r\n * @param property Property for which to set the given time value.\r\n * @param value time to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 1.10.0\r\n */\nconst setTime = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addTime(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given decimal for the given Property.\r\n *\r\n * To preserve existing values, see [[addDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a decimal value on.\r\n * @param property Property for which to set the given decimal value.\r\n * @param value Decimal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nconst setDecimal = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addDecimal(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given integer for the given Property.\r\n *\r\n * To preserve existing values, see [[addInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an integer value on.\r\n * @param property Property for which to set the given integer value.\r\n * @param value Integer to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nconst setInteger = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addInteger(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given localised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a localised string value on.\r\n * @param property Property for which to set the given localised string value.\r\n * @param value Localised string to set on `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nfunction setStringWithLocale(thing, property, value, locale) {\n  internal_throwIfNotThing(thing);\n  return addStringWithLocale(removeAll(thing, property), property, value, locale);\n}\n/**\r\n * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an unlocalised string value on.\r\n * @param property Property for which to set the given unlocalised string value.\r\n * @param value Unlocalised string to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nconst setStringNoLocale = (thing, property, value) => {\n  internal_throwIfNotThing(thing);\n  return addStringNoLocale(removeAll(thing, property), property, value);\n};\n/**\r\n * Create a new Thing with existing values replaced by the given Named Node for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a NamedNode on.\r\n * @param property Property for which to set the value.\r\n * @param value The NamedNode to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nfunction setNamedNode(thing, property, value) {\n  internal_throwIfNotThing(thing);\n  return addNamedNode(removeAll(thing, property), property, value);\n}\n/**\r\n * Create a new Thing with existing values replaced by the given Literal for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Literal on.\r\n * @param property Property for which to set the value.\r\n * @param value The Literal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\nfunction setLiteral(thing, property, value) {\n  internal_throwIfNotThing(thing);\n  return addLiteral(removeAll(thing, property), property, value);\n}\n/**\r\n * Creates a new Thing with existing values replaced by the given Term for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Term on.\r\n * @param property Property for which to set the value.\r\n * @param value The raw RDF/JS value to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 0.3.0\r\n */\nfunction setTerm(thing, property, value) {\n  internal_throwIfNotThing(thing);\n  if (!internal_isValidUrl(property)) {\n    throw new ValidPropertyUrlExpectedError(property);\n  }\n  return addTerm(removeAll(thing, property), property, value);\n}\n\n//\n/**\r\n * Create or modify a [[Thing]], setting multiple properties in a single expresssion.\r\n *\r\n * For example, you can create a new Thing and initialise several properties as follows:\r\n *\r\n *     const me = buildThing()\r\n *       .addUrl(rdf.type, schema.Person)\r\n *       .addStringNoLocale(schema.givenName, \"Vincent\")\r\n *       .build();\r\n *\r\n * Take note of the final call to `.build()` to obtain the actual Thing.\r\n *\r\n * @param init Optionally pass an existing [[Thing]] to modify the properties of. If left empty, `buildThing` will initialise a new Thing.\r\n * @returns a [[ThingBuilder]], a Fluent API that allows you to set multiple properties in a single expression.\r\n * @since 1.9.0\r\n */\nfunction buildThing() {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : createThing();\n  let thing = isThing(init) ? init : createThing(init);\n  function getAdder(adder) {\n    return (property, value) => {\n      thing = adder(thing, property, value);\n      return builder;\n    };\n  }\n  function getSetter(setter) {\n    return (property, value) => {\n      thing = setter(thing, property, value);\n      return builder;\n    };\n  }\n  function getRemover(remover) {\n    return (property, value) => {\n      thing = remover(thing, property, value);\n      return builder;\n    };\n  }\n  const builder = {\n    build: () => thing,\n    addUrl: getAdder(addUrl),\n    addIri: getAdder(addIri),\n    addBoolean: getAdder(addBoolean),\n    addDatetime: getAdder(addDatetime),\n    addDate: getAdder(addDate),\n    addTime: getAdder(addTime),\n    addDecimal: getAdder(addDecimal),\n    addInteger: getAdder(addInteger),\n    addStringNoLocale: getAdder(addStringNoLocale),\n    addStringEnglish: (property, value) => {\n      thing = addStringWithLocale(thing, property, value, \"en\");\n      return builder;\n    },\n    addStringWithLocale: (property, value, locale) => {\n      thing = addStringWithLocale(thing, property, value, locale);\n      return builder;\n    },\n    addNamedNode: getAdder(addNamedNode),\n    addLiteral: getAdder(addLiteral),\n    addTerm: getAdder(addTerm),\n    setUrl: getSetter(setUrl),\n    setIri: getSetter(setIri),\n    setBoolean: getSetter(setBoolean),\n    setDatetime: getSetter(setDatetime),\n    setDate: getSetter(setDate),\n    setTime: getSetter(setTime),\n    setDecimal: getSetter(setDecimal),\n    setInteger: getSetter(setInteger),\n    setStringNoLocale: getSetter(setStringNoLocale),\n    setStringEnglish: (property, value) => {\n      thing = setStringWithLocale(thing, property, value, \"en\");\n      return builder;\n    },\n    setStringWithLocale: (property, value, locale) => {\n      thing = setStringWithLocale(thing, property, value, locale);\n      return builder;\n    },\n    setNamedNode: getSetter(setNamedNode),\n    setLiteral: getSetter(setLiteral),\n    setTerm: getSetter(setTerm),\n    removeAll: property => {\n      thing = removeAll(thing, property);\n      return builder;\n    },\n    removeUrl: getRemover(removeUrl),\n    removeIri: getRemover(removeIri),\n    removeBoolean: getRemover(removeBoolean),\n    removeDatetime: getRemover(removeDatetime),\n    removeDate: getRemover(removeDate),\n    removeTime: getRemover(removeTime),\n    removeDecimal: getRemover(removeDecimal),\n    removeInteger: getRemover(removeInteger),\n    removeStringNoLocale: getRemover(removeStringNoLocale),\n    removeStringEnglish: (property, value) => buildThing(removeStringWithLocale(thing, property, value, \"en\")),\n    removeStringWithLocale: (property, value, locale) => buildThing(removeStringWithLocale(thing, property, value, locale)),\n    removeNamedNode: getRemover(removeNamedNode),\n    removeLiteral: getRemover(removeLiteral)\n  };\n  return builder;\n}\n\n//\n/**\r\n * Function for use in unit tests to mock a [[Thing]] with a given URL.\r\n *\r\n * Warning: do not use this function in actual production code.\r\n * This function initialises a new empty Thing and sets its URL to a given URL.\r\n * This is useful to mock a Thing in tests of code that call e.g.\r\n * [[asUrl]].\r\n *\r\n * @param url The URL that the mocked Thing pretends identifies it.\r\n * @returns A new Thing, pretending to be identified by the given URL.\r\n * @since 0.2.0\r\n */\nfunction mockThingFrom(url) {\n  const iri = internal_toIriString(url);\n  const thing = {\n    type: \"Subject\",\n    predicates: {},\n    url: iri\n  };\n  return thing;\n}\n\n//\n/**\r\n * @param linkedAccessResource A Resource exposed via the Link header of another Resource with rel=\"acl\".\r\n * @returns Whether that Resource is an ACP ACR or not (in which case it's likely a WAC ACL).\r\n */\nfunction isAcr(linkedAccessResource) {\n  const relTypeLinks = getLinkedResourceUrlAll(linkedAccessResource).type;\n  return Array.isArray(relTypeLinks) && relTypeLinks.includes(acp.AccessControlResource);\n}\n\n//\n/**\r\n * This (currently internal) function fetches the ACL indicated in the [[WithServerResourceInfo]]\r\n * attached to a resource.\r\n *\r\n * @internal\r\n * @param resourceInfo The Resource info with the ACL URL\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n */\nasync function internal_fetchAcl(resourceInfo) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  if (!hasAccessibleAcl(resourceInfo)) {\n    return {\n      resourceAcl: null,\n      fallbackAcl: null\n    };\n  }\n  try {\n    const resourceAcl = await internal_fetchResourceAcl(resourceInfo, options);\n    const acl = resourceAcl === null ? {\n      resourceAcl: null,\n      fallbackAcl: await internal_fetchFallbackAcl(resourceInfo, options)\n    } : {\n      resourceAcl,\n      fallbackAcl: null\n    };\n    return acl;\n  } catch (e) {\n    /* istanbul ignore else: fetchResourceAcl swallows all non-AclIsAcrErrors */\n    if (e instanceof AclIsAcrError) {\n      return {\n        resourceAcl: null,\n        fallbackAcl: null\n      };\n    }\n    /* istanbul ignore next: fetchResourceAcl swallows all non-AclIsAcrErrors */\n    throw e;\n  }\n}\n/** @internal */\nasync function internal_fetchResourceAcl(dataset) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  if (!hasAccessibleAcl(dataset)) {\n    return null;\n  }\n  try {\n    const aclSolidDataset = await getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);\n    if (isAcr(aclSolidDataset)) {\n      throw new AclIsAcrError(dataset, aclSolidDataset);\n    }\n    return freeze(Object.assign(Object.assign({}, aclSolidDataset), {\n      internal_accessTo: getSourceUrl(dataset)\n    }));\n  } catch (e) {\n    if (e instanceof AclIsAcrError) {\n      throw e;\n    }\n    // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,\n    // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal\n    // with it.\n    return null;\n  }\n}\n/** @internal */\nasync function internal_fetchFallbackAcl(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceUrl = new URL(getSourceUrl(resource));\n  const resourcePath = resourceUrl.pathname;\n  // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet\n  //       set in stone that that will always be the case. We might need to check the Container's\n  //       metadata at some point in time to check whether it is actually the root of the Pod.\n  //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022\n  if (resourcePath === \"/\") {\n    // We're already at the root, so there's no Container we can retrieve:\n    return null;\n  }\n  const containerPath = internal_getContainerPath(resourcePath);\n  const containerIri = new URL(containerPath, resourceUrl.origin).href;\n  const containerInfo = await getResourceInfo(containerIri, options);\n  if (!hasAccessibleAcl(containerInfo)) {\n    // If the current user does not have access to this Container's ACL,\n    // we cannot determine whether its ACL is the one that applies. Thus, return null:\n    return null;\n  }\n  const containerAcl = await internal_fetchResourceAcl(containerInfo, options);\n  if (containerAcl === null) {\n    return internal_fetchFallbackAcl(containerInfo, options);\n  }\n  return containerAcl;\n}\n/**\r\n * Given the path to a Resource, get the URL of the Container one level up in the hierarchy.\r\n * @param resourcePath The path of the Resource of which we need to determine the Container's path.\r\n * @hidden For internal use only.\r\n */\nfunction internal_getContainerPath(resourcePath) {\n  const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === \"/\" ? resourcePath.substring(0, resourcePath.length - 1) : resourcePath;\n  const containerPath = `${resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf(\"/\"))}/`;\n  return containerPath;\n}\n/** @internal */\nfunction internal_getAclRules(aclDataset) {\n  const things = getThingAll(aclDataset);\n  return things.filter(isAclRule);\n}\nfunction isAclRule(thing) {\n  return getIriAll(thing, rdf.type).includes(acl.Authorization);\n}\n/** @internal */\nfunction internal_getResourceAclRulesForResource(aclRules, resource) {\n  return aclRules.filter(rule => appliesToResource(rule, resource));\n}\nfunction appliesToResource(aclRule, resource) {\n  return getIriAll(aclRule, acl.accessTo).includes(resource);\n}\n/** @internal */\nfunction internal_getDefaultAclRulesForResource(aclRules, resource) {\n  return aclRules.filter(rule => isDefaultForResource(rule, resource));\n}\nfunction isDefaultForResource(aclRule, resource) {\n  return getIriAll(aclRule, acl.default).includes(resource) || getIriAll(aclRule, acl.defaultForNew).includes(resource);\n}\n/** @internal */\nfunction internal_getAccess(rule) {\n  const ruleAccessModes = getIriAll(rule, acl.mode);\n  const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);\n  return writeAccess ? {\n    read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\n    append: true,\n    write: true,\n    control: ruleAccessModes.includes(internal_accessModeIriStrings.control)\n  } : {\n    read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\n    append: ruleAccessModes.includes(internal_accessModeIriStrings.append),\n    write: false,\n    control: ruleAccessModes.includes(internal_accessModeIriStrings.control)\n  };\n}\n/** @internal */\nfunction internal_combineAccessModes(modes) {\n  return modes.reduce((accumulator, current) => {\n    const writeAccess = accumulator.write || current.write;\n    return writeAccess ? {\n      read: accumulator.read || current.read,\n      append: true,\n      write: true,\n      control: accumulator.control || current.control\n    } : {\n      read: accumulator.read || current.read,\n      append: accumulator.append || current.append,\n      write: false,\n      control: accumulator.control || current.control\n    };\n  }, {\n    read: false,\n    append: false,\n    write: false,\n    control: false\n  });\n}\n/** @internal */\nfunction internal_removeEmptyAclRules(aclDataset) {\n  const aclRules = internal_getAclRules(aclDataset);\n  const aclRulesToRemove = aclRules.filter(isEmptyAclRule);\n  // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.\n  const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);\n  return updatedAclDataset;\n}\nfunction isEmptyAclRule(aclRule) {\n  // If there are Quads in there unrelated to Access Control,\n  // this is not an empty ACL rule that can be deleted:\n  if (subjectToRdfJsQuads(aclRule.predicates, DataFactory.namedNode(aclRule.url), DataFactory.defaultGraph()).some(quad => !isAclQuad(quad))) {\n    return false;\n  }\n  // If the rule does not apply to any Resource, it is no longer working:\n  if (getIri(aclRule, acl.accessTo) === null && getIri(aclRule, acl.default) === null && getIri(aclRule, acl.defaultForNew) === null) {\n    return true;\n  }\n  // If the rule does not specify Access Modes, it is no longer working:\n  if (getIri(aclRule, acl.mode) === null) {\n    return true;\n  }\n  // If the rule does not specify whom it applies to, it is no longer working:\n  if (getIri(aclRule, acl.agent) === null && getIri(aclRule, acl.agentGroup) === null && getIri(aclRule, acl.agentClass) === null) {\n    return true;\n  }\n  return false;\n}\nfunction isAclQuad(quad) {\n  const {\n    predicate\n  } = quad;\n  const {\n    object\n  } = quad;\n  if (predicate.equals(DataFactory.namedNode(rdf.type)) && object.equals(DataFactory.namedNode(acl.Authorization))) {\n    return true;\n  }\n  if (predicate.equals(DataFactory.namedNode(acl.accessTo)) || predicate.equals(DataFactory.namedNode(acl.default)) || predicate.equals(DataFactory.namedNode(acl.defaultForNew))) {\n    return true;\n  }\n  if (predicate.equals(DataFactory.namedNode(acl.mode)) && Object.values(internal_accessModeIriStrings).some(mode => object.equals(DataFactory.namedNode(mode)))) {\n    return true;\n  }\n  if (predicate.equals(DataFactory.namedNode(acl.agent)) || predicate.equals(DataFactory.namedNode(acl.agentGroup)) || predicate.equals(DataFactory.namedNode(acl.agentClass))) {\n    return true;\n  }\n  if (predicate.equals(DataFactory.namedNode(acl.origin))) {\n    return true;\n  }\n  return false;\n}\n/**\r\n * IRIs of potential Access Modes\r\n * @internal\r\n */\nconst internal_accessModeIriStrings = {\n  read: \"http://www.w3.org/ns/auth/acl#Read\",\n  append: \"http://www.w3.org/ns/auth/acl#Append\",\n  write: \"http://www.w3.org/ns/auth/acl#Write\",\n  control: \"http://www.w3.org/ns/auth/acl#Control\"\n};\n/** @internal\r\n * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)\r\n * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).\r\n * @param aclRules The set of rules to filter\r\n * @param targetIri The IRI of the target\r\n * @param targetType The property linking the rule to the target\r\n */\nfunction internal_getAclRulesForIri(aclRules, targetIri, targetType) {\n  return aclRules.filter(rule => getIriAll(rule, targetType).includes(targetIri));\n}\n/** @internal\r\n * This function transforms a given set of rules into a map associating the IRIs\r\n * of the entities to which permissions are granted by these rules, and the permissions\r\n * granted to them. Additionally, it filters these entities based on the predicate\r\n * that refers to them in the rule.\r\n */\nfunction internal_getAccessByIri(aclRules, targetType) {\n  const targetIriAccess = {};\n  aclRules.forEach(rule => {\n    const ruleTargetIri = getIriAll(rule, targetType);\n    const access = internal_getAccess(rule);\n    // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access\n    // Modes granted by those rules should be combined:\n    ruleTargetIri.forEach(targetIri => {\n      targetIriAccess[targetIri] = typeof targetIriAccess[targetIri] === \"undefined\" ? access : internal_combineAccessModes([targetIriAccess[targetIri], access]);\n    });\n  });\n  return targetIriAccess;\n}\n/**\r\n * Initialises a new ACL Rule that grants some access - but does not yet specify to whom.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param access Access mode that this Rule will grant\r\n */\nfunction internal_initialiseAclRule(access) {\n  let newRule = createThing();\n  newRule = setIri(newRule, rdf.type, acl.Authorization);\n  if (access.read) {\n    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);\n  }\n  if (access.append && !access.write) {\n    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);\n  }\n  if (access.write) {\n    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);\n  }\n  if (access.control) {\n    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);\n  }\n  return newRule;\n}\n/**\r\n * Creates a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.\r\n *\r\n * Note that non-ACL values will not be copied over.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param sourceRule ACL rule to duplicate.\r\n */\nfunction internal_duplicateAclRule(sourceRule) {\n  let targetRule = createThing();\n  targetRule = setIri(targetRule, rdf.type, acl.Authorization);\n  function copyIris(inputRule, outputRule, predicate) {\n    return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);\n  }\n  targetRule = copyIris(sourceRule, targetRule, acl.accessTo);\n  targetRule = copyIris(sourceRule, targetRule, acl.default);\n  targetRule = copyIris(sourceRule, targetRule, acl.defaultForNew);\n  targetRule = copyIris(sourceRule, targetRule, acl.agent);\n  targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);\n  targetRule = copyIris(sourceRule, targetRule, acl.agentClass);\n  targetRule = copyIris(sourceRule, targetRule, acl.origin);\n  targetRule = copyIris(sourceRule, targetRule, acl.mode);\n  return targetRule;\n}\nfunction internal_setAcl(resource, acl) {\n  return Object.assign(internal_cloneResource(resource), {\n    internal_acl: acl\n  });\n}\nconst supportedActorPredicates = [acl.agent, acl.agentClass, acl.agentGroup, acl.origin];\n/**\r\n * Given an ACL Rule, returns two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the given Actor access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for a given Actor to a given Resource.\r\n * @param actor The Actor that should be removed from the Rule for the given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the given Actor.\r\n * @returns A tuple with the original ACL Rule without the given Actor, and a new ACL Rule for the given Actor for the remaining Resources, respectively.\r\n */\nfunction internal_removeActorFromRule(rule, actor, actorPredicate, resourceIri, ruleType) {\n  // If the existing Rule does not apply to the given Actor, we don't need to split up.\n  // Without this check, we'd be creating a new rule for the given Actor (ruleForOtherTargets)\n  // that would give it access it does not currently have:\n  if (!getIriAll(rule, actorPredicate).includes(actor)) {\n    const emptyRule = internal_initialiseAclRule({\n      read: false,\n      append: false,\n      write: false,\n      control: false\n    });\n    return [rule, emptyRule];\n  }\n  // The existing rule will keep applying to Actors other than the given one:\n  const ruleWithoutActor = removeIri(rule, actorPredicate, actor);\n  // The actor might have been given other access in the existing rule, so duplicate it...\n  let ruleForOtherTargets = internal_duplicateAclRule(rule);\n  // ...but remove access to the original Resource...\n  ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\n  // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation\n  if (ruleType === \"default\") {\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);\n  }\n  // ...and only apply the new Rule to the given Actor (because the existing Rule covers the others):\n  ruleForOtherTargets = setIri(ruleForOtherTargets, actorPredicate, actor);\n  supportedActorPredicates.filter(predicate => predicate !== actorPredicate).forEach(predicate => {\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, predicate);\n  });\n  return [ruleWithoutActor, ruleForOtherTargets];\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Actor's access.\r\n *\r\n * If rules for Actor's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Actors through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Actors for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param actor The Actor to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Actor for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\nfunction internal_setActorAccess$2(aclDataset, access, actorPredicate, accessType, actor) {\n  // First make sure that none of the pre-existing rules in the given ACL SolidDataset\n  // give the Agent access to the Resource:\n  let filteredAcl = aclDataset;\n  getThingAll(aclDataset).forEach(aclRule => {\n    // Obtain both the Rule that no longer includes the given Actor,\n    // and a new Rule that includes all ACL Quads\n    // that do not pertain to the given Actor-Resource combination.\n    // Note that usually, the latter will no longer include any meaningful statements;\n    // we'll clean them up afterwards.\n    const [filteredRule, remainingRule] = internal_removeActorFromRule(aclRule, actor, actorPredicate, aclDataset.internal_accessTo, accessType);\n    filteredAcl = setThing(filteredAcl, filteredRule);\n    filteredAcl = setThing(filteredAcl, remainingRule);\n  });\n  // Create a new Rule that only grants the given Actor the given Access Modes:\n  let newRule = internal_initialiseAclRule(access);\n  newRule = setIri(newRule, accessType === \"resource\" ? acl.accessTo : acl.default, aclDataset.internal_accessTo);\n  newRule = setIri(newRule, actorPredicate, actor);\n  const updatedAcl = setThing(filteredAcl, newRule);\n  // Remove any remaining Rules that do not contain any meaningful statements:\n  return internal_removeEmptyAclRules(updatedAcl);\n}\nfunction internal_setResourceAcl(resource, acl) {\n  const newAcl = {\n    resourceAcl: acl,\n    fallbackAcl: null\n  };\n  return internal_setAcl(resource, newAcl);\n}\nfunction internal_getResourceAcl(resource) {\n  return resource.internal_acl.resourceAcl;\n}\n/**\r\n * This error indicates that, if we're following a Link with rel=\"acl\",\r\n * it does not result in a WAC ACL, but in an ACP ACR.\r\n */\nclass AclIsAcrError extends Error {\n  constructor(sourceResource, aclResource) {\n    super(`[${getSourceIri(sourceResource)}] is governed by Access Control Policies in [${getSourceIri(aclResource)}] rather than by Web Access Control.`);\n  }\n}\n\n//\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verify whether a given SolidDataset was fetched together with its Access Control List.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have its ACLs attached.\r\n * @returns True if `dataset` was fetched together with its ACLs.\r\n */\nfunction hasAcl(dataset) {\n  const potentialAcl = dataset;\n  return typeof potentialAcl.internal_acl === \"object\";\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a resource ACL (Access Control List) attached.\r\n *\r\n * The [[hasResourceAcl]] function checks that:\r\n * - a given Resource has a resource ACL attached, and\r\n * - the user calling [[hasResourceAcl]] has Control access to the Resource.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A Resource that might have an ACL attached.\r\n * @returns `true` if the Resource has a resource ACL attached that is accessible by the user.\r\n */\nfunction hasResourceAcl(resource) {\n  return resource.internal_acl.resourceAcl !== null && getSourceUrl(resource) === resource.internal_acl.resourceAcl.internal_accessTo && resource.internal_resourceInfo.aclUrl === getSourceUrl(resource.internal_acl.resourceAcl);\n}\n/**\r\n * Experimental: fetch a SolidDataset and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available. This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request. Therefore, and because this function is still\r\n * experimental, prefer [[getSolidDataset]] instead.\r\n *\r\n * If the Resource does not advertise the ACL Resource (because the authenticated user does not have\r\n * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be\r\n * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),\r\n * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the\r\n * authenticated user.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.\r\n */\nasync function getSolidDatasetWithAcl(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const solidDataset = await getSolidDataset(url, options);\n  const acl = await internal_fetchAcl(solidDataset, options);\n  return internal_setAcl(solidDataset, acl);\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file, its resource ACL (Access Control List) if available,\r\n * and its fallback ACL from a URL and returns them as a blob.\r\n *\r\n * If the user calling the function does not have access to the file's resource ACL,\r\n * [[hasAccessibleAcl]] on the returned blob returns false.\r\n * If the user has access to the file's resource ACL but the resource ACL does not exist,\r\n * [[getResourceAcl]] on the returned blob returns null.\r\n * If the fallback ACL is inaccessible by the user,\r\n * [[getFallbackAcl]] on the returned blob returns null.\r\n *\r\n * ```{tip}\r\n * To retrieve the ACLs, the function results in multiple HTTP requests rather than a single\r\n * request as mandated by the Solid spec. As such, prefer [[getFile]] instead if you do not need the ACL.\r\n * ```\r\n *\r\n * @param url The URL of the fetched file\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns A file and its ACLs, if available to the authenticated user, as a blob.\r\n * @since 0.2.0\r\n */\nasync function getFileWithAcl(input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const file = await getFile(input, options);\n  const acl = await internal_fetchAcl(file, options);\n  return internal_setAcl(file, acl);\n}\n/**\r\n * Experimental: fetch a Resource's metadata and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request.\r\n *\r\n * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because\r\n * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the\r\n * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be\r\n * `null`.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.\r\n */\nasync function getResourceInfoWithAcl(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfo(url, options);\n  const acl = await internal_fetchAcl(resourceInfo, options);\n  return internal_setAcl(resourceInfo, acl);\n}\nfunction getResourceAcl(resource) {\n  if (!hasResourceAcl(resource)) {\n    return null;\n  }\n  return resource.internal_acl.resourceAcl;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a fallback ACL (Access Control List) attached.\r\n *\r\n * A fallback ACL for a Resource is inherited from the Resource's parent Container\r\n * (or another of its ancestor Containers) and applies if the Resource does\r\n * not have its own resource ACL.\r\n *\r\n * The [[hasFallbackAcl]] function checks that:\r\n * - a given Resource has a fallback ACL attached, and\r\n * - the user calling [[hasFallbackAcl]] has Control access to the Container\r\n * from which the Resource inherits its ACL.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A [[SolidDataset]] that might have a fallback ACL attached.\r\n *\r\n * @returns `true` if the Resource has a fallback ACL attached that is accessible to the user.\r\n */\nfunction hasFallbackAcl(resource) {\n  return resource.internal_acl.fallbackAcl !== null;\n}\nfunction getFallbackAcl(dataset) {\n  if (!hasFallbackAcl(dataset)) {\n    return null;\n  }\n  return dataset.internal_acl.fallbackAcl;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates an empty resource ACL (Access Control List) for a given Resource.\r\n *\r\n * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).\r\n * @returns An empty resource ACL for the given Resource.\r\n */\nfunction createAcl(targetResource) {\n  const emptyResourceAcl = freeze(Object.assign(Object.assign({}, createSolidDataset()), {\n    internal_accessTo: getSourceUrl(targetResource),\n    internal_resourceInfo: {\n      sourceIri: targetResource.internal_resourceInfo.aclUrl,\n      isRawData: false,\n      linkedResources: {}\n    }\n  }));\n  return emptyResourceAcl;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates a resource ACL (Access Control List), initialised from the fallback ACL\r\n * inherited from the given Resource's Container (or another of its ancestor Containers).\r\n * That is, the new ACL has the same rules/entries as the fallback ACL that currently\r\n * applies to the Resource.\r\n *\r\n * @param resource A Resource without its own resource ACL (see [[hasResourceAcl]]) but with an accessible fallback ACL (see [[hasFallbackAcl]]).\r\n * @returns A resource ACL initialised with the rules/entries from the Resource's fallback ACL.\r\n */\nfunction createAclFromFallbackAcl(resource) {\n  const emptyResourceAcl = createAcl(resource);\n  const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);\n  const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);\n  const newAclRules = defaultAclRules.map(rule => {\n    rule = removeAll(rule, acl.default);\n    rule = removeAll(rule, acl.defaultForNew);\n    rule = setIri(rule, acl.accessTo, getSourceUrl(resource));\n    rule = setIri(rule, acl.default, getSourceUrl(resource));\n    return rule;\n  });\n  // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:\n  const initialisedResourceAcl = newAclRules.reduce(setThing, emptyResourceAcl);\n  return initialisedResourceAcl;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves the resource ACL for a Resource.\r\n *\r\n * @param resource The Resource to which the given resource ACL applies.\r\n * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\nasync function saveAclFor(resource, resourceAcl) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  if (!hasAccessibleAcl(resource)) {\n    throw new Error(`Could not determine the location of the ACL for the Resource at [${getSourceUrl(resource)}]; possibly the current user does not have Control access to that Resource. Try calling \\`hasAccessibleAcl()\\` before calling \\`saveAclFor()\\`.`);\n  }\n  const savedDataset = await saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);\n  const savedAclDataset = Object.assign(Object.assign({}, savedDataset), {\n    internal_accessTo: getSourceUrl(resource)\n  });\n  return savedAclDataset;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the resource ACL (Access Control List) from a Resource.\r\n *\r\n * Once the resource ACL is removed from the Resource, the Resource relies on the\r\n * fallback ACL inherited from the Resource's parent Container (or another of its ancestor Containers).\r\n *\r\n * @param resource The Resource for which you want to delete the ACL.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\nasync function deleteAclFor(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const response = await config.fetch(resource.internal_resourceInfo.aclUrl, {\n    method: \"DELETE\"\n  });\n  if (!response.ok) {\n    throw new Error(`Deleting the ACL of the Resource at [${getSourceUrl(resource)}] failed: [${response.status}] [${response.statusText}].`);\n  }\n  const storedResource = Object.assign(internal_cloneResource(resource), {\n    acl: {\n      resourceAcl: null\n    }\n  });\n  return storedResource;\n}\n/**\r\n * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.\r\n *\r\n * This should generally only be true for SolidDatasets fetched by\r\n * [[getSolidDatasetWithAcl]].\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param dataset A [[SolidDataset]].\r\n * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.\r\n */\nfunction hasAccessibleAcl(dataset) {\n  return typeof dataset.internal_resourceInfo.aclUrl === \"string\";\n}\n\n//\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's explicitly-granted Access Modes for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Agent through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the Agent for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\nfunction getAgentAccess$5(resourceInfo, agent) {\n  if (hasResourceAcl(resourceInfo)) {\n    return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);\n  }\n  if (hasFallbackAcl(resourceInfo)) {\n    return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);\n  }\n  return null;\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns all explicitly-granted Access Modes per Agent for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to Agents through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which Agents may have been granted access.\r\n * @returns Access Modes per Agent that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\nfunction getAgentAccessAll$5(resourceInfo) {\n  if (hasResourceAcl(resourceInfo)) {\n    const resourceAcl = getResourceAcl(resourceInfo);\n    return getAgentResourceAccessAll(resourceAcl);\n  }\n  if (hasFallbackAcl(resourceInfo)) {\n    const fallbackAcl = getFallbackAcl(resourceInfo);\n    return getAgentDefaultAccessAll(fallbackAcl);\n  }\n  return null;\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to an Agent for the Resource\r\n * associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the child Resources if the associated Resource is a Container (see [[getAgentDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the Resource associated with an ACL SolidDataset.\r\n */\nfunction getAgentResourceAccess(aclDataset, agent) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\n  const agentAccessModes = agentResourceRules.map(internal_getAccess);\n  return internal_combineAccessModes(agentAccessModes);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Agent for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @returns Access Modes per Agent that have been explicitly granted for the Resource associated with an ACL SolidDataset.\r\n */\nfunction getAgentResourceAccessAll(aclDataset) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const agentResourceRules = getAgentAclRules(resourceRules);\n  return getAccessByAgent(agentResourceRules);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules for Agent's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\nfunction setAgentResourceAccess$1(aclDataset, agent, access) {\n  return internal_setActorAccess$2(aclDataset, access, acl.agent, \"resource\", agent);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's Access Modes explicitly granted for the children of the\r\n * Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself (see [[getAgentResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the children of the Container associated with the given ACL.\r\n */\nfunction getAgentDefaultAccess(aclDataset, agent) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\n  const agentAccessModes = agentResourceRules.map(internal_getAccess);\n  return internal_combineAccessModes(agentAccessModes);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Agent, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agents through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agents for the Container Resource itself (see [[getAgentResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Access Modes, per Agent, that have been explicitly granted for the children of the Container associated with the given ACL.\r\n */\nfunction getAgentDefaultAccessAll(aclDataset) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const agentResourceRules = getAgentAclRules(resourceRules);\n  return getAccessByAgent(agentResourceRules);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set an Agent's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules already exist for the Agent in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\nfunction setAgentDefaultAccess(aclDataset, agent, access) {\n  return internal_setActorAccess$2(aclDataset, access, acl.agent, \"default\", agent);\n}\nfunction getAgentAclRulesForAgent(aclRules, agent) {\n  return internal_getAclRulesForIri(aclRules, agent, acl.agent);\n}\nfunction getAgentAclRules(aclRules) {\n  return aclRules.filter(isAgentAclRule);\n}\nfunction isAgentAclRule(aclRule) {\n  return getIri(aclRule, acl.agent) !== null;\n}\nfunction getAccessByAgent(aclRules) {\n  return internal_getAccessByIri(aclRules, acl.agent);\n}\n\n//\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns a Group's explicity-granted Access Modes for a given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the `group` for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\nfunction getGroupAccess$2(resourceInfo, group) {\n  if (hasResourceAcl(resourceInfo)) {\n    return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);\n  }\n  if (hasFallbackAcl(resourceInfo)) {\n    return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);\n  }\n  return null;\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns all explicitly-granted Access Modes per Group for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @returns Access Modes per Group that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\nfunction getGroupAccessAll$2(resourceInfo) {\n  if (hasResourceAcl(resourceInfo)) {\n    const resourceAcl = getResourceAcl(resourceInfo);\n    return getGroupResourceAccessAll(resourceAcl);\n  }\n  if (hasFallbackAcl(resourceInfo)) {\n    const fallbackAcl = getFallbackAcl(resourceInfo);\n    return getGroupDefaultAccessAll(fallbackAcl);\n  }\n  return null;\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to a Group for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to the Group for the child Resources if the associated Resource is a Container\r\n *   (see [[getGroupDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes explicitly granted to a Group for the Resource associated with an ACL.\r\n */\nfunction getGroupResourceAccess(aclDataset, group) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);\n  const groupAccessModes = groupResourceRules.map(internal_getAccess);\n  return internal_combineAccessModes(groupAccessModes);\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Group for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes per Group that have been explicitly granted for the Resource associated with an ACL.\r\n */\nfunction getGroupResourceAccessAll(aclDataset) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  return getAccessByGroup(resourceRules);\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns a Group's Access Modes explicitly granted for the children of the\r\n * Container associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself (see [[getGroupResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules for a certain Container.\r\n * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.\r\n * @returns Access Modes that have been explicitly granted to the Group for the children of the Container associated with the given ACL.\r\n */\nfunction getGroupDefaultAccess(aclDataset, group) {\n  const allRules = internal_getAclRules(aclDataset);\n  const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);\n  const groupAccessModes = groupDefaultRules.map(internal_getAccess);\n  return internal_combineAccessModes(groupAccessModes);\n}\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Group, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Groups through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Groups for the Container Resource itself (see [[getGroupResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes per Group that have been explicitly granted for the children of the Container associated with the given ACL SolidDataset.\r\n */\nfunction getGroupDefaultAccessAll(aclDataset) {\n  const allRules = internal_getAclRules(aclDataset);\n  const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  return getAccessByGroup(defaultRules);\n}\nfunction getGroupAclRuleForGroup(rules, group) {\n  return internal_getAclRulesForIri(rules, group, acl.agentGroup);\n}\nfunction getAccessByGroup(aclRules) {\n  return internal_getAccessByIri(aclRules, acl.agentGroup);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Group.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Group's access.\r\n *\r\n * If rules for Groups's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Groups through other ACL rules, e.g., public or Agent-specific permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group The Group to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Group for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `group`.\r\n * @since 1.4.0\r\n */\nfunction setGroupResourceAccess$1(aclDataset, group, access) {\n  return internal_setActorAccess$2(aclDataset, access, acl.agentGroup, \"resource\", group);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set a Group's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Group's access.\r\n *\r\n * If rules already exist for the Group in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public or Agent-specific permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group The Group to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Group.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `group`.\r\n * @since 1.4.0\r\n */\nfunction setGroupDefaultAccess(aclDataset, group, access) {\n  return internal_setActorAccess$2(aclDataset, access, acl.agentGroup, \"default\", group);\n}\n\n//\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for a Resource.\r\n *\r\n * This function does not return Access Modes granted to specific Agents\r\n * through other ACL (Access Control List) rules, e.g., agent- or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @returns Access Modes granted to the public in general for the Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\nfunction getPublicAccess$5(resourceInfo) {\n  if (hasResourceAcl(resourceInfo)) {\n    return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);\n  }\n  if (hasFallbackAcl(resourceInfo)) {\n    return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);\n  }\n  return null;\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to specific Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container (see [[getPublicDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes granted to the public in general for the Resource associated with the `aclDataset`.\r\n */\nfunction getPublicResourceAccess(aclDataset) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\n  const publicAccessModes = publicResourceRules.map(internal_getAccess);\n  return internal_combineAccessModes(publicAccessModes);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the child Resources\r\n * of the Container associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to the Container Resource itself (see [[getPublicResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes granted to the public in general for the children of the Container associated with the given `aclDataset`.\r\n */\nfunction getPublicDefaultAccess(aclDataset) {\n  const allRules = internal_getAclRules(aclDataset);\n  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\n  const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\n  const publicAccessModes = publicResourceRules.map(internal_getAccess);\n  return internal_combineAccessModes(publicAccessModes);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the public.\r\n * Specifically, the function returns a new resource ACL (Access Control List) initialised\r\n * with the given resource ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and public `access`.\r\n */\nfunction setPublicResourceAccess$1(aclDataset, access) {\n  return internal_setActorAccess$2(aclDataset, access, acl.agentClass, \"resource\", foaf.Agent);\n}\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set the public's default Access Modes\r\n * to child resources. Specifically, the function returns a new default ACL initialised\r\n * with the given default ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new default ACL initialised with the given `aclDataset` and public `access`.\r\n */\nfunction setPublicDefaultAccess(aclDataset, access) {\n  return internal_setActorAccess$2(aclDataset, access, acl.agentClass, \"default\", foaf.Agent);\n}\nfunction getClassAclRulesForClass(aclRules, agentClass) {\n  return aclRules.filter(rule => appliesToClass(rule, agentClass));\n}\nfunction appliesToClass(aclRule, agentClass) {\n  return getIriAll(aclRule, acl.agentClass).includes(agentClass);\n}\n\n//\nfunction setMockAclUrl(resource, aclUrl) {\n  const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\n    internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), {\n      aclUrl\n    })\n  });\n  return resourceWithAclUrl;\n}\n\n//\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests** that\r\n * require a [[SolidDataset]] with a resource ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n * @since 0.2.0\r\n */\nfunction addMockResourceAclTo(resource) {\n  var _a;\n  const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : \"https://your.pod/mock-acl.ttl\";\n  const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\n    internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), {\n      aclUrl\n    })\n  });\n  const aclDataset = createAcl(resourceWithAclUrl);\n  const resourceWithResourceAcl = internal_setAcl(resourceWithAclUrl, {\n    resourceAcl: aclDataset,\n    fallbackAcl: null\n  });\n  return resourceWithResourceAcl;\n}\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[SolidDataset]] with a fallback ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].\r\n *\r\n * @param resource The Resource to mock up with new fallback ACL.\r\n * @returns The input Resource with an empty fallback ACL attached.\r\n * @since 0.2.0\r\n */\nfunction addMockFallbackAclTo(resource) {\n  const containerUrl = internal_getContainerPath(getSourceIri(resource));\n  const aclUrl = `${containerUrl}.acl`;\n  const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);\n  const aclDataset = createAcl(mockContainer);\n  const resourceWithFallbackAcl = internal_setAcl(internal_cloneResource(resource), {\n    resourceAcl: null,\n    fallbackAcl: aclDataset\n  });\n  return resourceWithFallbackAcl;\n}\n\n//\nconst rdfJsDataset = rdfJsDatasetModule.dataset;\n/**\r\n * Convert an RDF/JS Dataset into a [[SolidDataset]]\r\n *\r\n * Parse an RDF/JS\r\n * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore},\r\n * into a [[SolidDataset]]. Note that, when saving the returned SolidDataset to\r\n * a Solid Pod, only Quads in the Default Graph will be stored.\r\n *\r\n * @param rdfJsDataset The source RDF/JS Dataset.\r\n * @returns A [[SolidDataset]] containing the same data as the given RDF/JS Dataset.\r\n * @since 1.9.0\r\n */\nfunction fromRdfJsDataset(rdfJsDataset) {\n  const dataset = {\n    graphs: {\n      default: {}\n    },\n    type: \"Dataset\"\n  };\n  const quads = Array.from(rdfJsDataset);\n  const chainBlankNodes = getChainBlankNodes(quads);\n  // Quads with chain Blank Nodes as their Subject will be parsed when those\n  // Blank Nodes are referred to in an Object. See `addRdfJsQuadToObjects`.\n  const quadsWithoutChainBlankNodeSubjects = quads.filter(quad => chainBlankNodes.every(chainBlankNode => !chainBlankNode.equals(quad.subject)));\n  return quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {\n    otherQuads: quads,\n    chainBlankNodes\n  }), dataset);\n}\n/**\r\n * Convert a [[SolidDataset]] into an RDF/JS Dataset\r\n *\r\n * Export a [[SolidDataset]] into an RDF/JS\r\n * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore}.\r\n *\r\n * @param set A [[SolidDataset]] to export into an RDF/JS Dataset.\r\n * @param options Optional parameter that allows you to pass in your own RDF/JS DataFactory or DatasetCoreFactory.\r\n * @returns An RDF/JS Dataset containing the data from the given SolidDataset.\r\n * @since 1.9.0\r\n */\nfunction toRdfJsDataset(set) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  const datasetFactory = (_b = (_a = options.datasetFactory) === null || _a === void 0 ? void 0 : _a.dataset) !== null && _b !== void 0 ? _b : rdfJsDataset;\n  return datasetFactory(toRdfJsQuads(set, options));\n}\n\n//\nfunction getProfileFromProfileDoc(profileDataset, webId) {\n  const profile = getThing(profileDataset, webId);\n  if (profile === null) {\n    throw new Error(`Profile document [${getSourceUrl(profileDataset)}] does not include WebID [${webId}]`);\n  }\n  return profile;\n}\n/**\r\n * Set a JWKS IRI associated with a WebID in a profile document.\r\n *\r\n * @param profileDocument The profile document dataset.\r\n * @param webId The WebID associated with the profile document.\r\n * @param jwksIri The JWKS IRI to be set.\r\n * @returns A modified copy of the profile document, with the JWKS IRI set.\r\n * @since 1.12.0\r\n */\nfunction setProfileJwks(profileDocument, webId, jwksIri) {\n  return setThing(profileDocument, setIri(getProfileFromProfileDoc(profileDocument, webId), security.publicKey, jwksIri));\n}\n/**\r\n * Look for a JWKS IRI optionally advertized from a profile document.\r\n *\r\n * @param profileDocument The profile document.\r\n * @param webId The WebID featured in the profile document.\r\n * @returns The JWKS IRI associated with the WebID, if any.\r\n * @since 1.12.0\r\n */\nfunction getProfileJwksIri(profileDocument, webId) {\n  return getUrl(getProfileFromProfileDoc(profileDocument, webId), security.publicKey);\n}\nconst isJwks = jwksDocument => {\n  return typeof jwksDocument.keys !== \"undefined\";\n};\n/**\r\n * Fetch a JWKS at a given IRI, and add the given JWK to the obtained key set.\r\n *\r\n * @param jwk The JWK to add to the set.\r\n * @param jwksIri The IRI where the key set should be looked up.\r\n * @param options @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a JWKS where the given key has been added.\r\n * @since 1.12.0\r\n */\nasync function addJwkToJwks(jwk, jwksIri) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const jwksResponse = await config.fetch(jwksIri);\n  if (!jwksResponse.ok) {\n    throw new Error(`Fetching [${jwksIri}] returned an error: ${jwksResponse.status} ${jwksResponse.statusText}`);\n  }\n  try {\n    const jwksDocument = await jwksResponse.json();\n    if (!isJwks(jwksDocument)) {\n      throw new Error(`[${jwksIri}] does not dereference to a valid JWKS: ${JSON.stringify(jwksDocument)}`);\n    }\n    return {\n      keys: [...jwksDocument.keys, jwk]\n    };\n  } catch (e) {\n    throw new Error(`Parsing the document at [${jwksIri}] failed: ${e}`);\n  }\n}\n/**\r\n * Adds a public key to the JWKS listed in the profile associated to the given WebID.\r\n * Retrieves the profile document for the specified WebID and looks up the associated\r\n * JWKS. Having added the given key to the JWKS, this function overwrites the\r\n * previous JWKS so that the new version is saved. This assumes the JWKS is hosted\r\n * at a read-write IRI, such as in a Solid Pod.\r\n *\r\n * @param publicKey The public key value to set.\r\n * @param webId The WebID whose profile document references the key set to which we wish to add the specified public key.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 1.12.0\r\n */\nasync function addPublicKeyToProfileJwks(publicKey, webId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const profileDataset = await getSolidDataset(webId, {\n    fetch: options.fetch\n  });\n  if (profileDataset === null) {\n    throw new Error(`The profile document associated with WebID [${webId}] could not be retrieved.`);\n  }\n  const jwksIri = getProfileJwksIri(profileDataset, webId);\n  if (jwksIri === null) {\n    throw new Error(`No key set is declared for the property [${security.publicKey}] in the profile of [${webId}]`);\n  }\n  const updatedJwks = await addJwkToJwks(publicKey, jwksIri, options);\n  return overwriteFile(jwksIri, new Blob([JSON.stringify(updatedJwks)]), {\n    contentType: \"application/json\",\n    fetch: options.fetch\n  });\n}\n\n//\n/**\r\n * List all the alternative profiles IRI found in a given WebID profile.\r\n *\r\n * Note that some of these profiles may be private, and you may not have access to\r\n * the resulting resource.\r\n *\r\n * @param webId The WebID of the user's whose alternative profiles you are discovering.\r\n * @param webIdProfile The WebID profile obtained dereferencing the provided WebID.\r\n * @returns A list of URLs of the user's alternative profiles.\r\n * @since 1.20.0\r\n */\nfunction getAltProfileUrlAllFrom(webId, webIdProfile) {\n  const webIdThing = getThing(webIdProfile, webId);\n  const altProfileUrlAll = getThingAll(webIdProfile).filter(thing => getIriAll(thing, foaf.primaryTopic).length > 0).map(asIri).concat(webIdThing ? getIriAll(webIdThing, foaf.isPrimaryTopicOf) : []).filter(profileIri => profileIri !== getSourceIri(webIdProfile));\n  // Deduplicate the results.\n  return Array.from(new Set(altProfileUrlAll));\n}\nasync function getProfileAll(webId) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  var _a, _b;\n  const authFetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : fetch;\n  const webIdProfile = (_b = options.webIdProfile) !== null && _b !== void 0 ? _b : await getSolidDataset(webId, {\n    fetch: crossFetch.fetch\n  });\n  const altProfileAll = (await Promise.allSettled(getAltProfileUrlAllFrom(webId, webIdProfile).map(uniqueProfileIri => getSolidDataset(uniqueProfileIri, {\n    fetch: authFetch\n  })))\n  // Ignore the alternative profiles lookup which failed.\n  ).filter(result => result.status === \"fulfilled\").map(successfulResult => successfulResult.value);\n  return {\n    webIdProfile,\n    altProfileAll\n  };\n}\n/**\r\n * Discover the Pods an agent advertises for in their profile resources. Both the\r\n * agent's WebID and alternative profiles are fetched. Note that this function will\r\n * only return URLs of Pods linked to using the `pim:storage`, i.e. a triple\r\n * looking like <myWebid, pim:storage, myPodUrl> should appear in the profile\r\n * resources.\r\n *\r\n * @param webId The WebID of the agent whose Pods should be discovered\r\n * @param options Optional parameter\r\n * - `options.fetch`: An alternative `fetch` function to make the HTTP request,\r\n *    compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns a Promise resolving to an array containing the URLs of all the Pods\r\n * linked from the agent's profile resource using the `pim:storage` predicate.\r\n * @since 1.18.0\r\n */\nasync function getPodUrlAll(webId) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const profiles = await getProfileAll(webId, options);\n  return getPodUrlAllFrom(profiles, webId);\n}\n/**\r\n * Discover the Pods advertised for in the provided profile resources. Note that\r\n * this function will only return URLs of Pods linked to using the `pim:storage`\r\n * predicate, i.e. a triple looking like <myWebid, pim:storage, myPodUrl>\r\n * should appear in the profile resources.\r\n *\r\n * @param profiles The profile resources in which the Pods should be discovered\r\n * @param webId The WebID of the agent whose Pods should be discovered\r\n * @returns An array containing the URLs of all the Pods linked from the agent's\r\n * profile resource using the `pim:storage` predicate.\r\n * @since 1.18.0\r\n */\nfunction getPodUrlAllFrom(profiles, webId) {\n  const result = new Set();\n  [profiles.webIdProfile, ...profiles.altProfileAll].forEach(profileResource => {\n    const webIdThing = getThing(profileResource, webId);\n    if (webIdThing !== null) {\n      getIriAll(webIdThing, pim.storage).forEach(podIri => result.add(podIri));\n    }\n  });\n  return Array.from(result);\n}\n/**\r\n * Get the WebID Profile document dataset.\r\n *\r\n * @example\r\n * ```\r\n * const webId = \"https://example.org/people/me\";\r\n * const profile = await getWebIdDataset(webId);\r\n * const podRoot = getPodUrlAllFrom({ webIdProfile: profile, altProfileAll: [] }, webId);\r\n * const profileThing = getThing(profile, webId);\r\n * const name = getStringNoLocale(profileThing, FOAF.name);\r\n * ```\r\n *\r\n * @param webId The WebID of the agent whose WebID Profile dataset is to be fetched.\r\n * @returns a SolidDataset for the WebID Profile document.\r\n * @since 1.24.0\r\n */\nasync function getWebIdDataset(webId) {\n  return getSolidDataset(webId, {\n    fetch: crossFetch.fetch\n  });\n}\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nconst prefixes = {\n  acl: \"http://www.w3.org/ns/auth/acl#\",\n  acp: \"http://www.w3.org/ns/solid/acp#\",\n  cc: \"http://creativecommons.org/ns#\",\n  cert: \"http://www.w3.org/ns/auth/cert#\",\n  csvw: \"http://www.w3.org/ns/csvw#\",\n  current: \"#\",\n  dc: \"http://purl.org/dc/terms/\",\n  dcam: \"http://purl.org/dc/dcam/\",\n  dcat: \"http://www.w3.org/ns/dcat#\",\n  dctype: \"http://purl.org/dc/dcmitype/\",\n  foaf: \"http://xmlns.com/foaf/0.1/\",\n  ldp: \"http://www.w3.org/ns/ldp#\",\n  owl: \"http://www.w3.org/2002/07/owl#\",\n  posixstat: \"http://www.w3.org/ns/posix/stat#\",\n  rdf: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n  rdfs: \"http://www.w3.org/2000/01/rdf-schema#\",\n  schema: \"https://schema.org/\",\n  shacl: \"http://www.w3.org/ns/shacl#\",\n  skos: \"http://www.w3.org/2004/02/skos/core#\",\n  skosxl: \"http://www.w3.org/2008/05/skos-xl#\",\n  solid: \"http://www.w3.org/ns/solid/terms#\",\n  swapdoc: \"http://www.w3.org/2000/10/swap/pim/doc#\",\n  ui: \"http://www.w3.org/ns/ui#\",\n  vann: \"http://purl.org/vocab/vann/\",\n  vcard: \"http://www.w3.org/2006/vcard/ns#\",\n  ws: \"http://www.w3.org/ns/pim/space#\",\n  xsd: \"http://www.w3.org/2001/XMLSchema#\"\n};\n\n//\n/**\r\n * A function to serialise a Solid Dataset as Turtle\r\n *\r\n * @param dataset The Dataset to serialize as Turtle\r\n * @param options.prefixes The Prefixes to use for Turtle serialisation (defaulting to a set of well known prefixes)\r\n * @param options.thing Restricts serialisation to the part of a dataset related to the thing\r\n * @returns RDF serialised as Turtle\r\n * @since 1.20.0\r\n */\nasync function solidDatasetAsTurtle(dataset, options) {\n  const {\n    prefixes: prefixes$1 = prefixes,\n    thing\n  } = Object.assign({}, options);\n  const writer = new n3.Writer({\n    format: \"application/turtle\",\n    prefixes: prefixes$1\n  });\n  const subject = thing ? new n3.NamedNode(thing) : undefined;\n  // If the subject is undefined, all the triples match.\n  for (const quad of toRdfJsDataset(dataset).match(subject)) {\n    writer.addQuad(quad);\n  }\n  return new Promise((resolve, reject) => {\n    writer.end((error, result) => {\n      /* istanbul ignore next */\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\n//\n/** @hidden */\nfunction internal_getAcr(resource) {\n  if (!hasAccessibleAcr(resource)) {\n    throw new Error(`An Access Control Resource for [${getSourceUrl(resource)}] is not available. This could be because the current user is not allowed to see it, or because their Pod Server does not support Access Control Resources.`);\n  }\n  return resource.internal_acp.acr;\n}\n/** @hidden */\nfunction internal_setAcr(resource, acr) {\n  return Object.assign(internal_cloneResource(resource), {\n    internal_acp: Object.assign(Object.assign({}, resource.internal_acp), {\n      acr\n    })\n  });\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new [[Control]].\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\nfunction internal_createControl(options) {\n  let control = createThing(options);\n  control = setIri(control, rdf.type, acp.AccessControl);\n  return control;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Find an [[Control]] with a given URL in a given Resource with an Access Control Resource.\r\n *\r\n * @returns The requested Access Control, or `null` if it could not be found.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\nfunction internal_getControl(withAccessControlResource, url, options) {\n  const acr = internal_getAcr(withAccessControlResource);\n  const foundThing = getThing(acr, url, options);\n  if (foundThing === null || !getIriAll(foundThing, rdf.type).includes(acp.AccessControl)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Control]]s in the Access Control Resource of a given Resource.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\nfunction internal_getControlAll(withAccessControlResource, options) {\n  const acr = internal_getAcr(withAccessControlResource);\n  const foundThings = getThingAll(acr, options);\n  const explicitAccessControl = foundThings.filter(foundThing => getIriAll(foundThing, rdf.type).includes(acp.AccessControl));\n  const implicitAccessControl = foundThings.filter(foundThing => getIriAll(foundThing, acp.accessControl).length > 0).map(thingWithAccessControl => {\n    // The initial filter ensures that at least one AccessControl will be found.\n    const controlIri = getIriAll(thingWithAccessControl, acp.accessControl)[0];\n    // The found control is only an object in the current dataset, so we create the\n    // associated thing in order to possibly make it a subject.\n    return createThing({\n      url: controlIri\n    });\n  });\n  return explicitAccessControl.concat(implicitAccessControl);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert an [[Control]] into the [[AccessControlResource]] of a Resource, replacing previous\r\n * instances of that Access Control.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource into which to insert an Access Control.\r\n * @param control The Control to insert into the Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, but with the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\nfunction internal_setControl(withAccessControlResource, control) {\n  const acr = internal_getAcr(withAccessControlResource);\n  const updatedAcr = setThing(acr, control);\n  const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the Resource to which\r\n * the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_addPolicyUrl(accessControl, policyUrl) {\n  return addIri(accessControl, acp.apply, policyUrl);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_getPolicyUrlAll(accessControl) {\n  return getIriAll(accessControl, acp.apply);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the Resource to which the given [[Control]] is linked,\r\n * and which can be removed by anyone with Write access to the Access Control Resource that contains\r\n * the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @param policyUrl URL of the Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_removePolicyUrl(accessControl, policyUrl) {\n  return removeIri(accessControl, acp.apply, policyUrl);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_removePolicyUrlAll(accessControl) {\n  return removeAll(accessControl, acp.apply);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the children of the\r\n * Resource to which the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the children of the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it as a Member Policy.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_addMemberPolicyUrl(accessControl, policyUrl) {\n  return addIri(accessControl, acp.applyMembers, policyUrl);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the children of the Resource to which the given [[Control]] is\r\n * linked, and which can be removed by anyone with Write access to the Access Control Resource that\r\n * contains the [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the children of the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_getMemberPolicyUrlAll(accessControl) {\n  return getIriAll(accessControl, acp.applyMembers);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the children of the Resource to which the given Access\r\n * Control is linked, and which can be removed by anyone with Write access to the Access Control\r\n * Resource that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policy.\r\n * @param policyUrl URL of the Member Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Member Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_removeMemberPolicyUrl(accessControl, policyUrl) {\n  return removeIri(accessControl, acp.applyMembers, policyUrl);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the children of the Resource to which the given Access Control\r\n * is linked, and which can be removed by anyone with Write access to the Access Control Resource\r\n * that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Member Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\nfunction internal_removeMemberPolicyUrlAll(accessControl) {\n  return removeAll(accessControl, acp.applyMembers);\n}\nfunction internal_getInitialisedControl(resourceWithAcr) {\n  const allControls = internal_getControlAll(resourceWithAcr);\n  return allControls.length === 0 ? internal_createControl() : allControls[0];\n}\n\n//\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a Resource, check whether it is governed by Access Policies.\r\n * (Specifically, a Resource that is governed by Access Policies will refer to exactly one Access\r\n * Control Resource, and expose that to users who are allowed to see or modify access to the given\r\n * Resource.)\r\n *\r\n * @param resource Resource which may or may not be governed by Access Policies.\r\n * @returns True if the Resource refers to an Access Control Resource and is hence governed by Access Policies, or false if it does not.\r\n * @since 1.6.0\r\n */\nfunction hasLinkedAcr(resource) {\n  return hasServerResourceInfo(resource) && Array.isArray(resource.internal_resourceInfo.linkedResources[acp.accessControl]) && resource.internal_resourceInfo.linkedResources[acp.accessControl].length === 1;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access\r\n * Control Resource itself, rather than the Resource it governs.\r\n *\r\n * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resource.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.\r\n * @since 1.6.0\r\n */\nfunction addAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\n  var _a;\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({\n    url: acrUrl\n  });\n  acrThing = addIri(acrThing, acp.access, policyUrl);\n  const updatedAcr = setThing(acr, acrThing);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to a Resource's Access Control Resource such that that\r\n * Policy applies to the Access Control Resources of child Resources.\r\n *\r\n * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resources of children of the Resource.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.\r\n * @since 1.6.0\r\n */\nfunction addMemberAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\n  var _a;\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({\n    url: acrUrl\n  });\n  acrThing = addIri(acrThing, acp.accessMembers, policyUrl);\n  const updatedAcr = setThing(acr, acrThing);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to an Access Control Resource itself, rather than\r\n * to the Resource it governs.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction getAcrPolicyUrlAll$1(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const acrThing = getThing(acr, acrUrl);\n  if (acrThing === null) {\n    return [];\n  }\n  return getIriAll(acrThing, acp.access);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the Access Control Resources of the given Resource's children.\r\n * @since 1.6.0\r\n */\nfunction getMemberAcrPolicyUrlAll$1(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const acrThing = getThing(acr, acrUrl);\n  if (acrThing === null) {\n    return [];\n  }\n  return getIriAll(acrThing, acp.accessMembers);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy removed from it.\r\n * @since 1.6.0\r\n */\nfunction removeAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const acrThing = getThing(acr, acrUrl);\n  if (acrThing === null) {\n    return resourceWithAcr;\n  }\n  const updatedAcrThing = removeIri(acrThing, acp.access, policyUrl);\n  const updatedAcr = setThing(acr, updatedAcrThing);\n  return internal_setAcr(resourceWithAcr, updatedAcr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Access Control Resources of the\r\n * Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children's ACRs the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given member ACR Policy removed from it.\r\n * @since 1.6.0\r\n */\nfunction removeMemberAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const acrThing = getThing(acr, acrUrl);\n  if (acrThing === null) {\n    return resourceWithAcr;\n  }\n  const updatedAcrThing = removeIri(acrThing, acp.accessMembers, policyUrl);\n  const updatedAcr = setThing(acr, updatedAcrThing);\n  return internal_setAcr(resourceWithAcr, updatedAcr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which no more Policies should apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to it.\r\n * @since 1.6.0\r\n */\nfunction removeAcrPolicyUrlAll(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const acrThing = getThing(acr, acrUrl);\n  if (acrThing === null) {\n    return resourceWithAcr;\n  }\n  const updatedAcrThing = removeAll(acrThing, acp.access);\n  const updatedAcr = setThing(acr, updatedAcrThing);\n  return internal_setAcr(resourceWithAcr, updatedAcr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children's ACRs.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to its children's ACRs.\r\n * @since 1.6.0\r\n */\nfunction removeMemberAcrPolicyUrlAll(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const acrThing = getThing(acr, acrUrl);\n  if (acrThing === null) {\n    return resourceWithAcr;\n  }\n  const updatedAcrThing = removeAll(acrThing, acp.accessMembers);\n  const updatedAcr = setThing(acr, updatedAcrThing);\n  return internal_setAcr(resourceWithAcr, updatedAcr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy added to it.\r\n * @since 1.6.0\r\n */\nfunction addPolicyUrl$1(resourceWithAcr, policyUrl) {\n  const control = internal_getInitialisedControl(resourceWithAcr);\n  const updatedControl = internal_addPolicyUrl(control, policyUrl);\n  const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to a Resource's Access Control Resource such that that\r\n * Policy applies to that Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource to whose Access Control Resource the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource's children.\r\n * @returns A new Resource equal to the given Resource, but with the given Member Policy added to its Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction addMemberPolicyUrl$1(resourceWithAcr, policyUrl) {\n  const control = internal_getInitialisedControl(resourceWithAcr);\n  const updatedControl = internal_addMemberPolicyUrl(control, policyUrl);\n  const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Resource.\r\n * @since 1.6.0\r\n */\nfunction getPolicyUrlAll$1(resourceWithAcr) {\n  const controls = internal_getControlAll(resourceWithAcr);\n  const policyUrlsByControl = controls.map(control => internal_getPolicyUrlAll(control));\n  const uniquePolicyUrls = new Set();\n  policyUrlsByControl.forEach(policyUrls => {\n    policyUrls.forEach(url => uniquePolicyUrls.add(url));\n  });\n  return Array.from(uniquePolicyUrls);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the given Resource's children.\r\n * @since 1.6.0\r\n */\nfunction getMemberPolicyUrlAll$1(resourceWithAcr) {\n  const controls = internal_getControlAll(resourceWithAcr);\n  const memberPolicyUrlsByControl = controls.map(control => internal_getMemberPolicyUrlAll(control));\n  const uniquePolicyUrls = new Set();\n  memberPolicyUrlsByControl.forEach(policyUrls => {\n    policyUrls.forEach(url => uniquePolicyUrls.add(url));\n  });\n  return Array.from(uniquePolicyUrls);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy removed from it.\r\n * @since 1.6.0\r\n */\nfunction removePolicyUrl$1(resourceWithAcr, policyUrl) {\n  const controls = internal_getControlAll(resourceWithAcr);\n  const updatedControls = controls.map(control => internal_removePolicyUrl(control, policyUrl));\n  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Member Policy removed from it.\r\n * @since 1.6.0\r\n */\nfunction removeMemberPolicyUrl$1(resourceWithAcr, policyUrl) {\n  const controls = internal_getControlAll(resourceWithAcr);\n  const updatedControls = controls.map(control => internal_removeMemberPolicyUrl(control, policyUrl));\n  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which no more Policies should apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource.\r\n * @since 1.6.0\r\n */\nfunction removePolicyUrlAll(resourceWithAcr) {\n  const controls = internal_getControlAll(resourceWithAcr);\n  const updatedControls = controls.map(control => internal_removePolicyUrlAll(control));\n  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource's children.\r\n * @since 1.6.0\r\n */\nfunction removeMemberPolicyUrlAll(resourceWithAcr) {\n  const controls = internal_getControlAll(resourceWithAcr);\n  const updatedControls = controls.map(control => internal_removeMemberPolicyUrlAll(control));\n  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\n  return updatedResource;\n}\n/**\r\n * Gets a human-readable representation of the given [[Control]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param resourceWithAcr The Resource with an attached Access Control Resource of which you want to get a human-readable representation.\r\n * @since 1.6.0\r\n * @deprecated\r\n */\nfunction acrAsMarkdown(resourceWithAcr) {\n  let markdown = `# Access controls for ${getSourceUrl(resourceWithAcr)}\\n`;\n  const policyUrls = getPolicyUrlAll$1(resourceWithAcr);\n  const memberPolicyUrls = getMemberPolicyUrlAll$1(resourceWithAcr);\n  const acrPolicyUrls = getAcrPolicyUrlAll$1(resourceWithAcr);\n  const memberAcrPolicyUrls = getMemberAcrPolicyUrlAll$1(resourceWithAcr);\n  if (policyUrls.length === 0 && memberPolicyUrls.length === 0 && acrPolicyUrls.length === 0 && memberAcrPolicyUrls.length === 0) {\n    markdown += \"\\n<no policies specified yet>\\n\";\n  }\n  if (policyUrls.length > 0) {\n    markdown += \"\\nThe following policies apply to this resource:\\n- \";\n    markdown += `${policyUrls.join(\"\\n- \")}\\n`;\n  }\n  if (acrPolicyUrls.length > 0) {\n    markdown += \"\\nThe following policies apply to the access control resource for this resource:\\n- \";\n    markdown += `${acrPolicyUrls.join(\"\\n- \")}\\n`;\n  }\n  if (memberPolicyUrls.length > 0) {\n    markdown += \"\\nThe following policies apply to the children of this resource:\\n- \";\n    markdown += `${memberPolicyUrls.join(\"\\n- \")}\\n`;\n  }\n  if (memberAcrPolicyUrls.length > 0) {\n    markdown += \"\\nThe following policies apply to the access control resources for children of this resource:\\n- \";\n    markdown += `${memberAcrPolicyUrls.join(\"\\n- \")}\\n`;\n  }\n  return markdown;\n}\n\n//\n// Copyright 2022 Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n/** @hidden */\nconst ACP_NAMESPACE = \"http://www.w3.org/ns/solid/acp#\";\n/** @hidden */\nconst ACP = {\n  AccessControl: ACP_NAMESPACE.concat(\"AccessControl\"),\n  AccessControlResource: ACP_NAMESPACE.concat(\"AccessControlResource\"),\n  AuthenticatedAgent: ACP_NAMESPACE.concat(\"AuthenticatedAgent\"),\n  CreatorAgent: ACP_NAMESPACE.concat(\"CreatorAgent\"),\n  Matcher: ACP_NAMESPACE.concat(\"Matcher\"),\n  Policy: ACP_NAMESPACE.concat(\"Policy\"),\n  PublicAgent: ACP_NAMESPACE.concat(\"PublicAgent\"),\n  access: ACP_NAMESPACE.concat(\"access\"),\n  accessControl: ACP_NAMESPACE.concat(\"accessControl\"),\n  agent: ACP_NAMESPACE.concat(\"agent\"),\n  allOf: ACP_NAMESPACE.concat(\"allOf\"),\n  allow: ACP_NAMESPACE.concat(\"allow\"),\n  anyOf: ACP_NAMESPACE.concat(\"anyOf\"),\n  apply: ACP_NAMESPACE.concat(\"apply\"),\n  client: ACP_NAMESPACE.concat(\"client\"),\n  deny: ACP_NAMESPACE.concat(\"deny\"),\n  memberAccessControl: ACP_NAMESPACE.concat(\"memberAccessControl\"),\n  noneOf: ACP_NAMESPACE.concat(\"noneOf\"),\n  vc: ACP_NAMESPACE.concat(\"vc\")\n};\n/** @hidden */\nconst ACL_NAMESPACE = \"http://www.w3.org/ns/auth/acl#\";\n/** @hidden */\nconst ACL = {\n  Append: ACL_NAMESPACE.concat(\"Append\"),\n  Control: ACL_NAMESPACE.concat(\"Control\"),\n  Read: ACL_NAMESPACE.concat(\"Read\"),\n  Write: ACL_NAMESPACE.concat(\"Write\")\n};\n/** @hidden */\nconst VC_ACCESS_GRANT = \"http://www.w3.org/ns/solid/vc#SolidAccessGrant\";\n\n//\n/** @hidden */\nfunction getAccessControlResourceThing(resource) {\n  const acr = internal_getAcr(resource);\n  const acrUrl = getSourceUrl(acr);\n  return getThing(acr, acrUrl);\n}\n\n//\n/** @hidden */\nconst DEFAULT_ACCESS_CONTROL = \"defaultAccessControl\";\n/** @hidden */\nconst DEFAULT_ACR_ACCESS_CONTROL = \"defaultAcrAccessControl\";\n/** @hidden */\nconst DEFAULT_MEMBER_ACCESS_CONTROL = \"defaultMemberAccessControl\";\n/** @hidden */\nconst DEFAULT_MEMBER_ACR_ACCESS_CONTROL = \"defaultMemberAcrAccessControl\";\n/** @hidden */\nfunction getDefaultAccessControlUrl(resource, name) {\n  const acr = internal_getAcr(resource);\n  const acrUrl = getSourceUrl(acr);\n  return acrUrl.concat(\"#\").concat(name);\n}\n\n//\n/** @hidden */\nfunction getDefaultAccessControlThing(resource, name) {\n  const acr = internal_getAcr(resource);\n  const defaultAccessControlUrl = getDefaultAccessControlUrl(resource, name);\n  const accessControlThing = getThing(acr, defaultAccessControlUrl);\n  if (accessControlThing === null || typeof accessControlThing === \"undefined\") {\n    return createThing({\n      url: defaultAccessControlUrl\n    });\n  }\n  return accessControlThing;\n}\n\n//\n/** @hidden */\nfunction getModes(policy, type) {\n  const modes = getIriAll(policy, type);\n  return {\n    read: modes.includes(ACL.Read),\n    append: modes.includes(ACL.Append),\n    write: modes.includes(ACL.Write),\n    controlRead: false,\n    controlWrite: false\n  };\n}\n\n//\n/**\r\n * @hidden\r\n *\r\n * Internal function that attaches an ACR to a Resource. Prefer using this than\r\n * setting the internal values manually (easier to refactor when changing the internals).\r\n */\nfunction setAcr(resource, acr) {\n  return Object.assign(internal_cloneResource(resource), {\n    internal_acp: {\n      acr\n    }\n  });\n}\n\n//\n/** @hidden */\nfunction setModes(policy, modes, type) {\n  let newPolicy = removeAll(policy, type);\n  if (modes.read || modes.controlRead) {\n    newPolicy = addIri(newPolicy, type, ACL.Read);\n  }\n  if (modes.append) {\n    newPolicy = addIri(newPolicy, type, ACL.Append);\n  }\n  if (modes.write || modes.controlWrite) {\n    newPolicy = addIri(newPolicy, type, ACL.Write);\n  }\n  return newPolicy;\n}\n\n//\nconst DEFAULT_VC_POLICY_NAME = \"defaultVcPolicy\";\nconst DEFAULT_VC_MATCHER_NAME = \"defaultVcMatcher\";\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Set the maximum access modes that are allowed for a VC holder for a given resource.\r\n * If the resource owner issued an Access Grant for the resource, the agent that\r\n * has been granted access will have at most the permissions set by this function.\r\n * The Access Grant may be more restrictive.\r\n *\r\n * Note that additional access may have been set if the ACR has been manipulated\r\n * not using this library, which is currently out of scope. In this case, the access\r\n * set by this function may not apply.\r\n *\r\n * @param resourceWithAcr The resource for which the access modes are being set for VC holders.\r\n * @param access The access modes to set. Setting a mode to `true` will enable it, to `false`\r\n * will disable it, and to `undefined` will leave it unchanged compared to what was previously\r\n * set.\r\n * @returns A copy of the resource and its attached ACR, updated to the new access modes.\r\n * @since 1.17.0\r\n */\nfunction setVcAccess(resourceWithAcr, access) {\n  var _a, _b;\n  let acr = internal_getAcr(resourceWithAcr);\n  const defaultVcPolicyIri = `${getSourceIri(acr)}#${DEFAULT_VC_POLICY_NAME}`;\n  const defaultVcMatcherIri = `${getSourceIri(acr)}#${DEFAULT_VC_MATCHER_NAME}`;\n  let accessControl = getDefaultAccessControlThing(resourceWithAcr, \"defaultAccessControl\");\n  let acrThing = (_a = getAccessControlResourceThing(resourceWithAcr)) !== null && _a !== void 0 ? _a : buildThing({\n    url: getSourceIri(acr)\n  }).addIri(ACP.accessControl, accessControl).build();\n  if (!getIriAll(acrThing, ACP.accessControl).includes(asIri(accessControl))) {\n    // Case when the ACR Thing existed, but did not include a link to the default Access Control.\n    acrThing = addIri(acrThing, ACP.accessControl, accessControl);\n  }\n  let vcPolicy = getThing(acr, defaultVcPolicyIri);\n  if (vcPolicy === null) {\n    // If the policy does not exist, create it and link the default Access Control to it.\n    vcPolicy = buildThing({\n      url: defaultVcPolicyIri\n    }).addIri(rdf.type, ACP.Policy).addIri(ACP.anyOf, defaultVcMatcherIri).build();\n    accessControl = addIri(accessControl, ACP.apply, vcPolicy);\n  }\n  const vcMatcher = (_b = getThing(acr, defaultVcMatcherIri)) !== null && _b !== void 0 ? _b : buildThing({\n    url: defaultVcMatcherIri\n  }).addIri(rdf.type, ACP.Matcher).addIri(ACP.vc, VC_ACCESS_GRANT).build();\n  const currentModes = getModes(vcPolicy, ACP.allow);\n  // Only change the modes which are set in `access`, and preserve the others.\n  vcPolicy = setModes(vcPolicy, Object.assign(Object.assign({}, currentModes), access), ACP.allow);\n  // Write the changed access control, policy and matchers in the ACR\n  acr = [acrThing, accessControl, vcPolicy, vcMatcher].reduce(setThing, acr);\n  return setAcr(resourceWithAcr, acr);\n}\n\n//\nconst DEFAULT_NO_ACCESS = {\n  read: false,\n  append: false,\n  write: false,\n  controlRead: false,\n  controlWrite: false\n};\nconst linkExists = (subject, predicate, object) => getIriAll(subject, predicate).includes(asIri(object));\n// TODO: It should be possible to write a `chainExists` function, taking in a chain\n// of Thing, predicate, Thing, predicate... and checks whether such chain exists\n// in a given dataset. It would make the following function much easier to read,\n// instead of checking at each link that it isn't null and it is connected to the\n// next link.\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the maximum access modes that are allowed for a VC holder for a given resource.\r\n * If the resource owner issued an Access Grant for the resource, the agent that\r\n * has been granted access will have at most the permissions returned by this function.\r\n * The Access Grant may be more restrictive.\r\n *\r\n * Note that only the modes set using [[setVcAccess]] will be returned by this function.\r\n * Additional access may have been set if the ACR has been manipulated not using this\r\n * library, which is currently out of scope.\r\n *\r\n * @param resourceWithAcr The resource for which the VC access modes are looked up.\r\n * @returns The access modes available to a VC holder.\r\n * @since 1.17.0\r\n */\nfunction getVcAccess(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const accessControl = getDefaultAccessControlThing(resourceWithAcr, \"defaultAccessControl\");\n  const acrThing = getAccessControlResourceThing(resourceWithAcr);\n  if (acrThing === null || !linkExists(acrThing, ACP.accessControl, accessControl)) {\n    return DEFAULT_NO_ACCESS;\n  }\n  const defaultVcPolicyIri = `${getSourceIri(acr)}#${DEFAULT_VC_POLICY_NAME}`;\n  const vcPolicy = getThing(acr, defaultVcPolicyIri);\n  if (vcPolicy === null || !linkExists(accessControl, ACP.apply, vcPolicy)) {\n    return DEFAULT_NO_ACCESS;\n  }\n  const defaultVcMatcherIri = `${getSourceIri(acr)}#${DEFAULT_VC_MATCHER_NAME}`;\n  const vcMatcher = getThing(acr, defaultVcMatcherIri);\n  if (vcMatcher === null || !linkExists(vcPolicy, ACP.anyOf, vcMatcher)) {\n    return DEFAULT_NO_ACCESS;\n  }\n  return getModes(vcPolicy, ACP.allow);\n}\n\n//\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACR that applies to it, if available to the authenticated user.\r\n * @since 1.6.0\r\n */\nasync function getSolidDatasetWithAcr(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const solidDataset = await getSolidDataset(urlString, config);\n  const acp = await fetchAcr(solidDataset, config);\n  return Object.assign(Object.assign({}, solidDataset), acp);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a file and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the file to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A file and the ACR that applies to it, if available to the authenticated user.\r\n * @since 1.6.0\r\n */\nasync function getFileWithAcr(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const file = await getFile(urlString, config);\n  const acp = await fetchAcr(file, config);\n  return Object.assign(file, acp);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieve information about a Resource and its associated Access Control Resource (if available to\r\n * the current user), without fetching the Resource itself.\r\n *\r\n * @param url URL of the Resource about which to fetch its information.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Metadata describing a Resource, and the ACR that applies to it, if available to the authenticated user.\r\n * @since 1.6.0\r\n */\nasync function getResourceInfoWithAcr(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const resourceInfo = await getResourceInfo(urlString, config);\n  const acp = await fetchAcr(resourceInfo, config);\n  return Object.assign(Object.assign({}, resourceInfo), acp);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and either the ACL access data or the ACR access data, if available to the current user.\r\n * @since 1.6.0\r\n */\nasync function getSolidDatasetWithAccessDatasets(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const solidDataset = await getSolidDataset(urlString, config);\n  if (hasAccessibleAcl(solidDataset)) {\n    const acl = await internal_fetchAcl(solidDataset, config);\n    return internal_setAcl(solidDataset, acl);\n  }\n  const acr = await fetchAcr(solidDataset, config);\n  return Object.assign(Object.assign({}, solidDataset), acr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a File, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the File to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A File and either the ACL access data or the ACR access data, if available to the current user.\r\n * @since 1.6.0\r\n */\nasync function getFileWithAccessDatasets(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const file = await getFile(urlString, config);\n  if (hasAccessibleAcl(file)) {\n    const acl = await internal_fetchAcl(file, config);\n    return internal_setAcl(file, acl);\n  }\n  const acr = await fetchAcr(file, config);\n  return Object.assign(file, acr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch information about a Resource, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the Resource information about which to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Information about a Resource and either the ACL access data or the ACR access data, if available to the current user.\r\n * @since 1.6.0\r\n */\nasync function getResourceInfoWithAccessDatasets(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(url);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const resourceInfo = await getResourceInfo(urlString, config);\n  if (hasAccessibleAcl(resourceInfo)) {\n    const acl = await internal_fetchAcl(resourceInfo, config);\n    return internal_setAcl(resourceInfo, acl);\n  }\n  const acr = await fetchAcr(resourceInfo, config);\n  return Object.assign(Object.assign({}, resourceInfo), acr);\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Save a Resource's Access Control Resource.\r\n *\r\n * @param resource Resource with an Access Control Resource that should be saved.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 1.6.0\r\n */\nasync function saveAcrFor(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const acr = internal_getAcr(resource);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const savedAcr = await saveSolidDatasetAt(getSourceUrl(acr), acr, config);\n  return internal_setAcr(resource, savedAcr);\n}\n/**\r\n * @param resource Resource of which to check whether it has an Access Control Resource attached.\r\n * @returns Boolean representing whether the given Resource has an Access Control Resource attached for use in e.g. [[getPolicyUrlAll]].\r\n * @since 1.6.0\r\n */\nfunction hasAccessibleAcr(resource) {\n  return typeof resource.internal_acp === \"object\" && resource.internal_acp !== null && typeof resource.internal_acp.acr === \"object\" && resource.internal_acp.acr !== null;\n}\nasync function fetchAcr(resource, options) {\n  let acrUrl;\n  if (hasLinkedAcr(resource)) {\n    // Whereas a Resource can generally have multiple linked Resources for the same relation,\n    // it can only have one Access Control Resource for that ACR to be valid.\n    // Hence the accessing of [0] directly:\n    const {\n      linkedResources\n    } = resource.internal_resourceInfo;\n    [acrUrl] = linkedResources[acp.accessControl];\n  } else if (hasAccessibleAcl(resource)) {\n    // The ACP proposal will be updated to expose the Access Control Resource\n    // via a Link header with rel=\"acl\", just like WAC. That means that if\n    // an ACL is advertised, we can still fetch its metadata — if that indicates\n    // that it's actually an ACP Access Control Resource, then we can fetch that\n    // instead.\n    const aclResourceInfo = await getResourceInfo(resource.internal_resourceInfo.aclUrl, options);\n    if (isAcr(aclResourceInfo)) {\n      acrUrl = getSourceUrl(aclResourceInfo);\n    }\n  }\n  // If the Resource doesn't advertise an ACR via the old Link header,\n  // nor via a rel=\"acl\" header, then return, indicating that no ACR could be\n  // fetched:\n  if (typeof acrUrl !== \"string\") {\n    return {\n      internal_acp: {\n        acr: null\n      }\n    };\n  }\n  let acr;\n  try {\n    acr = await getSolidDataset(acrUrl, options);\n  } catch (e) {\n    return {\n      internal_acp: {\n        acr: null\n      }\n    };\n  }\n  const acrDataset = Object.assign(Object.assign({}, acr), {\n    accessTo: getSourceUrl(resource)\n  });\n  const acpInfo = {\n    internal_acp: {\n      acr: acrDataset\n    }\n  };\n  return acpInfo;\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * To make it easy to fetch all the relevant Access Policy Resources,\r\n * this function returns all referenced Access Policy Resources referenced in an\r\n * Access Control Resource.\r\n * In other words, if Access Controls refer to different Policies in the same\r\n * Access Policy Resource, this function will only return that Access Policy\r\n * Resource's URL once.\r\n *\r\n * @param withAcr A Resource with an Access Control Resource attached.\r\n * @returns List of all unique Access Policy Resources that are referenced in the given Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction getReferencedPolicyUrlAll(withAcr) {\n  const policyUrls = getPolicyUrlAll$1(withAcr).map(normalizeServerSideIri).concat(getMemberPolicyUrlAll$1(withAcr).map(normalizeServerSideIri)).concat(getAcrPolicyUrlAll$1(withAcr).map(normalizeServerSideIri)).concat(getMemberAcrPolicyUrlAll$1(withAcr).map(normalizeServerSideIri));\n  const uniqueUrls = Array.from(new Set(policyUrls));\n  return uniqueUrls;\n}\n/**\r\n * Verify whether the access to the given resource is controlled using the ACP\r\n * system.\r\n * @param resource The target resource\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns True if the access to the resource is controlled using ACP, false otherwise.\r\n * @since 1.14.0.\r\n */\nasync function isAcpControlled(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const urlString = internal_toIriString(resource);\n  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\n  const resourceInfo = await getResourceInfo(urlString, config);\n  return hasAccessibleAcr(await fetchAcr(resourceInfo, config));\n}\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a Resource, find out the URL of its governing Access Control Resource.\r\n *\r\n * @param resource Resource which should be governed by Access Policies.\r\n * @returns The URL of the Access Control Resource, or undefined if not ACR is found.\r\n * @since 1.15.0\r\n */\nfunction getLinkedAcrUrl(resource) {\n  if (!hasServerResourceInfo(resource)) {\n    return undefined;\n  }\n  // Two rels types are acceptable to indicate a link to an ACR.\n  const acrLinks = [acp.accessControl, \"acl\"].map(rel => {\n    if (Array.isArray(resource.internal_resourceInfo.linkedResources[rel]) && resource.internal_resourceInfo.linkedResources[rel].length === 1) {\n      return resource.internal_resourceInfo.linkedResources[rel][0];\n    }\n    return undefined;\n  });\n  return acrLinks.find(x => x !== undefined);\n}\n\n//\n/**\r\n * NOTE: Don't export for now (i.e. if exported, should this be `isAcpRule()` so\r\n * as not to clash with `isAclRule()`.\r\n *\r\n * @param thing the [[Thing]] to check to see if it's an ACP rule or not\r\n */\nfunction isRule(thing) {\n  return getIriAll(thing, rdf.type).includes(acp.Rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" rules,\r\n * they will not be granted access.\r\n *\r\n * Also see [[addAnyOfRuleUrl]] and [[addNoneOfRuleUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since 1.6.0\r\n */\nfunction addAllOfRuleUrl(policy, rule) {\n  return addIri(policy, acp.allOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since 1.6.0\r\n */\nfunction removeAllOfRuleUrl(policy, rule) {\n  return removeIri(policy, acp.allOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrites the rule refining the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy requires.\r\n * @returns A new [[Policy]] clone of the original one, with the \"All Of\" rules replaced.\r\n * @since 1.6.0\r\n */\nfunction setAllOfRuleUrl(policy, rule) {\n  return setIri(policy, acp.allOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"All Of\" [[Rule]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the \"All Of\" [[Rule]]s\r\n * @since 1.6.0\r\n */\nfunction getAllOfRuleUrlAll(policy) {\n  return getIriAll(policy, acp.allOf);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" rules,\r\n * they will be granted access.\r\n *\r\n * Also see [[addAllOfRuleUrl]] and [[addNoneOfRuleUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since 1.6.0\r\n */\nfunction addAnyOfRuleUrl(policy, rule) {\n  return addIri(policy, acp.anyOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since 1.6.0\r\n */\nfunction removeAnyOfRuleUrl(policy, rule) {\n  return removeIri(policy, acp.anyOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the rule extending the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the \"Any Of\" rules replaced.\r\n * @since 1.6.0\r\n */\nfunction setAnyOfRuleUrl(policy, rule) {\n  return setIri(policy, acp.anyOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"Any Of\" [[Rule]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the \"Any Of\" [[Rule]]s\r\n * @since 1.6.0\r\n */\nfunction getAnyOfRuleUrlAll(policy) {\n  return getIriAll(policy, acp.anyOf);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n *\r\n * Also see [[addAllOfRuleUrl]] and [[addAnyOfRuleUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since 1.6.0\r\n */\nfunction addNoneOfRuleUrl(policy, rule) {\n  return addIri(policy, acp.noneOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since 1.6.0\r\n */\nfunction removeNoneOfRuleUrl(policy, rule) {\n  return removeIri(policy, acp.noneOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set the rules restrincting the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"None Of\" rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the \"Any Of\" rules replaced.\r\n * @since 1.6.0\r\n */\nfunction setNoneOfRuleUrl(policy, rule) {\n  return setIri(policy, acp.noneOf, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"None Of\" [[Rule]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the forbidden [[Rule]]s\r\n * @since 1.6.0\r\n */\nfunction getNoneOfRuleUrlAll(policy) {\n  return getIriAll(policy, acp.noneOf);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Rule]].\r\n *\r\n * @param url URL that identifies this [[Rule]].\r\n * @since 1.6.0\r\n */\nfunction createRule(url) {\n  const stringUrl = internal_toIriString(url);\n  let ruleThing = createThing({\n    url: stringUrl\n  });\n  ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);\n  return ruleThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[ResourceRule]] for the given Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the new Rule is to apply.\r\n * @param name Name that identifies this [[Rule]].\r\n * @since 1.6.0\r\n */\nfunction createResourceRuleFor(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const url = new URL(getSourceUrl(acr));\n  url.hash = `#${name}`;\n  let ruleThing = createThing({\n    url: url.href\n  });\n  ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);\n  return ruleThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]] with the given URL from an [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains the given [[Rule]].\r\n * @param url URL that identifies this [[Rule]].\r\n * @returns The requested [[Rule]], if it exists, or `null` if it does not.\r\n * @since 1.6.0\r\n */\nfunction getRule(ruleResource, url) {\n  const foundThing = getThing(ruleResource, url);\n  if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Rule) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourceRule]] with the given name from an Resource's Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceRule]].\r\n * @param name Name that identifies this [[ResourceRule]].\r\n * @returns The requested [[ResourceRule]], if it exists, or `null` if it does not.\r\n * @since 1.6.0\r\n */\nfunction getResourceRule(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const url = new URL(acrUrl);\n  url.hash = `#${name}`;\n  const foundThing = getThing(acr, url.href);\n  if (foundThing === null || !isRule(foundThing)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[Rule]]s from a [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.\r\n * @returns The [[Rule]]s contained in this resource.\r\n * @since 1.6.0\r\n */\nfunction getRuleAll(ruleResource) {\n  const things = getThingAll(ruleResource);\n  return things.filter(isRule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[ResourceRule]]s from a Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.\r\n * @returns The [[ResourceRule]]s contained in this Resource's Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction getResourceRuleAll(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const things = getThingAll(acr);\n  return things.filter(isRule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[Rule]] from the given [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.\r\n * @returns A new SolidDataset equal to the given Rule Resource, but without the given Rule.\r\n * @since 1.6.0\r\n */\nfunction removeRule(ruleResource, rule) {\n  return removeThing(ruleResource, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[ResourceRule]] from the given Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.\r\n * @returns A new Resource equal to the given Resource, but without the given Rule in its ACR.\r\n * @since 1.6.0\r\n */\nfunction removeResourceRule(resourceWithAcr, rule) {\n  const acr = internal_getAcr(resourceWithAcr);\n  let ruleToRemove;\n  if (typeof rule === \"string\") {\n    if (internal_isValidUrl(rule)) {\n      ruleToRemove = rule;\n    } else {\n      // If the given Rule to remove is the name of the Rule,\n      // resolve it to its full URL — developers usually refer to either the\n      // Rule itself, or by its name, as they do not have access to the ACR\n      // directly.\n      const ruleUrl = new URL(getSourceUrl(acr));\n      ruleUrl.hash = `#${rule}`;\n      ruleToRemove = ruleUrl.href;\n    }\n  } else if (isNamedNode(rule)) {\n    ruleToRemove = internal_toIriString(rule);\n  } else {\n    ruleToRemove = asUrl(rule);\n  }\n  // Check whether the actual Rule (i.e. with the Rule type) exists:\n  const matchingRule = getResourceRule(resourceWithAcr, new URL(ruleToRemove).hash.substring(1));\n  if (matchingRule === null) {\n    // No such Rule exists yet, so return the Resource+ACR unchanged:\n    return resourceWithAcr;\n  }\n  const updatedAcr = removeThing(acr, matchingRule);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Rule]] into the given [[SolidDataset]], replacing previous\r\n * instances of that Rule.\r\n *\r\n * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.\r\n * @returns A new SolidDataset equal to the given Rule Resource, but with the given Rule.\r\n * @since 1.6.0\r\n */\nfunction setRule(ruleResource, rule) {\n  return setThing(ruleResource, rule);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourceRule]] into the given Resource's Access Control Resource,\r\n * replacing previous instances of that Rule.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.\r\n * @returns A new Resource equal to the given Resource, but with the given Rule in its ACR.\r\n * @since 1.6.0\r\n */\nfunction setResourceRule(resourceWithAcr, rule) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const updatedAcr = setThing(acr, rule);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the agents a [[Rule]] applies **directly** to. This will not include agents\r\n * that are part of a group the [[Rule]] applies to, nor will it include specific agent\r\n * classes, such as authenticated or public agents.\r\n *\r\n * @param rule The rule from which agents are read.\r\n * @returns A list of the WebIDs of agents included in the rule.\r\n * @since 1.6.0\r\n */\nfunction getAgentAll$1(rule) {\n  return getIriAll(rule, acp.agent).filter(agent => agent !== acp.PublicAgent && agent !== acp.AuthenticatedAgent && agent !== acp.CreatorAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the agents the [[Rule]] applies to with the provided agents.\r\n *\r\n * @param rule The rule for which agents are set.\r\n * @param agent The agent the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of agents.\r\n * @since 1.6.0\r\n */\nfunction setAgent$1(rule, agent) {\n  // Preserve the special agent classes authenticated and public, which we\n  // don't want to overwrite with this function.\n  const isPublic = hasPublic$1(rule);\n  const isAuthenticated = hasAuthenticated$1(rule);\n  const isCreator = hasCreator$1(rule);\n  let result = setIri(rule, acp.agent, agent);\n  // Restore public and authenticated\n  if (isPublic) {\n    result = setPublic$1(result);\n  }\n  if (isAuthenticated) {\n    result = setAuthenticated$1(result);\n  }\n  if (isCreator) {\n    result = setCreator$1(result);\n  }\n  return result;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional agent.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional agent.\r\n * @param agent The agent the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional agent.\r\n * @since 1.6.0\r\n */\nfunction addAgent$1(rule, agent) {\n  return addIri(rule, acp.agent, agent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given agent directly. This will not\r\n * remove the agent from any groups the rule applies to.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given agent.\r\n * @param agent The agent the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given agent.\r\n * @since 1.6.0\r\n */\nfunction removeAgent$1(rule, agent) {\n  return removeIri(rule, acp.agent, agent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Lists all the groups a [[Rule]] applies to.\r\n *\r\n * @param rule The rule from which groups are read.\r\n * @returns A list of the [[URL]]'s of groups included in the rule.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\nfunction getGroupAll(rule) {\n  return getIriAll(rule, acp.group);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the groups the [[Rule]] applies to with the provided groups.\r\n *\r\n * @param rule The rule for which groups are set.\r\n * @param group The group the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of groups.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\nfunction setGroup(rule, group) {\n  return setIri(rule, acp.group, group);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional group.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional group.\r\n * @param agent The group the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional group.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\nfunction addGroup(rule, group) {\n  return addIri(rule, acp.group, group);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given group.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given group.\r\n * @param agent The group the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given group.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\nfunction removeGroup(rule, group) {\n  return removeIri(rule, acp.group, group);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any agent.\r\n *\r\n * @param rule The rule checked for public access.\r\n * @returns Whether the rule applies to any agent or not.\r\n * @since 1.6.0\r\n */\nfunction hasPublic$1(rule) {\n  return getIriAll(rule, acp.agent).filter(agent => agent === acp.PublicAgent).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to apply to any Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply to any agent.\r\n * @since 1.6.0\r\n */\nfunction setPublic$1(rule) {\n  // The second argument should not be part of the function signature,\n  // so it's not in the parameter list:\n  // eslint-disable-next-line prefer-rest-params\n  if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\n    throw new Error(\"The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.\");\n  }\n  return addIri(rule, acp.agent, acp.PublicAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to no longer apply to any Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to no longer apply to any agent.\r\n * @since 1.6.0\r\n */\nfunction removePublic$1(rule) {\n  return removeIri(rule, acp.agent, acp.PublicAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any authenticated agent.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to any authenticated agent or not.\r\n * @since 1.6.0\r\n */\nfunction hasAuthenticated$1(rule) {\n  return getIriAll(rule, acp.agent).filter(agent => agent === acp.AuthenticatedAgent).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to apply to any authenticated Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply to any authenticated Agent.\r\n * @since 1.6.0\r\n */\nfunction setAuthenticated$1(rule) {\n  // The second argument should not be part of the function signature,\n  // so it's not in the parameter list:\n  // eslint-disable-next-line prefer-rest-params\n  if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\n    throw new Error(\"The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.\");\n  }\n  return addIri(rule, acp.agent, acp.AuthenticatedAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to no longer apply to any authenticated Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply/not apply to any authenticated agent.\r\n * @since 1.6.0\r\n */\nfunction removeAuthenticated$1(rule) {\n  return removeIri(rule, acp.agent, acp.AuthenticatedAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to the creator of the Resource.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to the creator of the Resource or not.\r\n * @since 1.6.0\r\n */\nfunction hasCreator$1(rule) {\n  return getIriAll(rule, acp.agent).filter(agent => agent === acp.CreatorAgent).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to apply to the creator of a Resource.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply to the creator of a Resource.\r\n * @since 1.6.0\r\n */\nfunction setCreator$1(rule) {\n  // The second argument should not be part of the function signature,\n  // so it's not in the parameter list:\n  // eslint-disable-next-line prefer-rest-params\n  if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\n    throw new Error(\"The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.\");\n  }\n  return addIri(rule, acp.agent, acp.CreatorAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to no longer apply to the creator of a Resource.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply/not apply to the creator of a Resource.\r\n * @since 1.6.0\r\n */\nfunction removeCreator$1(rule) {\n  return removeIri(rule, acp.agent, acp.CreatorAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the clients a [[Rule]] applies **directly** to. This will not include\r\n * specific client classes, such as public clients.\r\n *\r\n * @param rule The rule from which clients are read.\r\n * @returns A list of the WebIDs of clients included in the rule.\r\n * @since 1.6.0\r\n */\nfunction getClientAll$1(rule) {\n  return getIriAll(rule, acp.client).filter(client => client !== solid.PublicOidcClient);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the clients the [[Rule]] applies to with the provided Client.\r\n *\r\n * @param rule The rule for which clients are set.\r\n * @param client The Client the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of Clients.\r\n * @since 1.6.0\r\n */\nfunction setClient$1(rule, client) {\n  // Preserve the special \"any client\" class, which we\n  // don't want to overwrite with this function.\n  const anyClientEnabled = hasAnyClient$1(rule);\n  let result = setIri(rule, acp.client, client);\n  // Restore the \"any client\" class\n  if (anyClientEnabled) {\n    result = setAnyClient$1(result);\n  }\n  return result;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional Client.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional Client.\r\n * @param client The Client the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional Client.\r\n * @since 1.6.0\r\n */\nfunction addClient$1(rule, client) {\n  return addIri(rule, acp.client, client);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given Client directly.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given Client.\r\n * @param client The Client the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given Client.\r\n * @since 1.6.0\r\n */\nfunction removeClient$1(rule, client) {\n  return removeIri(rule, acp.client, client);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any client, i.e. all the applications\r\n * regardless of their identifier.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to public clients.\r\n * @since 1.6.0\r\n */\nfunction hasAnyClient$1(rule) {\n  return getIriAll(rule, acp.client).filter(client => client === solid.PublicOidcClient).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Rule]] apply to any client application.\r\n *\r\n * @param rule The rule for which clients are set.\r\n * @returns A copy of the rule, updated to apply to any client\r\n * @since 1.6.0\r\n */\nfunction setAnyClient$1(rule) {\n  return addIri(rule, acp.client, solid.PublicOidcClient);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Rule]] no longer apply to any client application.\r\n *\r\n * @param rule The rule for which clients are set.\r\n * @returns A copy of the rule, updated to no longer apply to any client\r\n * @since 1.6.0\r\n */\nfunction removeAnyClient$1(rule) {\n  return removeIri(rule, acp.client, solid.PublicOidcClient);\n}\n/**\r\n * Gets a human-readable representation of the given [[Rule]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param rule The Rule to get a human-readable representation of.\r\n * @since 1.6.0\r\n */\nfunction ruleAsMarkdown(rule) {\n  let markdown = `## Rule: ${asUrl(rule)}\\n\\n`;\n  let targetEnumeration = \"\";\n  if (hasPublic$1(rule)) {\n    targetEnumeration += \"- Everyone\\n\";\n  }\n  if (hasAuthenticated$1(rule)) {\n    targetEnumeration += \"- All authenticated agents\\n\";\n  }\n  if (hasCreator$1(rule)) {\n    targetEnumeration += \"- The creator of this resource\\n\";\n  }\n  if (hasAnyClient$1(rule)) {\n    targetEnumeration += \"- Users of any client application\\n\";\n  }\n  const targetAgents = getAgentAll$1(rule);\n  if (targetAgents.length > 0) {\n    targetEnumeration += \"- The following agents:\\n  - \";\n    targetEnumeration += `${targetAgents.join(\"\\n  - \")}\\n`;\n  }\n  const targetGroups = getGroupAll(rule);\n  if (targetGroups.length > 0) {\n    targetEnumeration += \"- Members of the following groups:\\n  - \";\n    targetEnumeration += `${targetGroups.join(\"\\n  - \")}\\n`;\n  }\n  const targetClients = getClientAll$1(rule);\n  if (targetClients.length > 0) {\n    targetEnumeration += \"- Users of the following client applications:\\n  - \";\n    targetEnumeration += `${targetClients.join(\"\\n  - \")}\\n`;\n  }\n  markdown += targetEnumeration.length > 0 ? `This rule applies to:\\n${targetEnumeration}` : \"<empty>\\n\";\n  return markdown;\n}\n\n//\n/**\r\n * @param thing the [[Thing]] to check to see if it's an ACP Policy or not\r\n */\nfunction isPolicy(thing) {\n  return getIriAll(thing, rdf.type).includes(acp.Policy);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Policy]].\r\n *\r\n * @param url URL that identifies this Policy.\r\n * @since 1.6.0\r\n */\nfunction createPolicy(url) {\n  const stringUrl = internal_toIriString(url);\n  let policyThing = createThing({\n    url: stringUrl\n  });\n  policyThing = setUrl(policyThing, rdf.type, acp.Policy);\n  return policyThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Policy]] with the given URL from an [[SolidDataset]].\r\n *\r\n * @param policyResource The Resource that contains the given Policy.\r\n * @param url URL that identifies this Policy.\r\n * @returns The requested Policy, if it exists, or `null` if it does not.\r\n * @since 1.6.0\r\n */\nfunction getPolicy(policyResource, url) {\n  const foundThing = getThing(policyResource, url);\n  if (foundThing === null || !isPolicy(foundThing)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Policy]]'s in a given [[SolidDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @since 1.6.0\r\n */\nfunction getPolicyAll(policyResource) {\n  const foundThings = getThingAll(policyResource);\n  const foundPolicies = foundThings.filter(thing => !isThingLocal(thing) && isPolicy(thing));\n  return foundPolicies;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[Policy]] from the given [[SolidDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to remove from the resource.\r\n * @since 1.6.0\r\n */\nfunction removePolicy(policyResource, policy) {\n  return removeThing(policyResource, policy);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Policy]] into the given [[SolidDataset]], replacing previous instances of that Policy.\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to insert into the Resource.\r\n * @returns A new dataset equal to the given resource, but with the given Policy.\r\n * @since 1.6.0\r\n */\nfunction setPolicy(policyResource, policy) {\n  return setThing(policyResource, policy);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes allowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to allow.\r\n * @param modes Modes to allow for this Policy.\r\n * @since Not released yet.\r\n */\nfunction setAllowModesV2(policy, modes) {\n  let newPolicy = removeAll(policy, acp.allow);\n  if (modes.read === true) {\n    newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.read);\n  }\n  if (modes.append === true) {\n    newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.append);\n  }\n  if (modes.write === true) {\n    newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.write);\n  }\n  return newPolicy;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes allowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to allow.\r\n * @param modes Modes to allow for this Policy.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[setAllowModesV2]].\r\n */\nfunction setAllowModesV1(policy, modes) {\n  let newPolicy = removeAll(policy, acp.allow);\n  if (modes.read === true) {\n    newPolicy = addIri(newPolicy, acp.allow, acp.Read);\n  }\n  if (modes.append === true) {\n    newPolicy = addIri(newPolicy, acp.allow, acp.Append);\n  }\n  if (modes.write === true) {\n    newPolicy = addIri(newPolicy, acp.allow, acp.Write);\n  }\n  return newPolicy;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it allows.\r\n *\r\n * @param policy The Policy for which you want to know the Access Modes it allows.\r\n * @since Not released yet.\r\n */\nfunction getAllowModesV2(policy) {\n  const allowedModes = getIriAll(policy, acp.allow);\n  return {\n    read: allowedModes.includes(internal_accessModeIriStrings.read),\n    append: allowedModes.includes(internal_accessModeIriStrings.append),\n    write: allowedModes.includes(internal_accessModeIriStrings.write)\n  };\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it allows.\r\n *\r\n * @param policy The Policy for which you want to know the Access Modes it allows.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[getAllowModesV2]].\r\n */\nfunction getAllowModesV1(policy) {\n  const allowedModes = getIriAll(policy, acp.allow);\n  return {\n    read: allowedModes.includes(acp.Read),\n    append: allowedModes.includes(acp.Append),\n    write: allowedModes.includes(acp.Write)\n  };\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes disallowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to disallow.\r\n * @param modes Modes to disallow for this Policy.\r\n * @since Not released yet.\r\n */\nfunction setDenyModesV2(policy, modes) {\n  let newPolicy = removeAll(policy, acp.deny);\n  if (modes.read === true) {\n    newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.read);\n  }\n  if (modes.append === true) {\n    newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.append);\n  }\n  if (modes.write === true) {\n    newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.write);\n  }\n  return newPolicy;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes disallowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to disallow.\r\n * @param modes Modes to disallow for this Policy.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[setDenyModesV2]].\r\n */\nfunction setDenyModesV1(policy, modes) {\n  let newPolicy = removeAll(policy, acp.deny);\n  if (modes.read === true) {\n    newPolicy = addIri(newPolicy, acp.deny, acp.Read);\n  }\n  if (modes.append === true) {\n    newPolicy = addIri(newPolicy, acp.deny, acp.Append);\n  }\n  if (modes.write === true) {\n    newPolicy = addIri(newPolicy, acp.deny, acp.Write);\n  }\n  return newPolicy;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it disallows.\r\n *\r\n * @param policy The Policy on which you want to know the Access Modes it disallows.\r\n * @since Not released yet.\r\n */\nfunction getDenyModesV2(policy) {\n  const deniedModes = getIriAll(policy, acp.deny);\n  return {\n    read: deniedModes.includes(internal_accessModeIriStrings.read),\n    append: deniedModes.includes(internal_accessModeIriStrings.append),\n    write: deniedModes.includes(internal_accessModeIriStrings.write)\n  };\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it disallows.\r\n *\r\n * @param policy The Policy on which you want to know the Access Modes it disallows.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[getDenyModesV2]].\r\n */\nfunction getDenyModesV1(policy) {\n  const deniedModes = getIriAll(policy, acp.deny);\n  return {\n    read: deniedModes.includes(acp.Read),\n    append: deniedModes.includes(acp.Append),\n    write: deniedModes.includes(acp.Write)\n  };\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[ResourcePolicy]] for the given Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the Policy is to apply.\r\n * @param name The name that identifies this Policy.\r\n * @since 1.6.0\r\n */\nfunction createResourcePolicyFor(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const url = new URL(getSourceUrl(acr));\n  url.hash = `#${name}`;\n  let policyThing = createThing({\n    url: url.href\n  });\n  policyThing = setUrl(policyThing, rdf.type, acp.Policy);\n  return policyThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourcePolicy]] with the given name that applies to a Resource\r\n * from its Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose ACR contains the given Policy.\r\n * @param name The name that identifies this Policy.\r\n * @returns The requested Policy, if it exists and applies to the given Resource, or `null` if it does not.\r\n * @since 1.6.0\r\n */\nfunction getResourcePolicy(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const url = new URL(acrUrl);\n  url.hash = `#${name}`;\n  const foundThing = getThing(acr, url.href);\n  if (!getPolicyUrlAll$1(resourceWithAcr).includes(url.href) || foundThing === null || !isPolicy(foundThing)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourcePolicy]] with the given name that applies to a Resource's\r\n * Access Control Resource from that Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose ACR contains the given Policy.\r\n * @param name The name that identifies this Policy.\r\n * @returns The requested Policy, if it exists and applies to the Resource's ACR, or `null` if it does not.\r\n * @since 1.6.0\r\n */\nfunction getResourceAcrPolicy(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const url = new URL(acrUrl);\n  url.hash = `#${name}`;\n  const foundThing = getThing(acr, url.href);\n  if (!getAcrPolicyUrlAll$1(resourceWithAcr).includes(url.href) || foundThing === null || !isPolicy(foundThing)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[ResourcePolicy]]'s that apply to a Resource in its Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies applying to it.\r\n * @since 1.6.0\r\n */\nfunction getResourcePolicyAll(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const policyUrls = getPolicyUrlAll$1(resourceWithAcr);\n  const foundThings = policyUrls.map(policyUrl => getThing(acr, policyUrl));\n  const foundPolicies = foundThings.filter(thing => thing !== null && isPolicy(thing));\n  return foundPolicies;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[ResourcePolicy]]'s that apply to a given Resource's Access Control\r\n * Resource from that Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @since 1.6.0\r\n */\nfunction getResourceAcrPolicyAll(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const policyUrls = getAcrPolicyUrlAll$1(resourceWithAcr);\n  const foundThings = policyUrls.map(policyUrl => getThing(acr, policyUrl));\n  const foundPolicies = foundThings.filter(thing => thing !== null && isPolicy(thing));\n  return foundPolicies;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[ResourcePolicy]] from the given Resource's Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to remove from the Resource's Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction removeResourcePolicy(resourceWithAcr, policy) {\n  const acr = internal_getAcr(resourceWithAcr);\n  let policyToRemove = policy;\n  if (typeof policyToRemove === \"string\") {\n    if (internal_isValidUrl(policyToRemove) === false) {\n      // If the given Policy to remove is the name of the Policy,\n      // resolve it to its full URL — developers usually refer to either the\n      // Policy itself, or by its name, as they do not have access to the ACR\n      // directly.\n      const policyUrl = new URL(getSourceUrl(acr));\n      policyUrl.hash = `#${policy}`;\n      policyToRemove = policyUrl.href;\n    }\n  }\n  let policyUrlString;\n  if (typeof policyToRemove === \"string\") {\n    policyUrlString = policyToRemove;\n  } else if (isNamedNode(policyToRemove)) {\n    policyUrlString = internal_toIriString(policyToRemove);\n  } else {\n    policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));\n  }\n  // Check whether the actual Policy (i.e. with the Policy type) exists:\n  const matchingRule = getResourcePolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));\n  if (matchingRule === null) {\n    // No such Policy exists yet, so return the Resource+ACR unchanged:\n    return resourceWithAcr;\n  }\n  const updatedAcr = removeThing(acr, policyToRemove);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return removePolicyUrl$1(updatedResource, policyUrlString);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[ResourcePolicy]] that applies to a given Resource's Access\r\n * Control Resource from that Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The ACR Policy to remove from the Resource's Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction removeResourceAcrPolicy(resourceWithAcr, policy) {\n  const acr = internal_getAcr(resourceWithAcr);\n  let policyToRemove = policy;\n  if (typeof policyToRemove === \"string\") {\n    if (internal_isValidUrl(policyToRemove) === false) {\n      // If the given Policy to remove is the name of the Policy,\n      // resolve it to its full URL — developers usually refer to either the\n      // Policy itself, or by its name, as they do not have access to the ACR\n      // directly.\n      const policyUrl = new URL(getSourceUrl(acr));\n      policyUrl.hash = `#${policy}`;\n      policyToRemove = policyUrl.href;\n    }\n  }\n  let policyUrlString;\n  if (typeof policyToRemove === \"string\") {\n    policyUrlString = policyToRemove;\n  } else if (isNamedNode(policyToRemove)) {\n    policyUrlString = internal_toIriString(policyToRemove);\n  } else {\n    policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));\n  }\n  // Check whether the actual Policy (i.e. with the Policy type) exists:\n  const matchingRule = getResourceAcrPolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));\n  if (matchingRule === null) {\n    // No such Policy exists yet, so return the Resource+ACR unchanged:\n    return resourceWithAcr;\n  }\n  const updatedAcr = removeThing(acr, policyToRemove);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return removeAcrPolicyUrl$1(updatedResource, policyUrlString);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control\r\n * Resource, replacing previous instances of that Policy.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to insert into the Resource's Access Control Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction setResourcePolicy$1(resourceWithAcr, policy) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const updatedAcr = setThing(acr, policy);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  const policyUrl = asUrl(policy, getSourceUrl(acr));\n  return addPolicyUrl$1(updatedResource, policyUrl);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control\r\n * Resource, replacing previous instances of that Policy, to apply to the Access\r\n * Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to insert into the Resource's Access Control Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource, applying to that Access Control Resource.\r\n * @since 1.6.0\r\n */\nfunction setResourceAcrPolicy(resourceWithAcr, policy) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const updatedAcr = setThing(acr, policy);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  const policyUrl = asUrl(policy, getSourceUrl(acr));\n  return addAcrPolicyUrl$1(updatedResource, policyUrl);\n}\n/**\r\n * Gets a human-readable representation of the given [[Policy]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param policy The Policy to get a human-readable representation of.\r\n * @since 1.6.0\r\n * @deprecated\r\n */\nfunction policyAsMarkdown(policy) {\n  function getStatus(allow, deny) {\n    if (deny) {\n      return \"denied\";\n    }\n    if (allow) {\n      return \"allowed\";\n    }\n    return \"unspecified\";\n  }\n  const allowModes = getAllowModesV1(policy);\n  const denyModes = getDenyModesV1(policy);\n  let markdown = `## Policy: ${asUrl(policy)}\\n\\n`;\n  markdown += `- Read: ${getStatus(allowModes.read, denyModes.read)}\\n`;\n  markdown += `- Append: ${getStatus(allowModes.append, denyModes.append)}\\n`;\n  markdown += `- Write: ${getStatus(allowModes.write, denyModes.write)}\\n`;\n  const allOfRules = getAllOfRuleUrlAll(policy);\n  const anyOfRules = getAnyOfRuleUrlAll(policy);\n  const noneOfRules = getNoneOfRuleUrlAll(policy);\n  if (allOfRules.length === 0 && anyOfRules.length === 0 && noneOfRules.length === 0) {\n    markdown += \"\\n<no rules specified yet>\\n\";\n  }\n  if (allOfRules.length > 0) {\n    markdown += \"\\nAll of these rules should match:\\n\";\n    markdown += `- ${allOfRules.join(\"\\n- \")}\\n`;\n  }\n  if (anyOfRules.length > 0) {\n    markdown += \"\\nAt least one of these rules should match:\\n\";\n    markdown += `- ${anyOfRules.join(\"\\n- \")}\\n`;\n  }\n  if (noneOfRules.length > 0) {\n    markdown += \"\\nNone of these rules should match:\\n\";\n    markdown += `- ${noneOfRules.join(\"\\n- \")}\\n`;\n  }\n  return markdown;\n}\n\n//\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[AccessControlResource]].\r\n * ```\r\n *\r\n * Initialises a new empty Access Control Resource for a given Resource for use\r\n * in **unit tests**.\r\n *\r\n * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.\r\n * @returns The mocked empty Access Control Resource for the given Resource.\r\n * @since 1.6.0\r\n */\nfunction mockAcrFor(resourceUrl) {\n  const acrUrl = new URL(\"access-control-resource\", resourceUrl).href;\n  const acr = Object.assign(Object.assign({}, mockSolidDatasetFrom(acrUrl)), {\n    accessTo: resourceUrl\n  });\n  return acr;\n}\n/**\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * Resource with an [[AccessControlResource]].\r\n * ```\r\n *\r\n * Attaches an Access Control Resource to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getPolicyUrlAll]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @param accessControlResource The Access Control Resource to attach to the given Resource.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n * @since 1.6.0\r\n */\nfunction addMockAcrTo(resource) {\n  let accessControlResource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mockAcrFor(getSourceUrl(resource));\n  const resourceWithAcr = Object.assign(internal_cloneResource(resource), {\n    internal_acp: {\n      acr: accessControlResource,\n      aprs: {}\n    }\n  });\n  return resourceWithAcr;\n}\n\n//\nconst v2AcpFunctions = {\n  getFileWithAccessDatasets,\n  getFileWithAcr,\n  getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr,\n  hasAccessibleAcr,\n  saveAcrFor\n};\nconst v2ControlFunctions = {\n  acrAsMarkdown,\n  addAcrPolicyUrl: addAcrPolicyUrl$1,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\n  addMemberPolicyUrl: addMemberPolicyUrl$1,\n  addPolicyUrl: addPolicyUrl$1,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,\n  getPolicyUrlAll: getPolicyUrlAll$1,\n  hasLinkedAcr,\n  removeAcrPolicyUrl: removeAcrPolicyUrl$1,\n  removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\n  removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrl: removeMemberPolicyUrl$1,\n  removeMemberPolicyUrlAll,\n  removePolicyUrl: removePolicyUrl$1,\n  removePolicyUrlAll\n};\nconst v2PolicyFunctions = {\n  createPolicy,\n  getAllowModes: getAllowModesV1,\n  getDenyModes: getDenyModesV1,\n  getPolicy,\n  getPolicyAll,\n  policyAsMarkdown,\n  removePolicy,\n  setAllowModes: setAllowModesV1,\n  setDenyModes: setDenyModesV1,\n  setPolicy\n};\nconst v2RuleFunctions = {\n  addAgent: addAgent$1,\n  addForbiddenRuleUrl: addNoneOfRuleUrl,\n  addGroup,\n  addOptionalRuleUrl: addAnyOfRuleUrl,\n  addRequiredRuleUrl: addAllOfRuleUrl,\n  createRule,\n  getAgentAll: getAgentAll$1,\n  getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,\n  getGroupAll,\n  getOptionalRuleUrlAll: getAnyOfRuleUrlAll,\n  getRequiredRuleUrlAll: getAllOfRuleUrlAll,\n  getRule,\n  getRuleAll,\n  hasAuthenticated: hasAuthenticated$1,\n  hasCreator: hasCreator$1,\n  hasPublic: hasPublic$1,\n  removeAgent: removeAgent$1,\n  removeForbiddenRuleUrl: removeNoneOfRuleUrl,\n  removeGroup,\n  removeOptionalRuleUrl: removeAnyOfRuleUrl,\n  removeRequiredRuleUrl: removeAllOfRuleUrl,\n  removeRule,\n  ruleAsMarkdown,\n  setAgent: setAgent$1,\n  setForbiddenRuleUrl: setNoneOfRuleUrl,\n  setGroup,\n  setOptionalRuleUrl: setAnyOfRuleUrl,\n  setRequiredRuleUrl: setAllOfRuleUrl,\n  setRule\n};\nconst v2MockFunctions = {\n  addMockAcrTo,\n  mockAcrFor\n};\n/* istanbul ignore next Not a supported public API: */\n/** @deprecated Replaced by [[setPublic]] */\nfunction previousSetPublicSignature(rule, enable) {\n  return enable ? setPublic$1(rule) : removePublic$1(rule);\n}\n/* istanbul ignore next Not a supported public API: */\n/** @deprecated Replaced by [[setAuthenticated]] */\nfunction previousSetAuthenticatedSignature(rule, enable) {\n  return enable ? setAuthenticated$1(rule) : removeAuthenticated$1(rule);\n}\n/* istanbul ignore next Not a supported public API: */\n/** @deprecated Replaced by [[setCreator]] */\nfunction previousSetCreatorSignature(rule, enable) {\n  return enable ? setCreator$1(rule) : removeCreator$1(rule);\n}\nconst deprecatedFunctions$1 = {\n  /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */\n  getForbiddenRuleurlAll: getNoneOfRuleUrlAll,\n  setPublic: previousSetPublicSignature,\n  setAuthenticated: previousSetAuthenticatedSignature,\n  setCreator: previousSetCreatorSignature\n};\n/**\r\n * @hidden\r\n * @deprecated Replaced by [[acp_v3]].\r\n */\nconst acp_v2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v2AcpFunctions), v2ControlFunctions), v2PolicyFunctions), v2RuleFunctions), v2MockFunctions), deprecatedFunctions$1);\n\n//\nconst v1AcpFunctions = {\n  getFileWithAccessDatasets,\n  getFileWithAcr,\n  getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr,\n  hasAccessibleAcr,\n  saveAcrFor\n};\nconst v1PolicyFunctions = {\n  createPolicy,\n  getAllowModes: getAllowModesV1,\n  getDenyModes: getDenyModesV1,\n  getPolicy,\n  getPolicyAll,\n  policyAsMarkdown,\n  removePolicy,\n  setAllowModes: setAllowModesV1,\n  setDenyModes: setDenyModesV1,\n  setPolicy\n};\nconst v1RuleFunctions = {\n  addAgent: addAgent$1,\n  addForbiddenRuleUrl: addNoneOfRuleUrl,\n  addGroup,\n  addOptionalRuleUrl: addAnyOfRuleUrl,\n  addRequiredRuleUrl: addAllOfRuleUrl,\n  createRule,\n  getAgentAll: getAgentAll$1,\n  getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,\n  getGroupAll,\n  getOptionalRuleUrlAll: getAnyOfRuleUrlAll,\n  getRequiredRuleUrlAll: getAllOfRuleUrlAll,\n  getRule,\n  getRuleAll,\n  hasAuthenticated: hasAuthenticated$1,\n  hasCreator: hasCreator$1,\n  hasPublic: hasPublic$1,\n  removeAgent: removeAgent$1,\n  removeForbiddenRuleUrl: removeNoneOfRuleUrl,\n  removeGroup,\n  removeOptionalRuleUrl: removeAnyOfRuleUrl,\n  removeRequiredRuleUrl: removeAllOfRuleUrl,\n  removeRule,\n  ruleAsMarkdown,\n  setAgent: setAgent$1,\n  setForbiddenRuleUrl: setNoneOfRuleUrl,\n  setGroup,\n  setOptionalRuleUrl: setAnyOfRuleUrl,\n  setRequiredRuleUrl: setAllOfRuleUrl,\n  setRule\n};\nconst v1MockFunctions = {\n  addMockAcrTo,\n  mockAcrFor\n};\nconst v1ControlFunctions = {\n  hasLinkedAcr,\n  addAcrPolicyUrl: addAcrPolicyUrl$1,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\n  removeAcrPolicyUrl: removeAcrPolicyUrl$1,\n  removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\n  removeMemberAcrPolicyUrlAll\n};\nconst deprecatedFunctions = {\n  createControl: internal_createControl,\n  getControl: internal_getControl,\n  getAllControl: internal_getControlAll,\n  getControlAll: internal_getControlAll,\n  setControl: internal_setControl,\n  removeControl,\n  addPolicyUrl: internal_addPolicyUrl,\n  getPolicyUrlAll: internal_getPolicyUrlAll,\n  removePolicyUrl: internal_removePolicyUrl,\n  removePolicyUrlAll: internal_removePolicyUrlAll,\n  addMemberPolicyUrl: internal_addMemberPolicyUrl,\n  getMemberPolicyUrlAll: internal_getMemberPolicyUrlAll,\n  removeMemberPolicyUrl: internal_getMemberPolicyUrlAll,\n  removeMemberPolicyUrlAll: internal_removeMemberPolicyUrlAll,\n  /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */\n  getForbiddenRuleurlAll: getNoneOfRuleUrlAll,\n  setPublic: previousSetPublicSignature,\n  setAuthenticated: previousSetAuthenticatedSignature,\n  setCreator: previousSetCreatorSignature\n};\n/**\r\n * @hidden\r\n * @deprecated Replaced by [[acp_v2]].\r\n */\nconst acp_v1 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v1AcpFunctions), v1PolicyFunctions), v1RuleFunctions), v1MockFunctions), v1ControlFunctions), deprecatedFunctions);\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove an [[Control]] from the [[AccessControlResource]] of a Resource.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource from which to remove an Access Control.\r\n * @param control The [[Control]] to remove from the given Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, excluding the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\nfunction removeControl(withAccessControlResource, control) {\n  const acr = internal_getAcr(withAccessControlResource);\n  const updatedAcr = removeThing(acr, control);\n  const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\n  return updatedResource;\n}\n\n//\nconst v3AcpFunctions = {\n  getFileWithAccessDatasets,\n  getFileWithAcr,\n  getLinkedAcrUrl,\n  getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr,\n  hasAccessibleAcr,\n  saveAcrFor,\n  isAcpControlled\n};\nconst v3ControlFunctions = {\n  acrAsMarkdown,\n  addAcrPolicyUrl: addAcrPolicyUrl$1,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\n  addMemberPolicyUrl: addMemberPolicyUrl$1,\n  addPolicyUrl: addPolicyUrl$1,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,\n  getPolicyUrlAll: getPolicyUrlAll$1,\n  hasLinkedAcr,\n  removeAcrPolicyUrl: removeAcrPolicyUrl$1,\n  removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\n  removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrl: removeMemberPolicyUrl$1,\n  removeMemberPolicyUrlAll,\n  removePolicyUrl: removePolicyUrl$1,\n  removePolicyUrlAll\n};\nconst v3PolicyFunctions = {\n  createPolicy,\n  getAllowModes: getAllowModesV1,\n  getDenyModes: getDenyModesV1,\n  getPolicy,\n  getPolicyAll,\n  policyAsMarkdown,\n  removePolicy,\n  setAllowModes: setAllowModesV1,\n  setDenyModes: setDenyModesV1,\n  setPolicy,\n  createResourcePolicyFor,\n  getResourceAcrPolicy,\n  getResourceAcrPolicyAll,\n  getResourcePolicy,\n  getResourcePolicyAll,\n  removeResourceAcrPolicy,\n  removeResourcePolicy,\n  setResourceAcrPolicy,\n  setResourcePolicy: setResourcePolicy$1\n};\nconst v3RuleFunctions = {\n  addAgent: addAgent$1,\n  addGroup,\n  createRule,\n  getAgentAll: getAgentAll$1,\n  getGroupAll,\n  getRule,\n  getRuleAll,\n  removeAgent: removeAgent$1,\n  removeGroup,\n  removeRule,\n  ruleAsMarkdown,\n  setAgent: setAgent$1,\n  setGroup,\n  setRule,\n  addClient: addClient$1,\n  getClientAll: getClientAll$1,\n  hasAnyClient: hasAnyClient$1,\n  removeClient: removeClient$1,\n  setAnyClient: setAnyClient$1,\n  setClient: setClient$1,\n  removeAnyClient: removeAnyClient$1,\n  hasAuthenticated: hasAuthenticated$1,\n  hasCreator: hasCreator$1,\n  hasPublic: hasPublic$1,\n  setAuthenticated: setAuthenticated$1,\n  setCreator: setCreator$1,\n  setPublic: setPublic$1,\n  removeAuthenticated: removeAuthenticated$1,\n  removeCreator: removeCreator$1,\n  removePublic: removePublic$1,\n  getAnyOfRuleUrlAll,\n  addAnyOfRuleUrl,\n  removeAnyOfRuleUrl,\n  setAnyOfRuleUrl,\n  getAllOfRuleUrlAll,\n  addAllOfRuleUrl,\n  removeAllOfRuleUrl,\n  setAllOfRuleUrl,\n  getNoneOfRuleUrlAll,\n  addNoneOfRuleUrl,\n  removeNoneOfRuleUrl,\n  setNoneOfRuleUrl,\n  createResourceRuleFor,\n  getResourceRule,\n  getResourceRuleAll,\n  removeResourceRule,\n  setResourceRule\n};\nconst v3MockFunctions = {\n  addMockAcrTo,\n  mockAcrFor\n};\n/**\r\n * @hidden\r\n * @deprecated Please import \"acp_ess_1\" directly.\r\n */\nconst acp_v3 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v3AcpFunctions), v3ControlFunctions), v3PolicyFunctions), v3RuleFunctions), v3MockFunctions);\n\n//\n/** @hidden */\nfunction setAccessControlResourceThing(resource, thing) {\n  return Object.assign(internal_cloneResource(resource), {\n    internal_acp: Object.assign(Object.assign({}, resource.internal_acp), {\n      acr: setThing(resource.internal_acp.acr, thing)\n    })\n  });\n}\n\n//\nfunction getAccessControlTypeFromDefaultAccessControlName(name) {\n  if (name.includes(\"Member\")) {\n    return ACP.memberAccessControl;\n  }\n  return ACP.accessControl;\n}\n/** @hidden */\nfunction setDefaultAccessControlThingIfNotExist(resource, name) {\n  const defaultAccessControlThingUrl = getDefaultAccessControlUrl(resource, name);\n  const acr = internal_getAcr(resource);\n  // Get the Access Control Resource Thing or create it\n  let accessControlResourceThing = getAccessControlResourceThing(resource);\n  if (accessControlResourceThing === null || typeof accessControlResourceThing === \"undefined\") {\n    accessControlResourceThing = createThing({\n      url: getSourceUrl(acr)\n    });\n  }\n  // Get the Default Access Control Thing or create it and return\n  const accessControlUrlAll = getIriAll(accessControlResourceThing, getAccessControlTypeFromDefaultAccessControlName(name));\n  if (!accessControlUrlAll.includes(defaultAccessControlThingUrl)) {\n    accessControlResourceThing = buildThing(accessControlResourceThing).addUrl(getAccessControlTypeFromDefaultAccessControlName(name), defaultAccessControlThingUrl).build();\n    return setAccessControlResourceThing(resource, accessControlResourceThing);\n  }\n  // Return the original resource if the ACR and Default AC exist\n  return resource;\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the ACR of the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to its access control resource.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction addAcrPolicyUrl(resourceWithAcr, policyUrl) {\n  const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_ACR_ACCESS_CONTROL);\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_ACR_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.access, policyUrl).build());\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the ACRs of the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to its children's access control resources.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction addMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\n  const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.access, policyUrl).build());\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to its children.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction addMemberPolicyUrl(resourceWithAcr, policyUrl) {\n  const resourceWithAcrContainingDefaultMemberAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_MEMBER_ACCESS_CONTROL);\n  const defaultMemberAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultMemberAccessControl, DEFAULT_MEMBER_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcrContainingDefaultMemberAccessControl, buildThing(defaultMemberAccessControlThing).addUrl(ACP.apply, policyUrl).build());\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to it.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction addPolicyUrl(resourceWithAcr, policyUrl) {\n  const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_ACCESS_CONTROL);\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.apply, policyUrl).build());\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URL of all access controls linked to the given resource's ACR.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of access\r\n * controls applying to it.\r\n * @returns Access Control URL array\r\n * @since 1.6.0\r\n */\nfunction getAccessControlUrlAll(resourceWithAcr) {\n  const acrThing = getAccessControlResourceThing(resourceWithAcr);\n  if (acrThing === null) {\n    return [];\n  }\n  return getIriAll(acrThing, ACP.accessControl);\n}\n\n//\n/** @hidden */\nfunction getPolicyUrls(resource, accessControlUrls, type) {\n  const acr = internal_getAcr(resource);\n  return Array.from(new Set(accessControlUrls.map(accessControlUrl => {\n    const accessControlThing = getThing(acr, accessControlUrl);\n    // istanbul ignore next\n    if (accessControlThing !== null) {\n      return getIriAll(accessControlThing, type);\n    }\n    // istanbul ignore next\n    return [];\n  }).reduce((previousValue, currentValue) => previousValue.concat(currentValue), [])));\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the ACR of the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of policies\r\n * applying to its access control resource.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\nfunction getAcrPolicyUrlAll(resourceWithAcr) {\n  return getPolicyUrls(resourceWithAcr, getAccessControlUrlAll(resourceWithAcr), ACP.access);\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URL of all member access controls linked to the given resource's ACR.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of access\r\n * controls inherited by its children.\r\n * @returns Access Control URL array\r\n * @since 1.6.0\r\n */\nfunction getMemberAccessControlUrlAll(resourceWithAcr) {\n  const acrThing = getAccessControlResourceThing(resourceWithAcr);\n  if (acrThing === null) {\n    return [];\n  }\n  return getIriAll(acrThing, ACP.memberAccessControl);\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the ACRs of the given resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of policies\r\n * applying to its children's access control resources.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\nfunction getMemberAcrPolicyUrlAll(resourceWithAcr) {\n  return getPolicyUrls(resourceWithAcr, getMemberAccessControlUrlAll(resourceWithAcr), ACP.access);\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs policies\r\n * applying to its children.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\nfunction getMemberPolicyUrlAll(resourceWithAcr) {\n  return getPolicyUrls(resourceWithAcr, getMemberAccessControlUrlAll(resourceWithAcr), ACP.apply);\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of policies\r\n * applying to it.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\nfunction getPolicyUrlAll(resourceWithAcr) {\n  return getPolicyUrls(resourceWithAcr, getAccessControlUrlAll(resourceWithAcr), ACP.apply);\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the ACR of the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to its access control resource.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction removeAcrPolicyUrl(resourceWithAcr, policyUrl) {\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_ACR_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.access, policyUrl));\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the ACRs of the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to its children's access control resources.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction removeMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.access, policyUrl));\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to its children.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction removeMemberPolicyUrl(resourceWithAcr, policyUrl) {\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_MEMBER_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.apply, policyUrl));\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to it.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\nfunction removePolicyUrl(resourceWithAcr, policyUrl) {\n  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_ACCESS_CONTROL);\n  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.apply, policyUrl));\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control\r\n * Resource, replacing previous instances of that Policy.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to insert into the Resource's Access Control Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.\r\n * @since 1.18.0\r\n */\nfunction setResourcePolicy(resourceWithAcr, policy) {\n  return setAccessControlResourceThing(resourceWithAcr, policy);\n}\n\n//\n/**\r\n * @param thing the [[Thing]] to check to see if it's an ACP Matcher or not\r\n */\nfunction isMatcher(thing) {\n  return getIriAll(thing, rdf.type).includes(acp.Matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a Matcher that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" Matchers,\r\n * they will not be granted access.\r\n *\r\n * Also see [[addAnyOfMatcherUrl]] and [[addNoneOfMatcherUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new Matcher added.\r\n * @since Not released yet.\r\n */\nfunction addAllOfMatcherUrl(policy, matcher) {\n  return addIri(policy, acp.allOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a Matcher that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" Matchers,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] from which the Matcher should be removed.\r\n * @param matcher The Matcher to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the Matcher removed.\r\n * @since Not released yet.\r\n */\nfunction removeAllOfMatcherUrl(policy, matcher) {\n  return removeIri(policy, acp.allOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrites the Matcher refining the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" Matchers,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to set for the Policy.\r\n * @returns A new [[Policy]] clone of the original one, with the \"All Of\" Matchers replaced.\r\n * @since Not released yet.\r\n */\nfunction setAllOfMatcherUrl(policy, matcher) {\n  return setIri(policy, acp.allOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"All Of\" [[Matcher]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the Matchers should be read.\r\n * @returns A list of the \"All Of\" [[Matcher]]s\r\n * @since Not released yet.\r\n */\nfunction getAllOfMatcherUrlAll(policy) {\n  return getIriAll(policy, acp.allOf);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a Matcher that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" Matchers,\r\n * they will be granted access.\r\n *\r\n * Also see [[addAllOfMatcherUrl]] and [[addNoneOfMatcherUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new Matcher added.\r\n * @since Not released yet.\r\n */\nfunction addAnyOfMatcherUrl(policy, matcher) {\n  return addIri(policy, acp.anyOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a Matcher that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" Matchers,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] from which the Matcher should be removed.\r\n * @param matcher The Matcher to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the Matcher removed.\r\n * @since Not released yet.\r\n */\nfunction removeAnyOfMatcherUrl(policy, matcher) {\n  return removeIri(policy, acp.anyOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the Matcher extending the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" Matchers,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to set for the Policy.\r\n * @returns A new [[Policy]] clone of the original one, with the \"Any Of\" Matchers replaced.\r\n * @since Not released yet.\r\n */\nfunction setAnyOfMatcherUrl(policy, matcher) {\n  return setIri(policy, acp.anyOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"Any Of\" [[Matcher]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the Matchers should be read.\r\n * @returns A list of the \"Any Of\" [[Matcher]]s\r\n * @since Not released yet.\r\n */\nfunction getAnyOfMatcherUrlAll(policy) {\n  return getIriAll(policy, acp.anyOf);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a Matcher that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is matched by another Matcher, but **also**\r\n * by the given Matcher, they will **not** be granted access.\r\n *\r\n * Also see [[addAllOfMatcherUrl]] and [[addAnyOfMatcherUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new Matcher added.\r\n * @since Not released yet.\r\n */\nfunction addNoneOfMatcherUrl(policy, matcher) {\n  return addIri(policy, acp.noneOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a Matcher that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is matched by another Matcher, but **also**\r\n * in any of the \"None Of\" Matchers, they will **not** be granted access.\r\n *\r\n * @param policy The [[Policy]] from which the Matcher should be removed.\r\n * @param matcher The Matcher to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the Matcher removed.\r\n * @since Not released yet.\r\n */\nfunction removeNoneOfMatcherUrl(policy, matcher) {\n  return removeIri(policy, acp.noneOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set the Matchers restricting the scope of a given [[Policy]]. If an agent\r\n * requesting access to a resource is matched by another Matcher, but **also**\r\n * by any of the \"None Of\" Matchers, they will not be granted access.\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to set for the Policy.\r\n * @returns A new [[Policy]] clone of the original one, with the \"None Of\" Matchers replaced.\r\n * @since Not released yet.\r\n */\nfunction setNoneOfMatcherUrl(policy, matcher) {\n  return setIri(policy, acp.noneOf, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"None Of\" [[Matcher]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the Matchers should be read.\r\n * @returns A list of the forbidden [[Matcher]]s\r\n * @since Not released yet.\r\n */\nfunction getNoneOfMatcherUrlAll(policy) {\n  return getIriAll(policy, acp.noneOf);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Matcher]].\r\n *\r\n * @param url URL that identifies this [[Matcher]].\r\n * @since Not released yet.\r\n */\nfunction createMatcher(url) {\n  const stringUrl = internal_toIriString(url);\n  let matcherThing = createThing({\n    url: stringUrl\n  });\n  matcherThing = setUrl(matcherThing, rdf.type, acp.Matcher);\n  return matcherThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[ResourceMatcher]] for the given Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the new Matcher is to apply.\r\n * @param name Name that identifies this [[Matcher]].\r\n * @since Not released yet.\r\n */\nfunction createResourceMatcherFor(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const url = new URL(getSourceUrl(acr));\n  url.hash = `#${name}`;\n  let matcherThing = createThing({\n    url: url.href\n  });\n  matcherThing = setUrl(matcherThing, rdf.type, acp.Matcher);\n  return matcherThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Matcher]] with the given URL from an [[SolidDataset]].\r\n *\r\n * @param matcherResource The Resource that contains the given [[Matcher]].\r\n * @param url URL that identifies this [[Matcher]].\r\n * @returns The requested [[Matcher]], if it exists, or `null` if it does not.\r\n * @since Not released yet.\r\n */\nfunction getMatcher(matcherResource, url) {\n  const foundThing = getThing(matcherResource, url);\n  if (foundThing === null || !isMatcher(foundThing)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourceMatcher]] with the given name from an Resource's Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceMatcher]].\r\n * @param name Name that identifies this [[ResourceMatcher]].\r\n * @returns The requested [[ResourceMatcher]], if it exists, or `null` if it does not.\r\n * @since Not released yet.\r\n */\nfunction getResourceMatcher(resourceWithAcr, name) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const acrUrl = getSourceUrl(acr);\n  const url = new URL(acrUrl);\n  url.hash = `#${name}`;\n  const foundThing = getThing(acr, url.href);\n  if (foundThing === null || !isMatcher(foundThing)) {\n    return null;\n  }\n  return foundThing;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[Matcher]]s from a [[SolidDataset]].\r\n *\r\n * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.\r\n * @returns The [[Matcher]]s contained in this resource.\r\n * @since Not released yet.\r\n */\nfunction getMatcherAll(matcherResource) {\n  const things = getThingAll(matcherResource);\n  return things.filter(isMatcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[ResourceMatcher]]s from a Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.\r\n * @returns The [[ResourceMatcher]]s contained in this Resource's Access Control Resource.\r\n * @since Not released yet.\r\n */\nfunction getResourceMatcherAll(resourceWithAcr) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const things = getThingAll(acr);\n  return things.filter(isMatcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[Matcher]] from the given [[SolidDataset]].\r\n *\r\n * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.\r\n * @returns A new SolidDataset equal to the given Matcher Resource, but without the given Matcher.\r\n * @since Not released yet.\r\n */\nfunction removeMatcher(matcherResource, matcher) {\n  return removeThing(matcherResource, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[ResourceMatcher]] from the given Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.\r\n * @returns A new Resource equal to the given Resource, but without the given Matcher in its ACR.\r\n * @since Not released yet.\r\n */\nfunction removeResourceMatcher(resourceWithAcr, matcher) {\n  const acr = internal_getAcr(resourceWithAcr);\n  let matcherToRemove;\n  if (typeof matcher === \"string\") {\n    if (internal_isValidUrl(matcher)) {\n      matcherToRemove = matcher;\n    } else {\n      // If the given Matcher to remove is the name of the Matcher,\n      // resolve it to its full URL — developers usually refer to either the\n      // Matcher itself, or by its name, as they do not have access to the ACR\n      // directly.\n      const matcherUrl = new URL(getSourceUrl(acr));\n      matcherUrl.hash = `#${matcher}`;\n      matcherToRemove = matcherUrl.href;\n    }\n  } else if (isNamedNode(matcher)) {\n    matcherToRemove = internal_toIriString(matcher);\n  } else {\n    matcherToRemove = asUrl(matcher);\n  }\n  // Check whether the actual Matcher (i.e. with the Matcher type) exists:\n  const matchingMatcher = getResourceMatcher(resourceWithAcr, new URL(matcherToRemove).hash.substring(1));\n  if (matchingMatcher === null) {\n    // No such Matcher exists yet, so return the Resource+ACR unchanged:\n    return resourceWithAcr;\n  }\n  const updatedAcr = removeThing(acr, matchingMatcher);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Matcher]] into the given [[SolidDataset]], replacing previous\r\n * instances of that Matcher.\r\n *\r\n * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.\r\n * @returns A new SolidDataset equal to the given Matcher Resource, but with the given Matcher.\r\n * @since Not released yet.\r\n */\nfunction setMatcher(matcherResource, matcher) {\n  return setThing(matcherResource, matcher);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourceMatcher]] into the given Resource's Access Control Resource,\r\n * replacing previous instances of that Matcher.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.\r\n * @returns A new Resource equal to the given Resource, but with the given Matcher in its ACR.\r\n * @since Not released yet.\r\n */\nfunction setResourceMatcher(resourceWithAcr, matcher) {\n  const acr = internal_getAcr(resourceWithAcr);\n  const updatedAcr = setThing(acr, matcher);\n  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\n  return updatedResource;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the agents a [[Matcher]] applies **directly** to. This will not include agents\r\n * that are matched on a property other than their WebID.\r\n *\r\n * @param matcher The matcher from which agents are read.\r\n * @returns A list of the WebIDs of agents included in the matcher.\r\n * @since Not released yet.\r\n */\nfunction getAgentAll(matcher) {\n  return getIriAll(matcher, acp.agent).filter(agent => agent !== acp.PublicAgent && agent !== acp.AuthenticatedAgent && agent !== acp.CreatorAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the agents the [[Matcher]] applies to with the provided agents.\r\n *\r\n * @param matcher The matcher for which agents are set.\r\n * @param agent The agent the matcher should apply to.\r\n * @returns A copy of the input matcher, applying to a different set of agents.\r\n * @since Not released yet.\r\n */\nfunction setAgent(matcher, agent) {\n  // Preserve the special agent classes authenticated and public, which we\n  // don't want to overwrite with this function.\n  const isPublic = hasPublic(matcher);\n  const isAuthenticated = hasAuthenticated(matcher);\n  const isCreator = hasCreator(matcher);\n  let result = setIri(matcher, acp.agent, agent);\n  // Restore public and authenticated\n  if (isPublic) {\n    result = setPublic(result);\n  }\n  if (isAuthenticated) {\n    result = setAuthenticated(result);\n  }\n  if (isCreator) {\n    result = setCreator(result);\n  }\n  return result;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Matcher]] to an additional agent.\r\n *\r\n * @param matcher The [[Matcher]] to be applied to an additional agent.\r\n * @param agent The agent the [[Matcher]] should apply to.\r\n * @returns A copy of the [[Matcher]], applying to an additional agent.\r\n * @since Not released yet.\r\n */\nfunction addAgent(matcher, agent) {\n  return addIri(matcher, acp.agent, agent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Matcher]] from applying to a given agent directly. This will not\r\n * prevent the agent from matching on other properties than its WebID.\r\n *\r\n * @param matcher The [[Matcher]] that should no longer apply to a given agent.\r\n * @param agent The agent the Matcher should no longer apply to.\r\n * @returns A copy of the Matcher, not applying to the given agent.\r\n * @since Not released yet.\r\n */\nfunction removeAgent(matcher, agent) {\n  return removeIri(matcher, acp.agent, agent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to any agent.\r\n *\r\n * @param matcher The Matcher checked for public access.\r\n * @returns Whether the Matcher applies to any agent or not.\r\n * @since Not released yet.\r\n */\nfunction hasPublic(matcher) {\n  return getIriAll(matcher, acp.agent).filter(agent => agent === acp.PublicAgent).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to apply to any Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply to any agent.\r\n * @since Not released yet.\r\n */\nfunction setPublic(matcher) {\n  // The second argument should not be part of the function signature,\n  // so it's not in the parameter list:\n  // eslint-disable-next-line prefer-rest-params\n  if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\n    throw new Error(\"The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.\");\n  }\n  return addIri(matcher, acp.agent, acp.PublicAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to no longer apply to any Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to no longer apply to any agent.\r\n * @since Not released yet.\r\n */\nfunction removePublic(matcher) {\n  return removeIri(matcher, acp.agent, acp.PublicAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to any authenticated agent.\r\n *\r\n * @param matcher The Matcher checked for authenticated access.\r\n * @returns Whether the Matcher applies to any authenticated agent or not.\r\n * @since Not released yet.\r\n */\nfunction hasAuthenticated(matcher) {\n  return getIriAll(matcher, acp.agent).filter(agent => agent === acp.AuthenticatedAgent).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to apply to any authenticated Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply to any authenticated Agent.\r\n * @since Not released yet.\r\n */\nfunction setAuthenticated(matcher) {\n  // The second argument should not be part of the function signature,\n  // so it's not in the parameter list:\n  // eslint-disable-next-line prefer-rest-params\n  if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\n    throw new Error(\"The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.\");\n  }\n  return addIri(matcher, acp.agent, acp.AuthenticatedAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to no longer apply to any authenticated Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply/not apply to any authenticated agent.\r\n * @since Not released yet.\r\n */\nfunction removeAuthenticated(matcher) {\n  return removeIri(matcher, acp.agent, acp.AuthenticatedAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to the creator of the Resource.\r\n *\r\n * @param matcher The Matcher checked for authenticated access.\r\n * @returns Whether the Matcher applies to the creator of the Resource or not.\r\n * @since Not released yet.\r\n */\nfunction hasCreator(matcher) {\n  return getIriAll(matcher, acp.agent).filter(agent => agent === acp.CreatorAgent).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to apply to the creator of a Resource.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply to the creator of a Resource.\r\n * @since Not released yet.\r\n */\nfunction setCreator(matcher) {\n  // The second argument should not be part of the function signature,\n  // so it's not in the parameter list:\n  // eslint-disable-next-line prefer-rest-params\n  if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\n    throw new Error(\"The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.\");\n  }\n  return addIri(matcher, acp.agent, acp.CreatorAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to no longer apply to the creator of a Resource.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply/not apply to the creator of a Resource.\r\n * @since Not released yet.\r\n */\nfunction removeCreator(matcher) {\n  return removeIri(matcher, acp.agent, acp.CreatorAgent);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the clients a [[Matcher]] applies **directly** to. This will not include\r\n * specific client classes, such as public clients.\r\n *\r\n * @param matcher The Matcher from which clients are read.\r\n * @returns A list of the WebIDs of clients included in the Matcher.\r\n * @since Not released yet.\r\n */\nfunction getClientAll(matcher) {\n  return getIriAll(matcher, acp.client).filter(client => client !== solid.PublicOidcClient).concat(getStringNoLocaleAll(matcher, acp.client));\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the clients the [[Matcher]] applies to with the provided Client.\r\n *\r\n * @param matcher The Matcher for which clients are set.\r\n * @param client The Client the Matcher should apply to.\r\n * @returns A copy of the input Matcher, applying to a different set of Clients.\r\n */\nfunction setClient(matcher, client) {\n  // Preserve the special \"any client\" class, which we\n  // don't want to overwrite with this function.\n  const anyClientEnabled = hasAnyClient(matcher);\n  let result = setIri(matcher, acp.client, client);\n  // Restore the \"any client\" class\n  if (anyClientEnabled) {\n    result = setAnyClient(result);\n  }\n  return result;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Matcher]] to an additional Client.\r\n *\r\n * @param matcher The [[Matcher]] to be applied to an additional Client.\r\n * @param client The Client the [[Matcher]] should apply to.\r\n * @returns A copy of the [[Matcher]], applying to an additional Client.\r\n * @since Not released yet.\r\n */\nfunction addClient(matcher, client) {\n  if (!internal_isValidUrl(client)) {\n    return addStringNoLocale(matcher, acp.client, client);\n  }\n  return addIri(matcher, acp.client, client);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Matcher]] from applying to a given Client directly.\r\n *\r\n * @param matcher The [[Matcher]] that should no longer apply to a given Client.\r\n * @param client The Client the Matcher should no longer apply to.\r\n * @returns A copy of the Matcher, not applying to the given Client.\r\n * @since Not released yet.\r\n */\nfunction removeClient(matcher, client) {\n  if (!internal_isValidUrl(client)) {\n    return removeStringNoLocale(matcher, acp.client, client);\n  }\n  return removeIri(matcher, acp.client, client);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to any client, i.e. all the applications\r\n * regardless of their identifier.\r\n *\r\n * @param matcher The Matcher checked for authenticated access.\r\n * @returns Whether the Matcher applies to public clients.\r\n * @since Not released yet.\r\n * @deprecated\r\n */\nfunction hasAnyClient(matcher) {\n  return getIriAll(matcher, acp.client).filter(client => client === solid.PublicOidcClient).length > 0;\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Matcher]] apply to any client application.\r\n *\r\n * @param matcher The Matcher for which clients are set.\r\n * @returns A copy of the Matcher, updated to apply to any client\r\n * @since Not released yet.\r\n * @deprecated\r\n */\nfunction setAnyClient(matcher) {\n  return addIri(matcher, acp.client, solid.PublicOidcClient);\n}\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Matcher]] no longer apply to any client application.\r\n *\r\n * @param matcher The Matcher for which clients are set.\r\n * @returns A copy of the Matcher, updated to no longer apply to any client\r\n * @since Not released yet.\r\n * @deprecated\r\n */\nfunction removeAnyClient(matcher) {\n  return removeIri(matcher, acp.client, solid.PublicOidcClient);\n}\n\n//\nconst v4AcpFunctions = {\n  getFileWithAccessDatasets,\n  getFileWithAcr,\n  getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr,\n  hasAccessibleAcr,\n  saveAcrFor,\n  isAcpControlled,\n  getVcAccess,\n  setVcAccess\n};\nconst v4ControlFunctions = {\n  addAcrPolicyUrl,\n  addMemberAcrPolicyUrl,\n  addMemberPolicyUrl,\n  addPolicyUrl,\n  getAcrPolicyUrlAll,\n  getMemberAcrPolicyUrlAll,\n  getMemberPolicyUrlAll,\n  getPolicyUrlAll,\n  hasLinkedAcr,\n  removeAcrPolicyUrl,\n  removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrl,\n  removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrl,\n  removeMemberPolicyUrlAll,\n  removePolicyUrl,\n  removePolicyUrlAll\n};\nconst v4PolicyFunctions = {\n  createPolicy,\n  getAllowModes: getAllowModesV2,\n  getDenyModes: getDenyModesV2,\n  getPolicy,\n  getPolicyAll,\n  removePolicy,\n  setAllowModes: setAllowModesV2,\n  setDenyModes: setDenyModesV2,\n  setPolicy,\n  createResourcePolicyFor,\n  getResourceAcrPolicy,\n  getResourceAcrPolicyAll,\n  getResourcePolicy,\n  getResourcePolicyAll,\n  removeResourceAcrPolicy,\n  removeResourcePolicy,\n  setResourcePolicy\n};\nconst v4MatcherFunctions = {\n  addAgent,\n  createMatcher,\n  getAgentAll,\n  getMatcher,\n  getMatcherAll,\n  removeAgent,\n  removeMatcher,\n  setAgent,\n  setMatcher,\n  addClient,\n  getClientAll,\n  hasAnyClient,\n  removeClient,\n  setAnyClient,\n  setClient,\n  removeAnyClient,\n  hasAuthenticated,\n  hasCreator,\n  hasPublic,\n  setAuthenticated,\n  setCreator,\n  setPublic,\n  removeAuthenticated,\n  removeCreator,\n  removePublic,\n  getAnyOfMatcherUrlAll,\n  addAnyOfMatcherUrl,\n  removeAnyOfMatcherUrl,\n  setAnyOfMatcherUrl,\n  getAllOfMatcherUrlAll,\n  addAllOfMatcherUrl,\n  removeAllOfMatcherUrl,\n  setAllOfMatcherUrl,\n  getNoneOfMatcherUrlAll,\n  addNoneOfMatcherUrl,\n  removeNoneOfMatcherUrl,\n  setNoneOfMatcherUrl,\n  createResourceMatcherFor,\n  getResourceMatcher,\n  getResourceMatcherAll,\n  removeResourceMatcher,\n  setResourceMatcher\n};\nconst v4MockFunctions = {\n  addMockAcrTo,\n  mockAcrFor\n};\n/**\r\n * @hidden\r\n * @deprecated Please import \"acp_ess_2\" directly.\r\n */\nconst acp_v4 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v4AcpFunctions), v4ControlFunctions), v4PolicyFunctions), v4MatcherFunctions), v4MockFunctions);\n\n//\nconst knownActorRelations$1 = [acp.agent, acp.group];\n/**\r\n * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this actor.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setActorAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to get the access for.\r\n * @param actor Which instance of the given actor type you want to get the access for.\r\n * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.\r\n */\nfunction internal_getActorAccess$1(acpData, actorRelation, actor) {\n  if (acpData.inaccessibleUrls.length > 0) {\n    // If we can't see all access data,\n    // we can't reliably determine what access the given actor has:\n    return null;\n  }\n  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));\n  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));\n  const initialAccess = {\n    read: false,\n    append: false,\n    write: false,\n    controlRead: false,\n    controlWrite: false\n  };\n  // All allowed reading and writing defined in ACR policies\n  // determines whether the `controlRead` and `controlWrite` statuses are `true`.\n  const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {\n    const allAllowedAccess = Object.assign({}, acc);\n    const allowModes = getAllowModesV1(policy);\n    if (allowModes.read) {\n      allAllowedAccess.controlRead = true;\n    }\n    if (allowModes.write) {\n      allAllowedAccess.controlWrite = true;\n    }\n    return allAllowedAccess;\n  }, initialAccess);\n  // Then allowed reading, appending and writing in regular policies\n  // determines whether the respective status is `true`.\n  const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {\n    const allAllowedAccess = Object.assign({}, acc);\n    const allowModes = getAllowModesV1(policy);\n    if (allowModes.read) {\n      allAllowedAccess.read = true;\n    }\n    if (allowModes.append) {\n      allAllowedAccess.append = true;\n    }\n    if (allowModes.write) {\n      allAllowedAccess.write = true;\n    }\n    return allAllowedAccess;\n  }, allowedAcrAccess);\n  // At this point, everything that has been explicitly allowed is true.\n  // However, it could still be overridden by access that is explicitly denied.\n  // Starting with `controlRead` and `controlWrite`,\n  // by inspecting denied reading and writing defined in the ACR policies.\n  const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {\n    const allDeniedAccess = Object.assign({}, acc);\n    const denyModes = getDenyModesV1(policy);\n    if (denyModes.read === true) {\n      allDeniedAccess.controlRead = false;\n    }\n    if (denyModes.write === true) {\n      allDeniedAccess.controlWrite = false;\n    }\n    return allDeniedAccess;\n  }, withAllowedAccess);\n  // And finally, we set to `false` those access modes that are explicitly denied\n  // in the regular policies:\n  const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {\n    const allDeniedAccess = Object.assign({}, acc);\n    const denyModes = getDenyModesV1(policy);\n    if (denyModes.read === true) {\n      allDeniedAccess.read = false;\n    }\n    if (denyModes.append === true) {\n      allDeniedAccess.append = false;\n    }\n    if (denyModes.write === true) {\n      allDeniedAccess.write = false;\n    }\n    return allDeniedAccess;\n  }, withAcrDeniedAccess);\n  return withDeniedAccess;\n}\n/**\r\n * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Agent.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\nfunction internal_getAgentAccess$1(acpData, webId) {\n  return internal_getActorAccess$1(acpData, acp.agent, webId);\n}\n/**\r\n * Get an overview of what access is defined for a given Group in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Group.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Group, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setGroupAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param groupUrl URL of the Group you want to get the access for.\r\n * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.\r\n */\nfunction internal_getGroupAccess(acpData, groupUrl) {\n  return internal_getActorAccess$1(acpData, acp.group, groupUrl);\n}\n/**\r\n * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to everybody.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to everybody, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setPublicAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.\r\n */\nfunction internal_getPublicAccess$1(acpData) {\n  return internal_getActorAccess$1(acpData, acp.agent, acp.PublicAgent);\n}\nfunction policyAppliesTo$1(policy, actorRelation, actor, acpData) {\n  const allowModes = getIriAll(policy, acp.allow);\n  const denyModes = getIriAll(policy, acp.deny);\n  if (allowModes.length + denyModes.length === 0) {\n    // A Policy that does not specify access modes does not do anything:\n    return false;\n  }\n  // Note: the non-null assertions (`!`) here should be valid because\n  //       the caller of `policyAppliesTo` should already have validated that\n  //       the return value of internal_getPoliciesAndRules() did not have any\n  //       inaccessible URLs, so we should be able to find every Rule.\n  const allOfRules = getAllOfRuleUrlAll(policy).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));\n  const anyOfRules = getAnyOfRuleUrlAll(policy).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));\n  const noneOfRules = getNoneOfRuleUrlAll(policy).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));\n  // We assume that this Policy applies if this specific actor is mentioned\n  // and no further restrictions are in place.\n  // (In other words, the Policy may apply to others *in addition to* this\n  // actor, but if it applies to this actor *unless* some other condition holds,\n  // we cannot be sure whether it will apply to this actor.)\n  // This means that:\n  return (\n    // Every existing allOf Rule explicitly applies explicitly to this given actor:\n    allOfRules.every(rule => ruleAppliesTo(rule, actorRelation, actor)) && (\n    // If there are anyOf Rules, at least one applies explicitly to this actor:\n    anyOfRules.length === 0 || anyOfRules.some(rule => ruleAppliesTo(rule, actorRelation, actor))) &&\n    // No further restrictions are in place that make this sometimes not apply\n    // to the given actor:\n    noneOfRules.length === 0\n  );\n}\nfunction policyConflictsWith$1(policy, otherAccess) {\n  const allowModes = getIriAll(policy, acp.allow);\n  const denyModes = getIriAll(policy, acp.deny);\n  return otherAccess.read === true && denyModes.includes(acp.Read) || otherAccess.read === false && allowModes.includes(acp.Read) && !denyModes.includes(acp.Read) || otherAccess.append === true && denyModes.includes(acp.Append) || otherAccess.append === false && allowModes.includes(acp.Append) && !denyModes.includes(acp.Append) || otherAccess.write === true && denyModes.includes(acp.Write) || otherAccess.write === false && allowModes.includes(acp.Write) && !denyModes.includes(acp.Write);\n}\nfunction ruleAppliesTo(rule, actorRelation, actor) {\n  // A Rule that does not list *any* actor matches for everyone:\n  let isEmpty = true;\n  knownActorRelations$1.forEach(knownActorRelation => {\n    isEmpty && (isEmpty = getIri(rule, knownActorRelation) === null);\n  });\n  return isEmpty || getIriAll(rule, actorRelation).includes(actor);\n}\n/**\r\n * Get a set of all actors mentioned in an ACR by active Rules (i.e. that are\r\n * referenced by Policies referenced by the ACR Control, and therefore that\r\n * effectively apply).\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation\r\n */\nfunction internal_findActorAll$1(acpData, actorRelation) {\n  const actors = new Set();\n  // This code could be prettier using flat(), which isn't supported by nodeJS 10.\n  // If you read this comment after April 2021, feel free to refactor.\n  acpData.rules.forEach(rule => {\n    getIriAll(rule, actorRelation).filter(iri => ![acp.PublicAgent, acp.CreatorAgent, acp.AuthenticatedAgent].includes(iri) || actorRelation !== acp.agent).forEach(iri => actors.add(iri));\n  });\n  return actors;\n}\n/**\r\n * Iterate through all the actors active for an ACR, and list all of their access.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation The type of actor we want to list access for\r\n * @returns A map with each actor access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\nfunction internal_getActorAccessAll$1(acpData, actorRelation) {\n  if (acpData.inaccessibleUrls.length > 0) {\n    // If we can't see all access data,\n    // we can't reliably determine what access actors of the given type have:\n    return null;\n  }\n  const result = {};\n  const actors = internal_findActorAll$1(acpData, actorRelation);\n  actors.forEach(iri => {\n    // The type assertion holds, because if internal_getActorAccess were null,\n    // we would have returned {} already.\n    const access = internal_getActorAccess$1(acpData, actorRelation, iri);\n    result[iri] = access;\n  });\n  return result;\n}\n/**\r\n * Get an overview of what access are defined for all Groups in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Groups.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Groups, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @returns A map with each Group's access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\nfunction internal_getGroupAccessAll(acpData) {\n  return internal_getActorAccessAll$1(acpData, acp.group);\n}\n/**\r\n * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Agents.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @returns A map with each Agent's access indexed by their WebID, or null if some\r\n * external policies are referenced.\r\n */\nfunction internal_getAgentAccessAll$1(acpData) {\n  return internal_getActorAccessAll$1(acpData, acp.agent);\n}\n/**\r\n * Set access to a Resource for a specific actor.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * actor specifically. In other words, it can, for example, add Policies that\r\n * give a particular Group Read access to the Resource. However, if other\r\n * Policies specify that everyone in that Group is *denied* Read access *except*\r\n * for a particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for an agent matching the given actor.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to set the access for.\r\n * @param actor Which instance of the given actor type you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setActorAccess$1(resource, acpData, actorRelation, actor, access) {\n  var _a, _b, _c, _d, _e;\n  if (!hasAccessibleAcr(resource) || acpData.inaccessibleUrls.length > 0) {\n    return null;\n  }\n  // Get the access that currently applies to the given actor\n  const existingAccess = internal_getActorAccess$1(acpData, actorRelation, actor);\n  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */\n  if (existingAccess === null) {\n    return null;\n  }\n  // Get all Policies that apply specifically to the given actor\n  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));\n  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));\n  // We only need to override Policies that define access other than what we want:\n  const conflictingAcrPolicies = applicableAcrPolicies.filter(policy => policyConflictsWith$1(policy, {\n    read: access.controlRead,\n    write: access.controlWrite\n  }));\n  const conflictingPolicies = applicablePolicies.filter(policy => policyConflictsWith$1(policy, {\n    read: access.read,\n    append: access.append,\n    write: access.write\n  }));\n  // For every Policy that applies specifically to the given Actor, but _also_\n  // to another actor (i.e. that applies using an anyOf Rule, or a Rule that\n  // mentions both the given and another actor)...\n  const otherActorAcrPolicies = conflictingAcrPolicies.filter(acrPolicy => policyHasOtherActors$1(acrPolicy, actorRelation, actor, acpData));\n  const otherActorPolicies = conflictingPolicies.filter(policy => policyHasOtherActors$1(policy, actorRelation, actor, acpData));\n  // ...check what access the current actor would have if we removed them...\n  const acpDataWithPoliciesExcluded = Object.assign(Object.assign({}, acpData), {\n    acrPolicies: acpData.acrPolicies.filter(acrPolicy => !otherActorAcrPolicies.includes(acrPolicy)),\n    policies: acpData.policies.filter(policy => !otherActorPolicies.includes(policy))\n  });\n  const remainingAccess = internal_getActorAccess$1(acpDataWithPoliciesExcluded, actorRelation, actor);\n  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */\n  if (remainingAccess === null) {\n    return null;\n  }\n  // ...add copies of those Policies and their Rules, but excluding the given actor...\n  let updatedResource = resource;\n  otherActorAcrPolicies.forEach(acrPolicy => {\n    const [policyCopy, ruleCopies] = copyPolicyExcludingActor$1(acrPolicy, resource, acpData, actorRelation, actor);\n    updatedResource = setResourceAcrPolicy(updatedResource, policyCopy);\n    updatedResource = ruleCopies.reduce(setResourceRule, updatedResource);\n  });\n  otherActorPolicies.forEach(policy => {\n    const [policyCopy, ruleCopies] = copyPolicyExcludingActor$1(policy, resource, acpData, actorRelation, actor);\n    updatedResource = setResourcePolicy$1(updatedResource, policyCopy);\n    updatedResource = ruleCopies.reduce(setResourceRule, updatedResource);\n  });\n  // ...add a new Policy that applies the given access,\n  // and the previously applying access for access modes that were undefined...\n  const newRuleName = `rule_${encodeURIComponent(`${actorRelation}_${actor}`)}`;\n  let newRule = createResourceRuleFor(resource, newRuleName);\n  newRule = setIri(newRule, actorRelation, actor);\n  const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;\n  const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;\n  let acrPoliciesToUnapply = otherActorAcrPolicies;\n  // Only replace existing Policies if the defined access actually changes:\n  if (newControlReadAccess !== remainingAccess.controlRead || newControlWriteAccess !== remainingAccess.controlWrite) {\n    const newAcrPolicyName = `acr_policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;\n    let newAcrPolicy = createResourcePolicyFor(resource, newAcrPolicyName);\n    newAcrPolicy = setAllowModesV1(newAcrPolicy, {\n      read: newControlReadAccess === true,\n      append: false,\n      write: newControlWriteAccess === true\n    });\n    newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newRule);\n    updatedResource = setResourceAcrPolicy(updatedResource, newAcrPolicy);\n    updatedResource = setResourceRule(updatedResource, newRule);\n    // If we don't have to set new access, we only need to unapply the\n    // ACR Policies that applied to both the given actor and other actors\n    // (because they have been replaced by clones not mentioning the given\n    // actor). Hence `policiesToUnApply` is initialised to `otherActorPolicies`.\n    // However, if we're in this if branch, that means we also had to replace\n    // Policies that defined access for just this actor, so we'll have to remove\n    // all Policies mentioning this actor:\n    acrPoliciesToUnapply = conflictingAcrPolicies;\n  }\n  const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;\n  const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;\n  const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;\n  let policiesToUnapply = otherActorPolicies;\n  // Only replace existing Policies if the defined access actually changes:\n  if (newReadAccess !== remainingAccess.read || newAppendAccess !== remainingAccess.append || newWriteAccess !== remainingAccess.write) {\n    const newPolicyName = `policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;\n    let newPolicy = createResourcePolicyFor(resource, newPolicyName);\n    newPolicy = setAllowModesV1(newPolicy, {\n      read: newReadAccess === true,\n      append: newAppendAccess === true,\n      write: newWriteAccess === true\n    });\n    newPolicy = addIri(newPolicy, acp.allOf, newRule);\n    updatedResource = setResourcePolicy$1(updatedResource, newPolicy);\n    updatedResource = setResourceRule(updatedResource, newRule);\n    // If we don't have to set new access, we only need to unapply the\n    // Policies that applied to both the given actor and other actors (because\n    // they have been replaced by clones not mentioning the given actor). Hence\n    // `policiesToUnApply` is initialised to `otherActorPolicies`.\n    // However, if we're in this if branch, that means we also had to replace\n    // Policies that defined access for just this actor, so we'll have to remove\n    // all Policies mentioning this actor:\n    policiesToUnapply = conflictingPolicies;\n  }\n  // ...then remove existing Policy URLs that mentioned both the given actor\n  // and other actors from the given Resource and apply the new ones (but do not\n  // remove the actual old Policies - they might still apply to other Resources!).\n  acrPoliciesToUnapply.forEach(previouslyApplicableAcrPolicy => {\n    updatedResource = removeAcrPolicyUrl$1(updatedResource, asIri(previouslyApplicableAcrPolicy));\n  });\n  policiesToUnapply.forEach(previouslyApplicablePolicy => {\n    updatedResource = removePolicyUrl$1(updatedResource, asIri(previouslyApplicablePolicy));\n  });\n  return updatedResource;\n}\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Agent specifically. In other words, it can, for example, add Policies that\r\n * give a particular Agent Read access to the Resource. However, if other\r\n * Policies specify that that Agent is *denied* Read access *except* if they're\r\n * in a particular Group, then that will be left intact.\r\n * This means that, unless *only* this function is used to manipulate access to\r\n * this Resource, the set access might not be equal to the effective access for\r\n * the given Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param webId Which Agent you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setAgentAccess$1(resource, acpData, webId, access) {\n  return internal_setActorAccess$1(resource, acpData, acp.agent, webId, access);\n}\n/**\r\n * Set access to a Resource for a specific Group.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Group specifically. In other words, it can, for example, add Policies that\r\n * give a particular Group Read access to the Resource. However, if other\r\n * Policies specify that it is *denied* Read access *except* if they're a\r\n * particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for Agents in the given Group.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param groupUrl Which Group you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Group. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setGroupAccess(resource, acpData, groupUrl, access) {\n  return internal_setActorAccess$1(resource, acpData, acp.group, groupUrl, access);\n}\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for everybody\r\n * specifically. In other words, it can, for example, add Policies that\r\n * give everybody Read access to the Resource. However, if other\r\n * Policies specify that everybody is *denied* Read access *except* if they're\r\n * in a particular Group, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for a particular Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setPublicAccess$1(resource, acpData, access) {\n  return internal_setActorAccess$1(resource, acpData, acp.agent, acp.PublicAgent, access);\n}\nfunction policyHasOtherActors$1(policy, actorRelation, actor, acpData) {\n  // Note: the non-null assertions (`!`) here should be valid because\n  //       the caller of `policyHasOtherActors` should already have validated\n  //       that the return value of internal_getPoliciesAndRules() did not have\n  //       any inaccessible URLs, so we should be able to find every Rule.\n  const allOfRules = getIriAll(policy, acp.allOf).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));\n  const allOfRulesHaveOtherActors = allOfRules.some(rule => {\n    return ruleHasOtherActors(rule, actorRelation, actor);\n  });\n  const anyOfRules = getIriAll(policy, acp.anyOf).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));\n  const anyOfRulesHaveOtherActors = anyOfRules.some(rule => {\n    return ruleHasOtherActors(rule, actorRelation, actor);\n  });\n  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */\n  const noneOfRules = getIriAll(policy, acp.noneOf).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));\n  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */\n  const noneOfRulesHaveOtherActors = noneOfRules.some(rule => {\n    return ruleHasOtherActors(rule, actorRelation, actor);\n  });\n  return allOfRulesHaveOtherActors || anyOfRulesHaveOtherActors || noneOfRulesHaveOtherActors;\n}\nfunction ruleHasOtherActors(rule, actorRelation, actor) {\n  const otherActors = [];\n  knownActorRelations$1.forEach(knownActorRelation => {\n    const otherActorsWithThisRelation = getIriAll(rule, knownActorRelation).filter(applicableActor => applicableActor !== actor || knownActorRelation !== actorRelation);\n    // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:\n    otherActors.push(...otherActorsWithThisRelation);\n  });\n  return otherActors.length > 0;\n}\nfunction copyPolicyExcludingActor$1(inputPolicy, resourceWithAcr, acpData, actorRelationToExclude, actorToExclude) {\n  const newIriSuffix = \"_copy_without\" + `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` + `_${Date.now()}_${Math.random()}`;\n  // Create new Rules for the Policy, excluding the given Actor\n  const newAllOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.allOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\n  const newAnyOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.anyOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\n  const newNoneOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.noneOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\n  // Create a new Policy with the new Rules\n  let newPolicy = createResourcePolicyFor(resourceWithAcr, encodeURI(asIri(inputPolicy)) + newIriSuffix);\n  getIriAll(inputPolicy, acp.allow).forEach(allowMode => {\n    newPolicy = addIri(newPolicy, acp.allow, allowMode);\n  });\n  getIriAll(inputPolicy, acp.deny).forEach(denyMode => {\n    newPolicy = addIri(newPolicy, acp.deny, denyMode);\n  });\n  newAllOfRules.forEach(newRule => {\n    newPolicy = addIri(newPolicy, acp.allOf, newRule);\n  });\n  newAnyOfRules.forEach(newRule => {\n    newPolicy = addIri(newPolicy, acp.anyOf, newRule);\n  });\n  /* istanbul ignore next Policies listing noneOf Rules are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Rules to copy. */\n  newNoneOfRules.forEach(newRule => {\n    newPolicy = addIri(newPolicy, acp.noneOf, newRule);\n  });\n  return [newPolicy, newAllOfRules.concat(newAnyOfRules).concat(newNoneOfRules)];\n}\n/** Creates clones of all the Rules identified by `ruleIris` in `acpData`, excluding the given Actor */\nfunction copyRulesExcludingActor(ruleIris, resourceWithAcr, acpData, iriSuffix, actorRelationToExclude, actorToExclude) {\n  return ruleIris.map(ruleIri => {\n    const rule = acpData.rules.find(rule => asIri(rule) === ruleIri);\n    /* istanbul ignore if: getPoliciesAndRules should already have fetched all referenced Rules, so this should never be true: */\n    if (typeof rule === \"undefined\") {\n      return null;\n    }\n    let newRule = createResourceRuleFor(resourceWithAcr, encodeURI(asIri(rule)) + iriSuffix);\n    let listsOtherActors = false;\n    knownActorRelations$1.forEach(knownActorRelation => {\n      getIriAll(rule, knownActorRelation).forEach(targetActor => {\n        if (knownActorRelation === actorRelationToExclude && targetActor === actorToExclude) {\n          return;\n        }\n        listsOtherActors = true;\n        newRule = addIri(newRule, knownActorRelation, targetActor);\n      });\n    });\n    return listsOtherActors ? newRule : null;\n  }).filter(isNotNull$1);\n}\nfunction isNotNull$1(value) {\n  return value !== null;\n}\nasync function internal_getPoliciesAndRules(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const acrPolicyUrls = getAcrPolicyUrlAll$1(resource);\n  const policyUrls = getPolicyUrlAll$1(resource);\n  const allPolicyResourceUrls = getResourceUrls$1(acrPolicyUrls).concat(getResourceUrls$1(policyUrls));\n  const policyResources = await getResources$1(allPolicyResourceUrls, options);\n  const acrPolicies = getThingsFromResources$1(acrPolicyUrls, policyResources).filter(isNotNull$1);\n  const policies = getThingsFromResources$1(policyUrls, policyResources).filter(isNotNull$1);\n  const ruleUrlSet = new Set();\n  acrPolicies.forEach(acrPolicy => {\n    const referencedRuleUrls = getReferencedRuleUrls(acrPolicy);\n    referencedRuleUrls.forEach(ruleUrl => {\n      ruleUrlSet.add(ruleUrl);\n    });\n  });\n  policies.forEach(policy => {\n    const referencedRuleUrls = getReferencedRuleUrls(policy);\n    referencedRuleUrls.forEach(ruleUrl => {\n      ruleUrlSet.add(ruleUrl);\n    });\n  });\n  const ruleUrls = Array.from(ruleUrlSet);\n  const ruleResourceUrls = ruleUrls.map(ruleUrl => getResourceUrl$1(ruleUrl));\n  const unfetchedRuleResourceUrls = ruleResourceUrls.filter(ruleResourceUrl => !allPolicyResourceUrls.includes(ruleResourceUrl));\n  const ruleResources = await getResources$1(unfetchedRuleResourceUrls, options);\n  const allResources = Object.assign(Object.assign({}, policyResources), ruleResources);\n  const rules = getThingsFromResources$1(ruleUrls, allResources).filter(isNotNull$1);\n  const inaccessibleUrls = Object.keys(allResources).filter(resourceUrl => allResources[resourceUrl] === null);\n  return {\n    inaccessibleUrls,\n    acrPolicies,\n    policies,\n    rules\n  };\n}\nfunction getResourceUrl$1(thingUrl) {\n  const thingUrlObject = new URL(thingUrl);\n  thingUrlObject.hash = \"\";\n  return thingUrlObject.href;\n}\nfunction getResourceUrls$1(thingUrls) {\n  const resourceUrls = [];\n  thingUrls.forEach(thingUrl => {\n    const resourceUrl = getResourceUrl$1(thingUrl);\n    if (!resourceUrls.includes(resourceUrl)) {\n      resourceUrls.push(resourceUrl);\n    }\n  });\n  return resourceUrls;\n}\nasync function getResources$1(resourceUrls, options) {\n  const uniqueResourceUrls = Array.from(new Set(resourceUrls));\n  const resources = {};\n  await Promise.all(uniqueResourceUrls.map(async resourceUrl => {\n    try {\n      const resource = await getSolidDataset(resourceUrl, options);\n      resources[resourceUrl] = resource;\n    } catch (e) {\n      resources[resourceUrl] = null;\n    }\n  }));\n  return resources;\n}\nfunction getThingsFromResources$1(thingUrls, resources) {\n  return thingUrls.map(thingUrl => {\n    const resourceUrl = getResourceUrl$1(thingUrl);\n    const resource = resources[resourceUrl];\n    if (!resource) {\n      return null;\n    }\n    return getThing(resource, thingUrl);\n  });\n}\nfunction getReferencedRuleUrls(policy) {\n  return getAllOfRuleUrlAll(policy).concat(getAnyOfRuleUrlAll(policy)).concat(getNoneOfRuleUrlAll(policy));\n}\n\n//\nfunction universalAccessToAcl(newAccess, previousAccess) {\n  var _a, _b, _c, _d;\n  // Universal access is aligned on ACP, which means there is a distinction between\n  // controlRead and controlWrite. This split doesn't exist in WAC, which is why\n  // the type for the input variable of this function is a restriction on the\n  // universal Access type.\n  if (newAccess.controlRead !== newAccess.controlWrite) {\n    throw new Error(\"For Pods using Web Access Control, controlRead and controlWrite must be equal.\");\n  }\n  return {\n    read: (_a = newAccess.read) !== null && _a !== void 0 ? _a : previousAccess.read,\n    append: (_b = newAccess.append) !== null && _b !== void 0 ? _b : previousAccess.append,\n    write: (_c = newAccess.write) !== null && _c !== void 0 ? _c : previousAccess.write,\n    control: (_d = newAccess.controlRead) !== null && _d !== void 0 ? _d : previousAccess.control\n  };\n}\nfunction aclAccessToUniversal(access) {\n  // In ACL, denying access to an actor is a notion that doesn't exist, so an\n  // access is either granted or not for a given mode.\n  // This creates a misalignment with the ACP notion of an access being granted,\n  // denied, or simply not mentioned. Here, we convert the boolean vision of\n  // ACL into the boolean or undefined vision of ACP.\n  return {\n    read: access.read,\n    write: access.write,\n    append: access.append,\n    controlRead: access.control,\n    controlWrite: access.control\n  };\n}\nasync function getActorAccess(resource, actor, accessEvaluationCallback, options) {\n  const resourceAcl = await internal_fetchAcl(resource, options);\n  const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl), actor);\n  if (wacAccess === null) {\n    return null;\n  }\n  return aclAccessToUniversal(wacAccess);\n}\nasync function getActorClassAccess(resource, accessEvaluationCallback, options) {\n  const resourceAcl = await internal_fetchAcl(resource, options);\n  const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));\n  if (wacAccess === null) {\n    return null;\n  }\n  return aclAccessToUniversal(wacAccess);\n}\nasync function getActorAccessAll(resource, accessEvaluationCallback, options) {\n  const resourceAcl = await internal_fetchAcl(resource, options);\n  const wacAgentAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));\n  if (wacAgentAccess === null) {\n    return null;\n  }\n  const result = {};\n  for (const [webId, wacAccess] of Object.entries(wacAgentAccess)) {\n    result[webId] = aclAccessToUniversal(wacAccess);\n  }\n  return result;\n}\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to the given Agent.\r\n *\r\n * Note that this only lists permissions granted to the given Agent individually,\r\n * and will not exhaustively list modes the given Agent may have access to because\r\n * they apply to everyone, or because they apply to the Agent through a group for\r\n * instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Access\r\n * @param agent The Agent for which the Access is granted\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\nfunction getAgentAccess$4(resource, agent) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  return getActorAccess(resource, agent, getAgentAccess$5, options);\n}\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to the given Group.\r\n *\r\n * Note that this only lists permissions granted to the given Group individually,\r\n * and will not exhaustively list modes the given Group may have access to because\r\n * they apply to everyone, or because they apply to the Group through another\r\n * Group that may contain it for instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Access\r\n * @param group The Group for which the Access is granted\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.\r\n */\nfunction getGroupAccess$1(resource, group) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  return getActorAccess(resource, group, getGroupAccess$2, options);\n}\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to everyone.\r\n *\r\n * Note that this only lists permissions explicitly granted to everyone as a whole,\r\n * and will not exhaustively list modes any individual Agent or Group may have\r\n * access to because they specifically apply to them only.\r\n *\r\n * @param resource The URL of the Resource for which we want to list public Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the everyone explicitly, or null if it could not be determined.\r\n */\nfunction getPublicAccess$4(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  return getActorClassAccess(resource, getPublicAccess$5, options);\n}\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted explicitly to each individual Agent.\r\n *\r\n * Note that this only lists permissions granted to each Agent individually,\r\n * and will not exhaustively list modes any Agent may have access to because\r\n * they apply to everyone, or because they apply to an Agent through a group for\r\n * instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Agents Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A map of Agent WebIDs and the access granted to them, or null if it could not be determined.\r\n */\nfunction getAgentAccessAll$4(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  return getActorAccessAll(resource, getAgentAccessAll$5, options);\n}\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted explicitly to each individual Group.\r\n *\r\n * Note that this only lists permissions granted to each Group individually,\r\n * and will not exhaustively list modes any Group may have access to because\r\n * they apply individually to all of the Agents in the Group, or to everyone\r\n * for instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Agents Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A map of Group URLs and the access granted to them, or null if it could not be determined.\r\n */\nfunction getGroupAccessAll$1(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  return getActorAccessAll(resource, getGroupAccessAll$2, options);\n}\nasync function prepareResourceAcl(resource, options) {\n  if (!hasAccessibleAcl(resource)) {\n    return null;\n  }\n  const acl = await internal_fetchAcl(resource, options);\n  const resourceWithAcl = internal_setAcl(resource, acl);\n  let resourceAcl;\n  if (hasResourceAcl(resourceWithAcl)) {\n    // This is the simple case, where the Resource ACL we need to update already\n    // exists.\n    resourceAcl = internal_getResourceAcl(resourceWithAcl);\n  } else if (hasFallbackAcl(resourceWithAcl)) {\n    // In this case, the Resource ACL needs to be created first, and then updated.\n    resourceAcl = createAclFromFallbackAcl(resourceWithAcl);\n  } else {\n    return null;\n  }\n  return internal_setResourceAcl(resourceWithAcl, resourceAcl);\n}\nasync function saveUpdatedAcl(resource, acl, options) {\n  let savedAcl = null;\n  try {\n    savedAcl = await saveAclFor(resource, acl, options);\n    return internal_setResourceAcl(resource, savedAcl);\n  } catch (e) {\n    return null;\n  }\n}\nasync function setActorClassAccess(resource, access, getAccess, setAccess, options) {\n  const resourceWithOldAcl = await prepareResourceAcl(resource, options);\n  if (resourceWithOldAcl === null) {\n    return null;\n  }\n  const resourceAcl = getResourceAcl(resourceWithOldAcl);\n  const currentAccess = getAccess(resourceWithOldAcl);\n  const wacAccess = universalAccessToAcl(access, currentAccess);\n  const updatedResourceAcl = setAccess(resourceAcl, wacAccess);\n  return saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);\n}\nasync function setActorAccess(resource, actor, access, getAccess, setAccess, options) {\n  const resourceWithOldAcl = await prepareResourceAcl(resource, options);\n  if (resourceWithOldAcl === null) {\n    return null;\n  }\n  const currentAccess = getAccess(resourceWithOldAcl, actor);\n  const resourceAcl = getResourceAcl(resourceWithOldAcl);\n  const wacAccess = universalAccessToAcl(access, currentAccess);\n  const updatedResourceAcl = setAccess(resourceAcl, actor, wacAccess);\n  return saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);\n}\n/**\r\n * Set the Access modes for a given Agent to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param agent The Agent for whom Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\nasync function setAgentResourceAccess(resource, agent, access) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  return setActorAccess(resource, agent, access, getAgentAccess$5, setAgentResourceAccess$1, options);\n}\n/**\r\n * Set the Access modes for a given Group to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param agent The Group for which Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\nasync function setGroupResourceAccess(resource, group, access) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  return setActorAccess(resource, group, access, getGroupAccess$2, setGroupResourceAccess$1, options);\n}\n/**\r\n * Set the Access modes for everyone to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\nasync function setPublicResourceAccess(resource, access) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  return setActorClassAccess(resource, access, getPublicAccess$5, setPublicResourceAccess$1, options);\n}\n\n//\n\nvar universal = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor,\n  getAgentAccess: getAgentAccess$3,\n  setAgentAccess: setAgentAccess$3,\n  getAgentAccessAll: getAgentAccessAll$3,\n  getGroupAccess: getGroupAccess,\n  getGroupAccessAll: getGroupAccessAll,\n  setGroupAccess: setGroupAccess,\n  getPublicAccess: getPublicAccess$3,\n  setPublicAccess: setPublicAccess$3\n});\n\n//\nasync function getAccessFor(resourceUrl, actorType) {\n  let actor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  if (actorType === \"agent\") {\n    if (typeof actor !== \"string\") {\n      throw new Error(\"When reading Agent-specific access, the given agent cannot be left undefined.\");\n    }\n    return getAgentAccess$3(resourceUrl, actor, options);\n  }\n  if (actorType === \"group\") {\n    if (typeof actor !== \"string\") {\n      throw new Error(\"When reading Group-specific access, the given group cannot be left undefined.\");\n    }\n    return getGroupAccess(resourceUrl, actor, options);\n  }\n  if (actorType === \"public\") {\n    if (typeof actor === \"string\") {\n      throw new Error(`When reading public access, no actor type should be specified (here [${actor}]).`);\n    }\n    return getPublicAccess$3(resourceUrl, actor);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for a given set of actors: all Agents\r\n * or all Groups.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given actor (Agent\r\n *   or Group). If additional restrictions are set up to apply to the given Agent\r\n *   in a particular situation, those will not be reflected in the return value\r\n *   of this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param actorType type of actor whose access is being read.\r\n * @returns What access is set for the given resource, grouped by resp. Agent or Group.\r\n * @since 1.5.0\r\n *\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\nasync function getAccessForAll(resourceUrl, actorType) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  if (actorType === \"agent\") {\n    return getAgentAccessAll$3(resourceUrl, options);\n  }\n  if (actorType === \"group\") {\n    return getGroupAccessAll(resourceUrl, options);\n  }\n  return null;\n}\nasync function setAccessFor(resourceUrl, actorType, access) {\n  let actor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : internal_defaultFetchOptions;\n  if (actorType === \"agent\") {\n    if (typeof actor !== \"string\") {\n      throw new Error(\"When writing Agent-specific access, the given agent cannot be left undefined.\");\n    }\n    return setAgentAccess$3(resourceUrl, actor, access, options);\n  }\n  if (actorType === \"group\") {\n    if (typeof actor !== \"string\") {\n      throw new Error(\"When writing Group-specific access, the given group cannot be left undefined.\");\n    }\n    return setGroupAccess(resourceUrl, actor, access, options);\n  }\n  if (actorType === \"public\") {\n    if (typeof actor === \"string\") {\n      throw new Error(`When writing public access, no actor type should be specified (here [${actor}]).`);\n    }\n    return setPublicAccess$3(resourceUrl, access, actor);\n  }\n  return null;\n}\n\n//\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Agent. If\r\n *   additional restrictions are set up to apply to the given Agent in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function getAgentAccess$3(resourceUrl, webId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    return internal_getAgentAccess$1(acpData, webId);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getAgentAccess$4(resourceInfo, webId, options);\n  }\n  return null;\n}\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Agent's access to.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Agent explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function setAgentAccess$3(resourceUrl, webId, access) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    const updatedResource = internal_setAgentAccess$1(resourceInfo, acpData, webId, access);\n    if (updatedResource) {\n      try {\n        await saveAcrFor(updatedResource, options);\n        return await getAgentAccess$3(resourceUrl, webId, options);\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    if (access.controlRead !== access.controlWrite) {\n      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\n    }\n    const wacAccess = access;\n    await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);\n    return getAgentAccess$4(resourceInfo, webId, options);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for all Agents with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Agents. If\r\n *   additional restrictions are set up to apply to the listed Agents in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, grouped by Agent.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function getAgentAccessAll$3(resourceUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    return internal_getAgentAccessAll$1(acpData);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getAgentAccessAll$4(resourceInfo, options);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for a given Group.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Group. If\r\n *   additional restrictions are set up to apply to the given Group in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Group you want to get the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\nasync function getGroupAccess(resourceUrl, webId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    return internal_getGroupAccess(acpData, webId);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getGroupAccess$1(resourceInfo, webId, options);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for all Groups with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Groups. If\r\n *   additional restrictions are set up to apply to the listed Groups in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, sorted by Group.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\nasync function getGroupAccessAll(resourceUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    return internal_getGroupAccessAll(acpData);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getGroupAccessAll$1(resourceInfo, options);\n  }\n  return null;\n}\n/**\r\n * Set access to a Resource for a specific Group.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Group. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Group has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Group's access to.\r\n * @param groupUrl URL of the Group you want to set access for.\r\n * @param access What access permissions you want to set for the given Group to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Group explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\nasync function setGroupAccess(resourceUrl, groupUrl, access) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    const updatedResource = internal_setGroupAccess(resourceInfo, acpData, groupUrl, access);\n    if (updatedResource) {\n      try {\n        await saveAcrFor(updatedResource, options);\n        return await getGroupAccess(resourceUrl, groupUrl, options);\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    if (access.controlRead !== access.controlWrite) {\n      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\n    }\n    const wacAccess = access;\n    await setGroupResourceAccess(resourceInfo, groupUrl, wacAccess, options);\n    return getGroupAccess$1(resourceInfo, groupUrl, options);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for everyone.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for everyone. If\r\n *   additional restrictions are set up to apply to users in a particular\r\n *   situation, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @since 1.5.0\r\n *\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function getPublicAccess$3(resourceUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    return internal_getPublicAccess$1(acpData);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getPublicAccess$4(resourceInfo, options);\n  }\n  return null;\n}\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for everybody. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access a user has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change public access to.\r\n * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for everybody explicitly.\r\n * @since 1.5.0\r\n *\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function setPublicAccess$3(resourceUrl, access) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\n    const updatedResource = internal_setPublicAccess$1(resourceInfo, acpData, access);\n    if (updatedResource) {\n      try {\n        await saveAcrFor(updatedResource, options);\n        return await getPublicAccess$3(resourceUrl, options);\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    if (access.controlRead !== access.controlWrite) {\n      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\n    }\n    const wacAccess = access;\n    await setPublicResourceAccess(resourceInfo, wacAccess, options);\n    return getPublicAccess$4(resourceInfo, options);\n  }\n  return null;\n}\nvar universal_v1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAgentAccess: getAgentAccess$3,\n  setAgentAccess: setAgentAccess$3,\n  getAgentAccessAll: getAgentAccessAll$3,\n  getGroupAccess: getGroupAccess,\n  getGroupAccessAll: getGroupAccessAll,\n  setGroupAccess: setGroupAccess,\n  getPublicAccess: getPublicAccess$3,\n  setPublicAccess: setPublicAccess$3,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor\n});\n\n//\nconst knownActorRelations = [acp.agent];\n/**\r\n * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this actor.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setActorAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent) you want to get the access for.\r\n * @param actor Which instance of the given actor type you want to get the access for.\r\n * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.\r\n */\nfunction internal_getActorAccess(acpData, actorRelation, actor) {\n  if (acpData.inaccessibleUrls.length > 0) {\n    // If we can't see all access data,\n    // we can't reliably determine what access the given actor has:\n    return null;\n  }\n  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));\n  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));\n  const initialAccess = {\n    read: false,\n    append: false,\n    write: false,\n    controlRead: false,\n    controlWrite: false\n  };\n  // All allowed reading and writing defined in ACR policies\n  // determines whether the `controlRead` and `controlWrite` statuses are `true`.\n  const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {\n    const allAllowedAccess = Object.assign({}, acc);\n    const allowModes = getAllowModesV2(policy);\n    if (allowModes.read) {\n      allAllowedAccess.controlRead = true;\n    }\n    if (allowModes.write) {\n      allAllowedAccess.controlWrite = true;\n    }\n    return allAllowedAccess;\n  }, initialAccess);\n  // Then allowed reading, appending and writing in regular policies\n  // determines whether the respective status is `true`.\n  const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {\n    const allAllowedAccess = Object.assign({}, acc);\n    const allowModes = getAllowModesV2(policy);\n    if (allowModes.read) {\n      allAllowedAccess.read = true;\n    }\n    if (allowModes.append) {\n      allAllowedAccess.append = true;\n    }\n    if (allowModes.write) {\n      allAllowedAccess.write = true;\n    }\n    return allAllowedAccess;\n  }, allowedAcrAccess);\n  // At this point, everything that has been explicitly allowed is true.\n  // However, it could still be overridden by access that is explicitly denied.\n  // Starting with `controlRead` and `controlWrite`,\n  // by inspecting denied reading and writing defined in the ACR policies.\n  const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {\n    const allDeniedAccess = Object.assign({}, acc);\n    const denyModes = getDenyModesV2(policy);\n    if (denyModes.read === true) {\n      allDeniedAccess.controlRead = false;\n    }\n    if (denyModes.write === true) {\n      allDeniedAccess.controlWrite = false;\n    }\n    return allDeniedAccess;\n  }, withAllowedAccess);\n  // And finally, we set to `false` those access modes that are explicitly denied\n  // in the regular policies:\n  const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {\n    const allDeniedAccess = Object.assign({}, acc);\n    const denyModes = getDenyModesV2(policy);\n    if (denyModes.read === true) {\n      allDeniedAccess.read = false;\n    }\n    if (denyModes.append === true) {\n      allDeniedAccess.append = false;\n    }\n    if (denyModes.write === true) {\n      allDeniedAccess.write = false;\n    }\n    return allDeniedAccess;\n  }, withAcrDeniedAccess);\n  return withDeniedAccess;\n}\n/**\r\n * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Agent.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\nfunction internal_getAgentAccess(acpData, webId) {\n  return internal_getActorAccess(acpData, acp.agent, webId);\n}\n/**\r\n * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to everybody.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to everybody, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setPublicAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.\r\n */\nfunction internal_getPublicAccess(acpData) {\n  return internal_getActorAccess(acpData, acp.agent, acp.PublicAgent);\n}\nfunction policyAppliesTo(policy, actorRelation, actor, acpData) {\n  const allowModes = getIriAll(policy, acp.allow);\n  const denyModes = getIriAll(policy, acp.deny);\n  if (allowModes.length + denyModes.length === 0) {\n    // A Policy that does not specify access modes does not do anything:\n    return false;\n  }\n  // Note: the non-null assertions (`!`) here should be valid because\n  //       the caller of `policyAppliesTo` should already have validated that\n  //       the return value of internal_getPoliciesAndMatchers() did not have any\n  //       inaccessible URLs, so we should be able to find every Matcher.\n  const allOfMatchers = getAllOfMatcherUrlAll(policy).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));\n  const anyOfMatchers = getAnyOfMatcherUrlAll(policy).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));\n  const noneOfMatchers = getNoneOfMatcherUrlAll(policy).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));\n  // We assume that this Policy applies if this specific actor is mentioned\n  // and no further restrictions are in place.\n  // (In other words, the Policy may apply to others *in addition to* this\n  // actor, but if it applies to this actor *unless* some other condition holds,\n  // we cannot be sure whether it will apply to this actor.)\n  // This means that:\n  return (\n    // Every existing allOf Matcher explicitly applies explicitly to this given actor:\n    allOfMatchers.every(matcher => matcherAppliesTo(matcher, actorRelation, actor)) && (\n    // If there are anyOf Matchers, at least one applies explicitly to this actor:\n    anyOfMatchers.length === 0 || anyOfMatchers.some(matcher => matcherAppliesTo(matcher, actorRelation, actor))) &&\n    // There is at least one allOf or anyOf Matcher:\n    allOfMatchers.length + anyOfMatchers.length > 0 &&\n    // No further restrictions are in place that make this sometimes not apply\n    // to the given actor:\n    noneOfMatchers.length === 0\n  );\n}\nfunction policyConflictsWith(policy, otherAccess) {\n  const allowModes = getIriAll(policy, acp.allow);\n  const denyModes = getIriAll(policy, acp.deny);\n  return otherAccess.read === true && denyModes.includes(internal_accessModeIriStrings.read) || otherAccess.read === false && allowModes.includes(internal_accessModeIriStrings.read) && !denyModes.includes(internal_accessModeIriStrings.read) || otherAccess.append === true && denyModes.includes(internal_accessModeIriStrings.append) || otherAccess.append === false && allowModes.includes(internal_accessModeIriStrings.append) && !denyModes.includes(internal_accessModeIriStrings.append) || otherAccess.write === true && denyModes.includes(internal_accessModeIriStrings.write) || otherAccess.write === false && allowModes.includes(internal_accessModeIriStrings.write) && !denyModes.includes(internal_accessModeIriStrings.write);\n}\nfunction matcherAppliesTo(matcher, actorRelation, actor) {\n  return getIriAll(matcher, actorRelation).includes(actor);\n}\n/**\r\n * Get a set of all actors mentioned in an ACR by active Matchers (i.e. that are\r\n * referenced by Policies referenced by the ACR Control, and therefore that\r\n * effectively apply).\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation\r\n */\nfunction internal_findActorAll(acpData, actorRelation) {\n  const actors = new Set();\n  // This code could be prettier using flat(), which isn't supported by nodeJS 10.\n  // If you read this comment after April 2021, feel free to refactor.\n  acpData.matchers.forEach(matcher => {\n    getIriAll(matcher, actorRelation).filter(iri => ![acp.PublicAgent, acp.CreatorAgent, acp.AuthenticatedAgent].includes(iri) || actorRelation !== acp.agent).forEach(iri => actors.add(iri));\n  });\n  return actors;\n}\n/**\r\n * Iterate through all the actors active for an ACR, and list all of their access.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation The type of actor we want to list access for\r\n * @returns A map with each actor access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\nfunction internal_getActorAccessAll(acpData, actorRelation) {\n  if (acpData.inaccessibleUrls.length > 0) {\n    // If we can't see all access data,\n    // we can't reliably determine what access actors of the given type have:\n    return null;\n  }\n  const result = {};\n  const actors = internal_findActorAll(acpData, actorRelation);\n  actors.forEach(iri => {\n    // The type assertion holds, because if internal_getActorAccess were null,\n    // we would have returned {} already.\n    const access = internal_getActorAccess(acpData, actorRelation, iri);\n    result[iri] = access;\n  });\n  return result;\n}\n/**\r\n * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Agents.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @returns A map with each Agent's access indexed by their WebID, or null if some\r\n * external policies are referenced.\r\n */\nfunction internal_getAgentAccessAll(acpData) {\n  return internal_getActorAccessAll(acpData, acp.agent);\n}\n/**\r\n * Set access to a Resource for a specific actor.\r\n *\r\n * This function adds the relevant Access Control Policies and Matchers to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * actor specifically. In other words, it can, for example, add Policies that\r\n * give the general Public Read access to the Resource. However, if other\r\n * Policies specify that everyone is *denied* Read access *except* for a\r\n * particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for an agent matching the given actor.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Matchers\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent) you want to set the access for.\r\n * @param actor Which instance of the given actor type you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setActorAccess(resource, acpData, actorRelation, actor, access) {\n  var _a, _b, _c, _d, _e;\n  if (!hasAccessibleAcr(resource) || acpData.inaccessibleUrls.length > 0) {\n    return null;\n  }\n  // Get the access that currently applies to the given actor\n  const existingAccess = internal_getActorAccess(acpData, actorRelation, actor);\n  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */\n  if (existingAccess === null) {\n    return null;\n  }\n  // Get all Policies that apply specifically to the given actor\n  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));\n  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));\n  // We only need to override Policies that define access other than what we want:\n  const conflictingAcrPolicies = applicableAcrPolicies.filter(policy => policyConflictsWith(policy, {\n    read: access.controlRead,\n    write: access.controlWrite\n  }));\n  const conflictingPolicies = applicablePolicies.filter(policy => policyConflictsWith(policy, {\n    read: access.read,\n    append: access.append,\n    write: access.write\n  }));\n  // For every Policy that applies specifically to the given Actor, but _also_\n  // to another actor (i.e. that applies using an anyOf Matcher, or a Matcher that\n  // mentions both the given and another actor)...\n  const otherActorAcrPolicies = conflictingAcrPolicies.filter(acrPolicy => policyHasOtherActors(acrPolicy, actorRelation, actor, acpData));\n  const otherActorPolicies = conflictingPolicies.filter(policy => policyHasOtherActors(policy, actorRelation, actor, acpData));\n  // ...check what access the current actor would have if we removed them...\n  const acpDataWithPoliciesExcluded = Object.assign(Object.assign({}, acpData), {\n    acrPolicies: acpData.acrPolicies.filter(acrPolicy => !otherActorAcrPolicies.includes(acrPolicy)),\n    policies: acpData.policies.filter(policy => !otherActorPolicies.includes(policy))\n  });\n  const remainingAccess = internal_getActorAccess(acpDataWithPoliciesExcluded, actorRelation, actor);\n  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */\n  if (remainingAccess === null) {\n    return null;\n  }\n  // ...add copies of those Policies and their Matchers, but excluding the given actor...\n  let updatedResource = resource;\n  otherActorAcrPolicies.forEach(acrPolicy => {\n    const [policyCopy, matcherCopies] = copyPolicyExcludingActor(acrPolicy, resource, acpData, actorRelation, actor);\n    updatedResource = setResourceAcrPolicy(updatedResource, policyCopy);\n    updatedResource = matcherCopies.reduce(setResourceMatcher, updatedResource);\n  });\n  otherActorPolicies.forEach(policy => {\n    const [policyCopy, matcherCopies] = copyPolicyExcludingActor(policy, resource, acpData, actorRelation, actor);\n    updatedResource = setResourcePolicy$1(updatedResource, policyCopy);\n    updatedResource = matcherCopies.reduce(setResourceMatcher, updatedResource);\n  });\n  // ...add a new Policy that applies the given access,\n  // and the previously applying access for access modes that were undefined...\n  const newMatcherName = `matcher_${encodeURIComponent(`${actorRelation}_${actor}`)}`;\n  let newMatcher = createResourceMatcherFor(resource, newMatcherName);\n  newMatcher = setIri(newMatcher, actorRelation, actor);\n  const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;\n  const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;\n  let acrPoliciesToUnapply = otherActorAcrPolicies;\n  // Only replace existing Policies if the defined access actually changes:\n  if (newControlReadAccess !== remainingAccess.controlRead || newControlWriteAccess !== remainingAccess.controlWrite) {\n    const newAcrPolicyName = `acr_policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;\n    let newAcrPolicy = createResourcePolicyFor(resource, newAcrPolicyName);\n    newAcrPolicy = setAllowModesV2(newAcrPolicy, {\n      read: newControlReadAccess === true,\n      append: false,\n      write: newControlWriteAccess === true\n    });\n    newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newMatcher);\n    updatedResource = setResourceAcrPolicy(updatedResource, newAcrPolicy);\n    updatedResource = setResourceMatcher(updatedResource, newMatcher);\n    // If we don't have to set new access, we only need to unapply the\n    // ACR Policies that applied to both the given actor and other actors\n    // (because they have been replaced by clones not mentioning the given\n    // actor). Hence `policiesToUnApply` is initialised to `otherActorPolicies`.\n    // However, if we're in this if branch, that means we also had to replace\n    // Policies that defined access for just this actor, so we'll have to remove\n    // all Policies mentioning this actor:\n    acrPoliciesToUnapply = conflictingAcrPolicies;\n  }\n  const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;\n  const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;\n  const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;\n  let policiesToUnapply = otherActorPolicies;\n  // Only replace existing Policies if the defined access actually changes:\n  if (newReadAccess !== remainingAccess.read || newAppendAccess !== remainingAccess.append || newWriteAccess !== remainingAccess.write) {\n    const newPolicyName = `policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;\n    let newPolicy = createResourcePolicyFor(resource, newPolicyName);\n    newPolicy = setAllowModesV2(newPolicy, {\n      read: newReadAccess === true,\n      append: newAppendAccess === true,\n      write: newWriteAccess === true\n    });\n    newPolicy = addIri(newPolicy, acp.allOf, newMatcher);\n    updatedResource = setResourcePolicy$1(updatedResource, newPolicy);\n    updatedResource = setResourceMatcher(updatedResource, newMatcher);\n    // If we don't have to set new access, we only need to unapply the\n    // Policies that applied to both the given actor and other actors (because\n    // they have been replaced by clones not mentioning the given actor). Hence\n    // `policiesToUnApply` is initialised to `otherActorPolicies`.\n    // However, if we're in this if branch, that means we also had to replace\n    // Policies that defined access for just this actor, so we'll have to remove\n    // all Policies mentioning this actor:\n    policiesToUnapply = conflictingPolicies;\n  }\n  // ...then remove existing Policy URLs that mentioned both the given actor\n  // and other actors from the given Resource and apply the new ones (but do not\n  // remove the actual old Policies - they might still apply to other Resources!).\n  acrPoliciesToUnapply.forEach(previouslyApplicableAcrPolicy => {\n    updatedResource = removeAcrPolicyUrl$1(updatedResource, asIri(previouslyApplicableAcrPolicy));\n  });\n  policiesToUnapply.forEach(previouslyApplicablePolicy => {\n    updatedResource = removePolicyUrl$1(updatedResource, asIri(previouslyApplicablePolicy));\n  });\n  return updatedResource;\n}\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function adds the relevant Access Control Policies and Matchers to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Agent specifically. In other words, it can, for example, add Policies that\r\n * give a particular Agent Read access to the Resource. However, if other\r\n * Policies specify that that Agent is *denied* Read access *except* if they\r\n * match on some other characteristic, then that will be left intact.\r\n * This means that, unless *only* this function is used to manipulate access to\r\n * this Resource, the set access might not be equal to the effective access for\r\n * the given Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Matchers\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param webId Which Agent you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setAgentAccess(resource, acpData, webId, access) {\n  return internal_setActorAccess(resource, acpData, acp.agent, webId, access);\n}\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function adds the relevant Access Control Policies and Matchers to a\r\n * Resource's Access Control Resource to define the given access for everybody\r\n * specifically. In other words, it can, for example, add Policies that\r\n * give everybody Read access to the Resource. However, if other\r\n * Policies specify that everybody is *denied* Read access *except* if they're\r\n * a particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for a particular Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Matchers\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\nfunction internal_setPublicAccess(resource, acpData, access) {\n  return internal_setActorAccess(resource, acpData, acp.agent, acp.PublicAgent, access);\n}\nfunction policyHasOtherActors(policy, actorRelation, actor, acpData) {\n  // Note: the non-null assertions (`!`) here should be valid because\n  //       the caller of `policyHasOtherActors` should already have validated\n  //       that the return value of internal_getPoliciesAndMatchers() did not have\n  //       any inaccessible URLs, so we should be able to find every Matcher.\n  const allOfMatchers = getIriAll(policy, acp.allOf).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));\n  const allOfMatchersHaveOtherActors = allOfMatchers.some(matcher => {\n    return matcherHasOtherActors(matcher, actorRelation, actor);\n  });\n  const anyOfMatchers = getIriAll(policy, acp.anyOf).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));\n  const anyOfMatchersHaveOtherActors = anyOfMatchers.some(matcher => {\n    return matcherHasOtherActors(matcher, actorRelation, actor);\n  });\n  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Matchers */\n  const noneOfMatchers = getIriAll(policy, acp.noneOf).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));\n  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Matchers */\n  const noneOfMatchersHaveOtherActors = noneOfMatchers.some(matcher => {\n    return matcherHasOtherActors(matcher, actorRelation, actor);\n  });\n  return allOfMatchersHaveOtherActors || anyOfMatchersHaveOtherActors || noneOfMatchersHaveOtherActors;\n}\nfunction matcherHasOtherActors(matcher, actorRelation, actor) {\n  const otherActors = [];\n  knownActorRelations.forEach(knownActorRelation => {\n    const otherActorsWithThisRelation = getIriAll(matcher, knownActorRelation).filter(applicableActor => applicableActor !== actor || knownActorRelation !== actorRelation);\n    // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:\n    otherActors.push(...otherActorsWithThisRelation);\n  });\n  return otherActors.length > 0;\n}\nfunction copyPolicyExcludingActor(inputPolicy, resourceWithAcr, acpData, actorRelationToExclude, actorToExclude) {\n  const newIriSuffix = \"_copy_without\" + `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` + `_${Date.now()}_${Math.random()}`;\n  // Create new Matchers for the Policy, excluding the given Actor\n  const newAllOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.allOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\n  const newAnyOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.anyOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\n  const newNoneOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.noneOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\n  // Create a new Policy with the new Matchers\n  let newPolicy = createResourcePolicyFor(resourceWithAcr, encodeURI(asIri(inputPolicy)) + newIriSuffix);\n  getIriAll(inputPolicy, acp.allow).forEach(allowMode => {\n    newPolicy = addIri(newPolicy, acp.allow, allowMode);\n  });\n  getIriAll(inputPolicy, acp.deny).forEach(denyMode => {\n    newPolicy = addIri(newPolicy, acp.deny, denyMode);\n  });\n  newAllOfMatchers.forEach(newMatcher => {\n    newPolicy = addIri(newPolicy, acp.allOf, newMatcher);\n  });\n  newAnyOfMatchers.forEach(newMatcher => {\n    newPolicy = addIri(newPolicy, acp.anyOf, newMatcher);\n  });\n  /* istanbul ignore next Policies listing noneOf Matchers are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Matchers to copy. */\n  newNoneOfMatchers.forEach(newMatcher => {\n    newPolicy = addIri(newPolicy, acp.noneOf, newMatcher);\n  });\n  return [newPolicy, newAllOfMatchers.concat(newAnyOfMatchers).concat(newNoneOfMatchers)];\n}\n/** Creates clones of all the Matchers identified by `matcherIris` in `acpData`, excluding the given Actor */\nfunction copyMatchersExcludingActor(matcherIris, resourceWithAcr, acpData, iriSuffix, actorRelationToExclude, actorToExclude) {\n  return matcherIris.map(matcherIri => {\n    const matcher = acpData.matchers.find(matcher => asIri(matcher) === matcherIri);\n    /* istanbul ignore if: getPoliciesAndMatchers should already have fetched all referenced Matchers, so this should never be true: */\n    if (typeof matcher === \"undefined\") {\n      return null;\n    }\n    let newMatcher = createResourceMatcherFor(resourceWithAcr, encodeURI(asIri(matcher)) + iriSuffix);\n    let listsOtherActors = false;\n    knownActorRelations.forEach(knownActorRelation => {\n      getIriAll(matcher, knownActorRelation).forEach(targetActor => {\n        if (knownActorRelation === actorRelationToExclude && targetActor === actorToExclude) {\n          return;\n        }\n        listsOtherActors = true;\n        newMatcher = addIri(newMatcher, knownActorRelation, targetActor);\n      });\n    });\n    return listsOtherActors ? newMatcher : null;\n  }).filter(isNotNull);\n}\nfunction isNotNull(value) {\n  return value !== null;\n}\nasync function internal_getPoliciesAndMatchers(resource) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const acrPolicyUrls = getAcrPolicyUrlAll$1(resource);\n  const policyUrls = getPolicyUrlAll$1(resource);\n  const allPolicyResourceUrls = getResourceUrls(acrPolicyUrls).concat(getResourceUrls(policyUrls));\n  const policyResources = await getResources(allPolicyResourceUrls, options);\n  const acrPolicies = getThingsFromResources(acrPolicyUrls, policyResources).filter(isNotNull);\n  const policies = getThingsFromResources(policyUrls, policyResources).filter(isNotNull);\n  const matcherUrlSet = new Set();\n  acrPolicies.forEach(acrPolicy => {\n    const referencedMatcherUrls = getReferencedMatcherUrls(acrPolicy);\n    referencedMatcherUrls.forEach(matcherUrl => {\n      matcherUrlSet.add(matcherUrl);\n    });\n  });\n  policies.forEach(policy => {\n    const referencedMatcherUrls = getReferencedMatcherUrls(policy);\n    referencedMatcherUrls.forEach(matcherUrl => {\n      matcherUrlSet.add(matcherUrl);\n    });\n  });\n  const matcherUrls = Array.from(matcherUrlSet);\n  const matcherResourceUrls = matcherUrls.map(matcherUrl => getResourceUrl(matcherUrl));\n  const unfetchedMatcherResourceUrls = matcherResourceUrls.filter(matcherResourceUrl => !allPolicyResourceUrls.includes(matcherResourceUrl));\n  const matcherResources = await getResources(unfetchedMatcherResourceUrls, options);\n  const allResources = Object.assign(Object.assign({}, policyResources), matcherResources);\n  const matchers = getThingsFromResources(matcherUrls, allResources).filter(isNotNull);\n  const inaccessibleUrls = Object.keys(allResources).filter(resourceUrl => allResources[resourceUrl] === null);\n  return {\n    inaccessibleUrls,\n    acrPolicies,\n    policies,\n    matchers\n  };\n}\nfunction getResourceUrl(thingUrl) {\n  const thingUrlObject = new URL(thingUrl);\n  thingUrlObject.hash = \"\";\n  return thingUrlObject.href;\n}\nfunction getResourceUrls(thingUrls) {\n  const resourceUrls = [];\n  thingUrls.forEach(thingUrl => {\n    const resourceUrl = getResourceUrl(thingUrl);\n    if (!resourceUrls.includes(resourceUrl)) {\n      resourceUrls.push(resourceUrl);\n    }\n  });\n  return resourceUrls;\n}\nasync function getResources(resourceUrls, options) {\n  const uniqueResourceUrls = Array.from(new Set(resourceUrls));\n  const resources = {};\n  await Promise.all(uniqueResourceUrls.map(async resourceUrl => {\n    try {\n      const resource = await getSolidDataset(resourceUrl, options);\n      resources[resourceUrl] = resource;\n    } catch (e) {\n      resources[resourceUrl] = null;\n    }\n  }));\n  return resources;\n}\nfunction getThingsFromResources(thingUrls, resources) {\n  return thingUrls.map(thingUrl => {\n    const resourceUrl = getResourceUrl(thingUrl);\n    const resource = resources[resourceUrl];\n    if (!resource) {\n      return null;\n    }\n    return getThing(resource, thingUrl);\n  });\n}\nfunction getReferencedMatcherUrls(policy) {\n  return getAllOfMatcherUrlAll(policy).concat(getAnyOfMatcherUrlAll(policy)).concat(getNoneOfMatcherUrlAll(policy));\n}\n\n//\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Agent. If\r\n *   additional restrictions are set up to apply to the given Agent in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function getAgentAccess$2(resourceUrl, webId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\n    return internal_getAgentAccess(acpData, webId);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getAgentAccess$4(resourceInfo, webId, options);\n  }\n  return null;\n}\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Agent's access to.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Agent explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function setAgentAccess$2(resourceUrl, webId, access) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\n    const updatedResource = internal_setAgentAccess(resourceInfo, acpData, webId, access);\n    if (updatedResource) {\n      try {\n        await saveAcrFor(updatedResource, options);\n        return await getAgentAccess$2(resourceUrl, webId, options);\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    if (access.controlRead !== access.controlWrite) {\n      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\n    }\n    const wacAccess = access;\n    await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);\n    return getAgentAccess$4(resourceInfo, webId, options);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for all Agents with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Agents. If\r\n *   additional restrictions are set up to apply to the listed Agents in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, grouped by Agent.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function getAgentAccessAll$2(resourceUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\n    return internal_getAgentAccessAll(acpData);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getAgentAccessAll$4(resourceInfo, options);\n  }\n  return null;\n}\n/**\r\n * Get an overview of what access is defined for everyone.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for everyone. If\r\n *   additional restrictions are set up to apply to users in a particular\r\n *   situation, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function getPublicAccess$2(resourceUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\n    return internal_getPublicAccess(acpData);\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    return getPublicAccess$4(resourceInfo, options);\n  }\n  return null;\n}\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for everybody. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access a user has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change public access to.\r\n * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for everybody explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\nasync function setPublicAccess$2(resourceUrl, access) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : internal_defaultFetchOptions;\n  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\n  if (hasAccessibleAcr(resourceInfo)) {\n    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\n    const updatedResource = internal_setPublicAccess(resourceInfo, acpData, access);\n    if (updatedResource) {\n      try {\n        await saveAcrFor(updatedResource, options);\n        return await getPublicAccess$2(resourceUrl, options);\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n  if (hasAccessibleAcl(resourceInfo)) {\n    if (access.controlRead !== access.controlWrite) {\n      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\n    }\n    const wacAccess = access;\n    await setPublicResourceAccess(resourceInfo, wacAccess, options);\n    return getPublicAccess$4(resourceInfo, options);\n  }\n  return null;\n}\nvar universal_v2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAgentAccess: getAgentAccess$2,\n  setAgentAccess: setAgentAccess$2,\n  getAgentAccessAll: getAgentAccessAll$2,\n  getPublicAccess: getPublicAccess$2,\n  setPublicAccess: setPublicAccess$2,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor\n});\n\n//\n/**\r\n * Retrieve the Server Resource Info of Resource expressing access control over\r\n * another resource it is linked to. It applies in both ACP and WAC contexts:\r\n * the Access Control Resource is discovered consistently using a Link header\r\n * with `rel=acl`.\r\n *\r\n * @param {WithServerResourceInfo} resource The Resource for which ACL we want\r\n * to retrieve the Server Resource Info.\r\n * @param {DefaultOptions} options\r\n * @returns The Server Resource Info if available, null otherwise.\r\n * @since 1.19.0\r\n */\nasync function getAclServerResourceInfo(resource, options) {\n  if (typeof resource.internal_resourceInfo.aclUrl === \"string\") {\n    return getResourceInfo(resource.internal_resourceInfo.aclUrl, options);\n  }\n  return null;\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Policies allow or deny access modes over resources and their associated\r\n * access control resource.\r\n *\r\n * @param policy The Policy Thing which allows retrieved access modes.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\nfunction getAllowModes(policy) {\n  return getModes(policy, ACP.allow);\n}\n\n//\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Policies allow or deny access modes over resources and their associated\r\n * access control resource.\r\n *\r\n * @param policy The Policy Thing which denies retrieved access modes.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\nfunction getDenyModes(policy) {\n  return getModes(policy, ACP.deny);\n}\n\n//\n/** @hidden */\nfunction isAgentMatched(acr, policy, webId) {\n  // TODO: Proper solution\n  // Finalise, release and use the TypeScript ACP Solid library\n  // internal_getActorAccess in acp_v2:96 doesn't reduce the policies properly\n  // policyAppliesTo in acp_v2:256 assumes that every matcher is an agent matcher\n  //\n  // TODO: Stopgap solution\n  // Implement a simplistic reduce function that\n  // matches policies where the agent is present in the matchers\n  const allOfMatchers = getUrlAll(policy, ACP.allOf).map(url => getThing(internal_getAcr(acr), url)).filter(thing => thing !== null);\n  const allOfMatched = allOfMatchers.every(thing => {\n    return getUrlAll(thing, ACP.agent).includes(webId);\n  });\n  const anyOfMatchers = getUrlAll(policy, ACP.anyOf).map(url => getThing(internal_getAcr(acr), url)).filter(thing => thing !== null);\n  const anyOfMatched = anyOfMatchers.some(thing => {\n    return getUrlAll(thing, ACP.agent).includes(webId);\n  });\n  const noneOfMatchers = getUrlAll(policy, ACP.noneOf).map(url => getThing(internal_getAcr(acr), url)).filter(thing => thing !== null);\n  const noneOfMatched = noneOfMatchers.some(thing => {\n    return getUrlAll(thing, ACP.agent).includes(webId);\n  });\n  return allOfMatchers.length + anyOfMatchers.length > 0 && (allOfMatchers.length === 0 || allOfMatched) && (anyOfMatchers.length === 0 || anyOfMatched) && (noneOfMatchers.length === 0 || !noneOfMatched);\n}\n/** @hidden */\nfunction reduceModes(policy, modes, type) {\n  const allowed = getAllowModes(policy);\n  const denied = getDenyModes(policy);\n  if (type === \"control\") {\n    return {\n      read: modes.read,\n      append: modes.append,\n      write: modes.write,\n      controlRead: (modes.controlRead || allowed.read) && !denied.read,\n      controlWrite: (modes.controlWrite || allowed.write) && !denied.write\n    };\n  }\n  return {\n    read: (modes.read || allowed.read) && !denied.read,\n    append: (modes.append || allowed.append) && !denied.append,\n    write: (modes.write || allowed.write) && !denied.write,\n    controlRead: modes.controlRead,\n    controlWrite: modes.controlWrite\n  };\n}\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.16.0\r\n */\nasync function getAgentAccess$1(resourceWithAcr, webId) {\n  // TODO: add support for external resources\n  let resourceAccess = {\n    read: false,\n    append: false,\n    write: false,\n    controlRead: false,\n    controlWrite: false\n  };\n  const policyAll = getPolicyUrlAll(resourceWithAcr).map(url => getThing(internal_getAcr(resourceWithAcr), url)).filter(policy => policy !== null);\n  policyAll.forEach(policy => {\n    if (isAgentMatched(resourceWithAcr, policy, webId)) {\n      resourceAccess = reduceModes(policy, resourceAccess, \"resource\");\n    }\n  });\n  const acrPolicyAll = getAcrPolicyUrlAll(resourceWithAcr).map(url => getThing(internal_getAcr(resourceWithAcr), url)).filter(policy => policy !== null);\n  acrPolicyAll.forEach(policy => {\n    if (isAgentMatched(resourceWithAcr, policy, webId)) {\n      resourceAccess = reduceModes(policy, resourceAccess, \"control\");\n    }\n  });\n  return resourceAccess;\n}\n\n//\n/**\r\n * Retrieve the URL of an Access Control Resource as per pre-draft versions of\r\n * the ACP specification.\r\n *\r\n * @param resource The Resource for which to retrieve the URL of the Access\r\n * Control Resource if it is accessible.\r\n * @returns The URL of the ACR or null.\r\n * @deprecated\r\n */\nfunction getAcrUrl$1(resource) {\n  const linkedAccessControlResource = resource.internal_resourceInfo.linkedResources[ACP.accessControl];\n  if (Array.isArray(linkedAccessControlResource) && linkedAccessControlResource.length === 1) {\n    return linkedAccessControlResource[0];\n  }\n  return null;\n}\n\n//\n/**\r\n * Retrieve the URL of an Access Control Resource as per the ACP Draft\r\n * specification.\r\n *\r\n * @param resource The Resource for which to retrieve the URL of the Access\r\n * Control Resource if it is accessible.\r\n * @returns The URL of the ACR or null.\r\n */\nasync function getAcrUrl(resource, options) {\n  // TODO: Remove as soon as ESS 1.1 is phased out\n  const legacyAcrUrl = getAcrUrl$1(resource);\n  if (legacyAcrUrl !== null) {\n    return legacyAcrUrl;\n  }\n  // The ACP Draft mandates a link rel=\"type\" header identifies Access Control Resources\n  const aclServerResourceInfo = await getAclServerResourceInfo(resource, options);\n  if (aclServerResourceInfo === null) {\n    return null;\n  }\n  const relTypeLinks = getLinkedResourceUrlAll(aclServerResourceInfo).type;\n  if (Array.isArray(relTypeLinks) && relTypeLinks.includes(ACP.AccessControlResource)) {\n    return getSourceUrl(aclServerResourceInfo);\n  }\n  return null;\n}\n\n//\n/**\r\n * Retrieve the Access Control Resource of a Resource as per the ACP Draft\r\n * specification.\r\n *\r\n * @param resource The Resource for which to retrieve the URL of the Access\r\n * Control Resource if it is accessible.\r\n * @param options Default Options such as a fetch function.\r\n * @returns The URL of the ACR or null.\r\n */\nasync function getResourceAcr(resource, options) {\n  const acrUrl = await getAcrUrl(resource, options);\n  if (acrUrl === null) {\n    return null;\n  }\n  let acr;\n  try {\n    acr = await getSolidDataset(acrUrl, options);\n  } catch (e) {\n    return null;\n  }\n  return Object.assign(Object.assign({}, resource), {\n    internal_acp: {\n      acr: Object.assign(Object.assign({}, acr), {\n        accessTo: getSourceUrl(resource)\n      })\n    }\n  });\n}\n\n//\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\nasync function getAgentAccess(resourceUrl, webId, options) {\n  const resourceInfo = await getResourceInfo(resourceUrl, options);\n  const acr = await getResourceAcr(resourceInfo, options);\n  if (acr === null) {\n    return getAgentAccess$4(resourceInfo, webId, options);\n  }\n  return getAgentAccess$1(acr, webId);\n}\n\n//\n/** @hidden */\nfunction getAgentUrlAll(acr) {\n  return Array.from(new Set(getThingAll(internal_getAcr(acr)).map(thing => {\n    return getUrlAll(thing, ACP.agent);\n  }).reduce((flatArray, agentArray) => {\n    return flatArray.concat(agentArray);\n  }, [])));\n}\n\n//\n/**\r\n * Get an overview of what access is defined for agents.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.21.0\r\n */\nasync function getAgentAccessAll$1(resourceWithAcr) {\n  return (await Promise.all(getAgentUrlAll(resourceWithAcr).map(async agent => ({\n    [agent]: await getAgentAccess$1(resourceWithAcr, agent)\n  })))).reduce((agentAccessAll, currentAgentAccess) => Object.assign(Object.assign({}, agentAccessAll), currentAgentAccess), {});\n}\n\n//\n/**\r\n * Get an overview of what access is defined for agents.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.21.0\r\n */\nasync function getAgentAccessAll(resourceUrl, options) {\n  const resourceInfo = await getResourceInfo(resourceUrl, options);\n  const acr = await getResourceAcr(resourceInfo, options);\n  if (acr === null) {\n    return getAgentAccessAll$4(resourceInfo, options);\n  }\n  return getAgentAccessAll$1(acr);\n}\n\n//\n/**\r\n * Get an overview of what access is given to the public.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to read the access for.\r\n * @since 1.16.0\r\n */\nasync function getPublicAccess$1(resourceWithAcr) {\n  return getAgentAccess$1(resourceWithAcr, ACP.PublicAgent);\n}\n\n//\n/**\r\n * Get an overview of what access is defined for the Public.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\nasync function getPublicAccess(resourceUrl, options) {\n  const resourceInfo = await getResourceInfo(resourceUrl, options);\n  const acr = await getResourceAcr(resourceInfo, options);\n  if (acr === null) {\n    return getPublicAccess$4(resourceInfo, options);\n  }\n  return getPublicAccess$1(acr);\n}\n\n//\n/** @hidden */\nfunction getDefaultAgentMatcherPolicyUrl(resource, name, mode) {\n  return getDefaultAccessControlUrl(resource, name).concat(\"AgentMatcher\").concat(mode.charAt(0).toUpperCase() + mode.slice(1)).concat(\"Policy\");\n}\n\n//\n/** @hidden */\nfunction setDefaultAgentMatcherPolicyThingIfNotExist(resource, name, mode) {\n  const policyUrl = getDefaultAgentMatcherPolicyUrl(resource, name, mode);\n  // TODO: Re-enable when we support setting agent access on member resources\n  // if (policyUrl.includes(\"Member\") && policyUrl.includes(\"Acr\")) {\n  //   return addMemberAcrPolicyUrl(resource, policyUrl);\n  // }\n  // if (policyUrl.includes(\"Member\")) {\n  //   return addMemberPolicyUrl(resource, policyUrl);\n  // }\n  if (policyUrl.includes(\"Acr\")) {\n    return addAcrPolicyUrl(resource, policyUrl);\n  }\n  return addPolicyUrl(resource, policyUrl);\n}\n\n//\n/** @hidden */\nfunction getDefaultAgentMatcherPolicyMatcherUrl(resource, name, mode) {\n  return getDefaultAgentMatcherPolicyUrl(resource, name, mode).concat(\"Matcher\");\n}\n\n//\n/** @hidden */\nconst DEFAULT_POLICY_MATCHER_PREDICATE = ACP.anyOf;\n/**\r\n * This functions scaffolds the default elements required for giving access to\r\n * an agent:\r\n * 1. If the Access Control Resource is empty, create the AccessControlResource\r\n *    element;\r\n * 2. If the current default Access Control doesn't exist (the one applying to\r\n *    one of: the Resource, the ACR, the Member Resources or the ACR of members)\r\n *    create it;\r\n * 3. If the default Policy for allowing the Access Modes for the current\r\n *    default Access Control doesn't exist, create it;\r\n * 4. If the default \"anyOf\" Agent Matcher for the current Policy creates it;\r\n * 5. Returns an ACR with a Matcher ready to add to.\r\n * @hidden\r\n * */\nfunction setDefaultAgentMatcherPolicyMatcherThingIfNotExist(resource, name, mode) {\n  const policyUrl = getDefaultAgentMatcherPolicyUrl(resource, name, mode);\n  const matcherUrl = getDefaultAgentMatcherPolicyMatcherUrl(resource, name, mode);\n  let defaultAgentMatcherPolicyThing = getThing(internal_getAcr(resource), policyUrl);\n  if (!defaultAgentMatcherPolicyThing) {\n    resource = setDefaultAgentMatcherPolicyThingIfNotExist(resource, name, mode);\n    defaultAgentMatcherPolicyThing = createThing({\n      url: policyUrl\n    });\n    defaultAgentMatcherPolicyThing = setModes(defaultAgentMatcherPolicyThing, {\n      [mode]: true\n    }, ACP.allow);\n  }\n  // Get the Default Access Control Agent Matcher Policy Matcher Thing or create it and return\n  const agentMatcherPolicyUrlAll = getIriAll(defaultAgentMatcherPolicyThing, DEFAULT_POLICY_MATCHER_PREDICATE);\n  if (!agentMatcherPolicyUrlAll.includes(matcherUrl)) {\n    defaultAgentMatcherPolicyThing = buildThing(defaultAgentMatcherPolicyThing).addUrl(DEFAULT_POLICY_MATCHER_PREDICATE, matcherUrl).build();\n    return setAccessControlResourceThing(resource, defaultAgentMatcherPolicyThing);\n  }\n  return resource;\n}\n\n//\n/** @hidden */\nfunction setAgentAccessMode(resourceWithAcr, webId, name, mode, operation) {\n  var _a;\n  const matcherUrl = getDefaultAgentMatcherPolicyMatcherUrl(resourceWithAcr, name, mode);\n  // Set default Matcher if not exists\n  const resourceWithDefaultAgentMatcher = setDefaultAgentMatcherPolicyMatcherThingIfNotExist(resourceWithAcr, name, mode);\n  const defaultAgentMatcherThing = (_a = getThing(internal_getAcr(resourceWithDefaultAgentMatcher), matcherUrl)) !== null && _a !== void 0 ? _a : createThing({\n    url: matcherUrl\n  });\n  return setAccessControlResourceThing(resourceWithDefaultAgentMatcher, operation === \"add\" ? addAgent(defaultAgentMatcherThing, webId) : removeAgent(defaultAgentMatcherThing, webId));\n}\n/**\r\n * Set access for a given Agent.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to set the access for.\r\n * @param webId WebID of the Agent you want to set the access for.\r\n * @param access Access Modes you want to set for the agent.\r\n * @since 1.16.0\r\n */\nasync function setAgentAccess$1(resourceWithAcr, webId, access) {\n  const agentAccessModes = await getAgentAccess$1(resourceWithAcr, webId);\n  // Add Agent to Default Matchers (including member) if access mode is different from what exists\n  if (typeof access.read === \"boolean\" && agentAccessModes.read !== access.read) {\n    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, \"read\", access.read ? \"add\" : \"remove\");\n  }\n  if (typeof access.append === \"boolean\" && agentAccessModes.append !== access.append) {\n    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, \"append\", access.append ? \"add\" : \"remove\");\n  }\n  if (typeof access.write === \"boolean\" && agentAccessModes.write !== access.write) {\n    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, \"write\", access.write ? \"add\" : \"remove\");\n  }\n  if (typeof access.controlRead === \"boolean\" && agentAccessModes.controlRead !== access.controlRead) {\n    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACR_ACCESS_CONTROL, \"controlRead\", access.controlRead ? \"add\" : \"remove\");\n  }\n  if (typeof access.controlWrite === \"boolean\" && agentAccessModes.controlWrite !== access.controlWrite) {\n    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACR_ACCESS_CONTROL, \"controlWrite\", access.controlWrite ? \"add\" : \"remove\");\n  }\n  return resourceWithAcr;\n}\n\n//\n/**\r\n * Set access to a resource for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access will not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to set access for.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access The Access Modes to add (true) or remove (false).\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\nasync function setAgentAccess(resourceUrl, webId, access, options) {\n  // TODO: Change the standard getAgentAccess signatures to all take a  T extends WithAcl\n  const resourceInfo = await getResourceInfo(resourceUrl, options);\n  const acr = await getResourceAcr(resourceInfo, options);\n  if (acr === null) {\n    await setAgentResourceAccess(resourceInfo, webId, access, options);\n    return getAgentAccess$4(resourceInfo, webId, options);\n  }\n  // TODO: Make sure both setAgentAccessWac and setAgentAccessAcp don't save within the function, expose one standard saveAclFor function that is universal.\n  try {\n    await saveAcrFor(await setAgentAccess$1(acr, webId, access), options);\n    return await getAgentAccess(resourceUrl, webId, options);\n  } catch (e) {\n    return null;\n  }\n}\n\n//\n/**\r\n * Set access for the public.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to read the access for.\r\n * @param access Access Modes you want to set for the agent.\r\n * @since 1.16.0\r\n */\nasync function setPublicAccess$1(resourceWithAcr, access) {\n  return setAgentAccess$1(resourceWithAcr, ACP.PublicAgent, access);\n}\n\n//\n/**\r\n * Set access to a resource for the public.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access will not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to set access for.\r\n * @param access The Access Modes to add (true) or remove (false).\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\nasync function setPublicAccess(resourceUrl, access, options) {\n  const resourceInfo = await getResourceInfo(resourceUrl, options);\n  const acr = await getResourceAcr(resourceInfo, options);\n  if (acr === null) {\n    await setPublicResourceAccess(resourceInfo, access, options);\n    return getPublicAccess$4(resourceInfo, options);\n  }\n  try {\n    await saveAcrFor(await setPublicAccess$1(acr, access), options);\n    return await getPublicAccess(resourceUrl, options);\n  } catch (e) {\n    return null;\n  }\n}\n\n//\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAclServerResourceInfo: getAclServerResourceInfo,\n  getAgentAccess: getAgentAccess,\n  getAgentAccessAll: getAgentAccessAll,\n  getPublicAccess: getPublicAccess,\n  setAgentAccess: setAgentAccess,\n  setPublicAccess: setPublicAccess\n});\n\n//\n\nvar ess1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getFileWithAccessDatasets: getFileWithAccessDatasets,\n  getFileWithAcr: getFileWithAcr,\n  getLinkedAcrUrl: getLinkedAcrUrl,\n  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr: getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr: getSolidDatasetWithAcr,\n  hasAccessibleAcr: hasAccessibleAcr,\n  saveAcrFor: saveAcrFor,\n  isAcpControlled: isAcpControlled,\n  acrAsMarkdown: acrAsMarkdown,\n  addAcrPolicyUrl: addAcrPolicyUrl$1,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\n  addMemberPolicyUrl: addMemberPolicyUrl$1,\n  addPolicyUrl: addPolicyUrl$1,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,\n  getPolicyUrlAll: getPolicyUrlAll$1,\n  hasLinkedAcr: hasLinkedAcr,\n  removeAcrPolicyUrl: removeAcrPolicyUrl$1,\n  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\n  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrl: removeMemberPolicyUrl$1,\n  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,\n  removePolicyUrl: removePolicyUrl$1,\n  removePolicyUrlAll: removePolicyUrlAll,\n  createPolicy: createPolicy,\n  getAllowModes: getAllowModesV1,\n  getDenyModes: getDenyModesV1,\n  getPolicy: getPolicy,\n  getPolicyAll: getPolicyAll,\n  policyAsMarkdown: policyAsMarkdown,\n  removePolicy: removePolicy,\n  setAllowModes: setAllowModesV1,\n  setDenyModes: setDenyModesV1,\n  setPolicy: setPolicy,\n  createResourcePolicyFor: createResourcePolicyFor,\n  getResourceAcrPolicy: getResourceAcrPolicy,\n  getResourceAcrPolicyAll: getResourceAcrPolicyAll,\n  getResourcePolicy: getResourcePolicy,\n  getResourcePolicyAll: getResourcePolicyAll,\n  removeResourceAcrPolicy: removeResourceAcrPolicy,\n  removeResourcePolicy: removeResourcePolicy,\n  setResourceAcrPolicy: setResourceAcrPolicy,\n  setResourcePolicy: setResourcePolicy$1,\n  addAgent: addAgent$1,\n  addNoneOfRuleUrl: addNoneOfRuleUrl,\n  addGroup: addGroup,\n  addAnyOfRuleUrl: addAnyOfRuleUrl,\n  addAllOfRuleUrl: addAllOfRuleUrl,\n  createRule: createRule,\n  getAgentAll: getAgentAll$1,\n  getNoneOfRuleUrlAll: getNoneOfRuleUrlAll,\n  getGroupAll: getGroupAll,\n  getAnyOfRuleUrlAll: getAnyOfRuleUrlAll,\n  getAllOfRuleUrlAll: getAllOfRuleUrlAll,\n  getRule: getRule,\n  getRuleAll: getRuleAll,\n  hasAuthenticated: hasAuthenticated$1,\n  hasCreator: hasCreator$1,\n  hasPublic: hasPublic$1,\n  removeAgent: removeAgent$1,\n  removeNoneOfRuleUrl: removeNoneOfRuleUrl,\n  removeGroup: removeGroup,\n  removeAnyOfRuleUrl: removeAnyOfRuleUrl,\n  removeAllOfRuleUrl: removeAllOfRuleUrl,\n  removeRule: removeRule,\n  ruleAsMarkdown: ruleAsMarkdown,\n  setAgent: setAgent$1,\n  setAuthenticated: setAuthenticated$1,\n  setCreator: setCreator$1,\n  setNoneOfRuleUrl: setNoneOfRuleUrl,\n  setGroup: setGroup,\n  setAnyOfRuleUrl: setAnyOfRuleUrl,\n  setPublic: setPublic$1,\n  setAllOfRuleUrl: setAllOfRuleUrl,\n  setRule: setRule,\n  addClient: addClient$1,\n  getClientAll: getClientAll$1,\n  hasAnyClient: hasAnyClient$1,\n  removeClient: removeClient$1,\n  setAnyClient: setAnyClient$1,\n  setClient: setClient$1,\n  removeAnyClient: removeAnyClient$1,\n  removeAuthenticated: removeAuthenticated$1,\n  removeCreator: removeCreator$1,\n  removePublic: removePublic$1,\n  createResourceRuleFor: createResourceRuleFor,\n  getResourceRule: getResourceRule,\n  getResourceRuleAll: getResourceRuleAll,\n  removeResourceRule: removeResourceRule,\n  setResourceRule: setResourceRule,\n  addMockAcrTo: addMockAcrTo,\n  mockAcrFor: mockAcrFor\n});\n\n//\n\nvar ess2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getFileWithAccessDatasets: getFileWithAccessDatasets,\n  getFileWithAcr: getFileWithAcr,\n  getLinkedAcrUrl: getLinkedAcrUrl,\n  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr: getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr: getSolidDatasetWithAcr,\n  hasAccessibleAcr: hasAccessibleAcr,\n  saveAcrFor: saveAcrFor,\n  isAcpControlled: isAcpControlled,\n  hasLinkedAcr: hasLinkedAcr,\n  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,\n  removePolicyUrlAll: removePolicyUrlAll,\n  addAcrPolicyUrl: addAcrPolicyUrl,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl,\n  addMemberPolicyUrl: addMemberPolicyUrl,\n  addPolicyUrl: addPolicyUrl,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll,\n  getPolicyUrlAll: getPolicyUrlAll,\n  removeAcrPolicyUrl: removeAcrPolicyUrl,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl,\n  removeMemberPolicyUrl: removeMemberPolicyUrl,\n  removePolicyUrl: removePolicyUrl,\n  setResourcePolicy: setResourcePolicy,\n  createPolicy: createPolicy,\n  getPolicy: getPolicy,\n  getPolicyAll: getPolicyAll,\n  removePolicy: removePolicy,\n  setPolicy: setPolicy,\n  createResourcePolicyFor: createResourcePolicyFor,\n  getResourceAcrPolicy: getResourceAcrPolicy,\n  getResourceAcrPolicyAll: getResourceAcrPolicyAll,\n  getResourcePolicy: getResourcePolicy,\n  getResourcePolicyAll: getResourcePolicyAll,\n  removeResourceAcrPolicy: removeResourceAcrPolicy,\n  removeResourcePolicy: removeResourcePolicy,\n  getAllowModes: getAllowModesV2,\n  getDenyModes: getDenyModesV2,\n  setAllowModes: setAllowModesV2,\n  setDenyModes: setDenyModesV2,\n  addAgent: addAgent,\n  addNoneOfMatcherUrl: addNoneOfMatcherUrl,\n  addAnyOfMatcherUrl: addAnyOfMatcherUrl,\n  addAllOfMatcherUrl: addAllOfMatcherUrl,\n  createMatcher: createMatcher,\n  getAgentAll: getAgentAll,\n  getNoneOfMatcherUrlAll: getNoneOfMatcherUrlAll,\n  getAnyOfMatcherUrlAll: getAnyOfMatcherUrlAll,\n  getAllOfMatcherUrlAll: getAllOfMatcherUrlAll,\n  getMatcher: getMatcher,\n  getMatcherAll: getMatcherAll,\n  hasAuthenticated: hasAuthenticated,\n  hasCreator: hasCreator,\n  hasPublic: hasPublic,\n  removeAgent: removeAgent,\n  removeNoneOfMatcherUrl: removeNoneOfMatcherUrl,\n  removeAnyOfMatcherUrl: removeAnyOfMatcherUrl,\n  removeAllOfMatcherUrl: removeAllOfMatcherUrl,\n  removeMatcher: removeMatcher,\n  setAgent: setAgent,\n  setAuthenticated: setAuthenticated,\n  setCreator: setCreator,\n  setNoneOfMatcherUrl: setNoneOfMatcherUrl,\n  setAnyOfMatcherUrl: setAnyOfMatcherUrl,\n  setPublic: setPublic,\n  setAllOfMatcherUrl: setAllOfMatcherUrl,\n  setMatcher: setMatcher,\n  addClient: addClient,\n  getClientAll: getClientAll,\n  removeClient: removeClient,\n  removeAuthenticated: removeAuthenticated,\n  removeCreator: removeCreator,\n  removePublic: removePublic,\n  createResourceMatcherFor: createResourceMatcherFor,\n  getResourceMatcher: getResourceMatcher,\n  getResourceMatcherAll: getResourceMatcherAll,\n  removeResourceMatcher: removeResourceMatcher,\n  setResourceMatcher: setResourceMatcher,\n  addMockAcrTo: addMockAcrTo,\n  mockAcrFor: mockAcrFor,\n  getVcAccess: getVcAccess,\n  setVcAccess: setVcAccess\n});\nexports.FetchError = FetchError;\nexports.SolidClientError = SolidClientError;\nexports.ThingExpectedError = ThingExpectedError;\nexports.access = universal;\nexports.access_v1 = universal_v1;\nexports.access_v2 = universal_v2;\nexports.acp_ess_1 = ess1;\nexports.acp_ess_2 = ess2;\nexports.acp_v1 = acp_v1;\nexports.acp_v2 = acp_v2;\nexports.acp_v3 = acp_v3;\nexports.acp_v4 = acp_v4;\nexports.addBoolean = addBoolean;\nexports.addDate = addDate;\nexports.addDatetime = addDatetime;\nexports.addDecimal = addDecimal;\nexports.addInteger = addInteger;\nexports.addIri = addIri;\nexports.addJwkToJwks = addJwkToJwks;\nexports.addLiteral = addLiteral;\nexports.addMockFallbackAclTo = addMockFallbackAclTo;\nexports.addMockResourceAclTo = addMockResourceAclTo;\nexports.addNamedNode = addNamedNode;\nexports.addPublicKeyToProfileJwks = addPublicKeyToProfileJwks;\nexports.addStringEnglish = addStringEnglish;\nexports.addStringNoLocale = addStringNoLocale;\nexports.addStringWithLocale = addStringWithLocale;\nexports.addTerm = addTerm;\nexports.addTime = addTime;\nexports.addUrl = addUrl;\nexports.asIri = asIri;\nexports.asUrl = asUrl;\nexports.buildThing = buildThing;\nexports.changeLogAsMarkdown = changeLogAsMarkdown;\nexports.createAcl = createAcl;\nexports.createAclFromFallbackAcl = createAclFromFallbackAcl;\nexports.createContainerAt = createContainerAt;\nexports.createContainerInContainer = createContainerInContainer;\nexports.createSolidDataset = createSolidDataset;\nexports.createThing = createThing;\nexports.deleteAclFor = deleteAclFor;\nexports.deleteContainer = deleteContainer;\nexports.deleteFile = deleteFile;\nexports.deleteSolidDataset = deleteSolidDataset;\nexports.fromRdfJsDataset = fromRdfJsDataset;\nexports.getAgentAccess = getAgentAccess$5;\nexports.getAgentAccessAll = getAgentAccessAll$5;\nexports.getAgentDefaultAccess = getAgentDefaultAccess;\nexports.getAgentDefaultAccessAll = getAgentDefaultAccessAll;\nexports.getAgentResourceAccess = getAgentResourceAccess;\nexports.getAgentResourceAccessAll = getAgentResourceAccessAll;\nexports.getAltProfileUrlAllFrom = getAltProfileUrlAllFrom;\nexports.getBoolean = getBoolean;\nexports.getBooleanAll = getBooleanAll;\nexports.getContainedResourceUrlAll = getContainedResourceUrlAll;\nexports.getContentType = getContentType$1;\nexports.getDate = getDate;\nexports.getDateAll = getDateAll;\nexports.getDatetime = getDatetime;\nexports.getDatetimeAll = getDatetimeAll;\nexports.getDecimal = getDecimal;\nexports.getDecimalAll = getDecimalAll;\nexports.getEffectiveAccess = getEffectiveAccess;\nexports.getFallbackAcl = getFallbackAcl;\nexports.getFile = getFile;\nexports.getFileWithAcl = getFileWithAcl;\nexports.getGroupAccess = getGroupAccess$2;\nexports.getGroupAccessAll = getGroupAccessAll$2;\nexports.getGroupDefaultAccess = getGroupDefaultAccess;\nexports.getGroupDefaultAccessAll = getGroupDefaultAccessAll;\nexports.getGroupResourceAccess = getGroupResourceAccess;\nexports.getGroupResourceAccessAll = getGroupResourceAccessAll;\nexports.getInteger = getInteger;\nexports.getIntegerAll = getIntegerAll;\nexports.getIri = getIri;\nexports.getIriAll = getIriAll;\nexports.getJsonLdParser = getJsonLdParser;\nexports.getLinkedResourceUrlAll = getLinkedResourceUrlAll;\nexports.getLiteral = getLiteral;\nexports.getLiteralAll = getLiteralAll;\nexports.getNamedNode = getNamedNode;\nexports.getNamedNodeAll = getNamedNodeAll;\nexports.getPodOwner = getPodOwner;\nexports.getPodUrlAll = getPodUrlAll;\nexports.getPodUrlAllFrom = getPodUrlAllFrom;\nexports.getProfileAll = getProfileAll;\nexports.getProfileJwksIri = getProfileJwksIri;\nexports.getPropertyAll = getPropertyAll;\nexports.getPublicAccess = getPublicAccess$5;\nexports.getPublicDefaultAccess = getPublicDefaultAccess;\nexports.getPublicResourceAccess = getPublicResourceAccess;\nexports.getResourceAcl = getResourceAcl;\nexports.getResourceInfo = getResourceInfo;\nexports.getResourceInfoWithAcl = getResourceInfoWithAcl;\nexports.getSolidDataset = getSolidDataset;\nexports.getSolidDatasetWithAcl = getSolidDatasetWithAcl;\nexports.getSourceIri = getSourceIri;\nexports.getSourceUrl = getSourceUrl;\nexports.getStringByLocaleAll = getStringByLocaleAll;\nexports.getStringEnglish = getStringEnglish;\nexports.getStringEnglishAll = getStringEnglishAll;\nexports.getStringNoLocale = getStringNoLocale;\nexports.getStringNoLocaleAll = getStringNoLocaleAll;\nexports.getStringWithLocale = getStringWithLocale;\nexports.getStringWithLocaleAll = getStringWithLocaleAll;\nexports.getTerm = getTerm;\nexports.getTermAll = getTermAll;\nexports.getThing = getThing;\nexports.getThingAll = getThingAll;\nexports.getTime = getTime;\nexports.getTimeAll = getTimeAll;\nexports.getTurtleParser = getTurtleParser;\nexports.getUrl = getUrl;\nexports.getUrlAll = getUrlAll;\nexports.getWebIdDataset = getWebIdDataset;\nexports.getWellKnownSolid = getWellKnownSolid;\nexports.hasAccessibleAcl = hasAccessibleAcl;\nexports.hasAcl = hasAcl;\nexports.hasFallbackAcl = hasFallbackAcl;\nexports.hasResourceAcl = hasResourceAcl;\nexports.hasResourceInfo = hasResourceInfo;\nexports.hasServerResourceInfo = hasServerResourceInfo;\nexports.isContainer = isContainer;\nexports.isPodOwner = isPodOwner;\nexports.isRawData = isRawData;\nexports.isThing = isThing;\nexports.isThingLocal = isThingLocal;\nexports.mockContainerFrom = mockContainerFrom;\nexports.mockFetchError = mockFetchError;\nexports.mockFileFrom = mockFileFrom;\nexports.mockSolidDatasetFrom = mockSolidDatasetFrom;\nexports.mockThingFrom = mockThingFrom;\nexports.overwriteFile = overwriteFile;\nexports.removeAll = removeAll;\nexports.removeBoolean = removeBoolean;\nexports.removeDate = removeDate;\nexports.removeDatetime = removeDatetime;\nexports.removeDecimal = removeDecimal;\nexports.removeInteger = removeInteger;\nexports.removeIri = removeIri;\nexports.removeLiteral = removeLiteral;\nexports.removeNamedNode = removeNamedNode;\nexports.removeStringEnglish = removeStringEnglish;\nexports.removeStringNoLocale = removeStringNoLocale;\nexports.removeStringWithLocale = removeStringWithLocale;\nexports.removeThing = removeThing;\nexports.removeTime = removeTime;\nexports.removeUrl = removeUrl;\nexports.responseToResourceInfo = responseToResourceInfo;\nexports.responseToSolidDataset = responseToSolidDataset;\nexports.saveAclFor = saveAclFor;\nexports.saveFileInContainer = saveFileInContainer;\nexports.saveSolidDatasetAt = saveSolidDatasetAt;\nexports.saveSolidDatasetInContainer = saveSolidDatasetInContainer;\nexports.setAgentDefaultAccess = setAgentDefaultAccess;\nexports.setAgentResourceAccess = setAgentResourceAccess$1;\nexports.setBoolean = setBoolean;\nexports.setDate = setDate;\nexports.setDatetime = setDatetime;\nexports.setDecimal = setDecimal;\nexports.setGroupDefaultAccess = setGroupDefaultAccess;\nexports.setGroupResourceAccess = setGroupResourceAccess$1;\nexports.setInteger = setInteger;\nexports.setIri = setIri;\nexports.setLiteral = setLiteral;\nexports.setNamedNode = setNamedNode;\nexports.setProfileJwks = setProfileJwks;\nexports.setPublicDefaultAccess = setPublicDefaultAccess;\nexports.setPublicResourceAccess = setPublicResourceAccess$1;\nexports.setStringNoLocale = setStringNoLocale;\nexports.setStringWithLocale = setStringWithLocale;\nexports.setTerm = setTerm;\nexports.setThing = setThing;\nexports.setTime = setTime;\nexports.setUrl = setUrl;\nexports.solidDatasetAsMarkdown = solidDatasetAsMarkdown;\nexports.solidDatasetAsTurtle = solidDatasetAsTurtle;\nexports.thingAsMarkdown = thingAsMarkdown;\nexports.toRdfJsDataset = toRdfJsDataset;\nexports.universalAccess = index;","map":{"version":3,"names":["LinkHeader","require","RdfJsDataFactory","rdfJsDatasetModule","jsonld","n3","crossFetch","_interopNamespaceDefault","e","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","default","freeze","jsonld__namespace","crossFetch__namespace","hasResourceInfo","resource","potentialResourceInfo","internal_resourceInfo","hasServerResourceInfo","linkedResources","hasChangelog","dataset","potentialChangeLog","internal_changeLog","Array","isArray","additions","deletions","SolidClientError","Error","internal_toIriString","iri","value","fetch","init","window","crossFetchModule","internal_parseResourceInfo","response","_a","_b","_c","_d","_e","contentTypeParts","headers","split","isSolidDataset","length","includes","resourceInfo","sourceIri","url","isRawData","contentLocation","undefined","contentType","location","linkHeader","parsedLinks","parse","aclLinks","aclUrl","URL","uri","href","refs","reduce","rels","ref","rel","push","wacAllowHeader","permissions","parseWacAllowHeader","parsePermissionStatement","permissionStatement","writePermission","read","append","write","control","getStatementFor","header","scope","relevantEntries","map","rawEntry","filter","parts","trim","relevantStatement","charAt","substring","user","public","internal_cloneResource","clonedResource","slice","assign","internal_isUnsuccessfulResponse","ok","internal_isAuthenticationFailureResponse","status","acl","Authorization","AuthenticatedAgent","accessTo","agent","agentGroup","agentClass","defaultForNew","mode","origin","rdf","type","ldp","BasicContainer","Container","Resource","contains","foaf","Agent","primaryTopic","isPrimaryTopicOf","acp","AccessControlResource","Policy","AccessControl","Read","Append","Write","Rule","Matcher","accessControl","memberAccessControl","apply","applyMembers","allow","deny","allOf","anyOf","noneOf","access","accessMembers","group","client","PublicAgent","CreatorAgent","solid","PublicOidcClient","security","publicKey","pim","storage","internal_defaultFetchOptions","getResourceInfo","options","ignoreAuthenticationErrors","config","method","responseToResourceInfo","FetchError","statusText","isContainer","containerUrl","getSourceUrl","endsWith","getContentType$1","getSourceIri","getPodOwner","podOwners","getLinkedResourceUrlAll","isPodOwner","webId","podOwner","getEffectiveAccess","_f","_g","linkedResourceUrls","constructor","message","errorResponse","statusCode","defaultGetFileOptions","RESERVED_HEADERS","containsReserved","some","reserved","getFile","fileUrl","data","blob","fileWithResourceInfo","deleteFile","file","saveFileInContainer","folderUrl","folderUrlString","writeFile","locationHeader","fileIri","blobClone","getContentType","overwriteFile","fileUrlString","isHeadersArray","hasHeadersObjectForEach","flattenHeaders","headersToFlatten","flatHeaders","key","targetUrl","join","slug","Slug","targetUrlString","body","contentTypeOverride","fileType","localNodeSkolemPrefix","isLocalNodeIri","getLocalNodeName","localNodeIri","getLocalNodeIri","localNodeName","isBlankNodeId","getBlankNodeValue","blankNodeId","getBlankNodeId","blankNode","xmlSchemaTypes","boolean","dateTime","date","time","decimal","integer","string","langString","serializeBoolean","deserializeBoolean","serializeTime","millisecondString","timezoneString","millisecond","timezoneHourOffset","timezoneFormatted","Math","abs","timezoneMinuteOffset","hour","minute","second","deserializeTime","literalString","timeRegEx","test","timeString","splitTimeFromTimezone","hourString","minuteString","timeRest","utcHours","Number","parseInt","utcMinutes","secondString","optionalMillisecondString","utcSeconds","utcMilliseconds","deserializedTime","hourOffset","minuteOffset","getTimezoneOffsets","serializeDatetime","toISOString","deserializeDatetime","datetimeRegEx","signedDateString","rest","yearMultiplier","dateString","yearString","monthString","dayString","utcFullYear","utcMonth","utcDate","Date","UTC","setUTCFullYear","getUTCFullYear","serializeDate","year","getFullYear","month","getMonth","day","getDate","_","timezone","String","padStart","deserializeDate","dateRegEx","dayAndTimezoneString","splitOnPlus","splitOnMinus","multiplier","hours","minutes","serializeDecimal","toString","deserializeDecimal","deserialized","parseFloat","isNaN","serializeInteger","deserializeInteger","normalizeLocale","locale","toLowerCase","isNamedNode","isTerm","termType","isLiteral","equals","isLocalNode","internal_isValidUrl","iriString","resolveIriForLocalNode","localNode","resourceIri","DataFactory","namedNode","resolveLocalIri","name","thingIri","hash","addRdfJsQuadToDataset","quad","quadParseOptions","supportedGraphTypes","graph","graphId","graphs","addRdfJsQuadToGraph","supportedSubjectTypes","subject","subjectIri","predicates","addRdfJsQuadToSubject","addRdfJsQuadToPredicates","supportedPredicateTypes","predicate","predicateIri","objects","addRdfJsQuadToObjects","_h","object","namedNodes","datatype","language","thisLocaleStrings","langStrings","thisTypeValues","literals","blankNodePredicates","getPredicatesForBlankNode","blankNodes","node","chainBlankNodes","find","chainBlankNode","quads","otherQuads","quadsWithNodeAsSubject","isBlankNode","predicatesAcc","blankNodeObjectQuads","getChainBlankNodes","blankNodeSubjects","blankNodeObjects","everyNodeTheSame","nodes","every","otherNode","anotherNode","cycleBlankNodes","blankNodeObject","getCycleBlankNodes","concat","cycleBlankNode","subjectsWithThisNodeAsObject","toRdfJsQuads","dataFactory","graphIri","graphNode","defaultGraph","subjectNode","subjectToRdfJsQuads","predicateNode","literalTypes","typeIri","typeNode","literalValues","literalNode","literal","locales","localeValues","langStringNode","namedNodeIri","blankNodeIdOrPredicates","blankNodeObjectQuad","blankNodeSubjectQuads","currentNode","traversedBlankNodes","traversedBlankNode","nextTraversedNodes","cycleBlankNodeArrays","nextNode","allCycleBlankNodes","term","fetchDocumentLoader","res","contextUrl","documentUrl","document","json","getJsonLdParser","onQuadCallbacks","onCompleteCallbacks","onErrorCallbacks","onQuad","callback","onError","onComplete","source","plainQuads","toRDF","JSON","base","documentLoader","fixQuads","error","fixedQuads","plainQuad","substr","getTurtleParser","parser","getParser","baseIri","Parser","format","baseIRI","triplesToTurtle","writer","Writer","triples","addQuads","writePromise","Promise","resolve","reject","end","result","rawTurtle","internal_getReadableValue","val","valueOf","toUTCString","internal_throwIfNotThing","thing","isThing","ThingExpectedError","internal_addAdditionsToChangeLog","solidDataset","changeLog","newAdditions","newDeletions","addition","containsBlankNode","additionsAcc","deletionsAcc","existingDeletion","deletion","internal_addDeletionsToChangeLog","existingAddition","internal_withChangeLog","newSolidDataset","getPropertyAll","getTerm","getUrl","property","ValidPropertyUrlExpectedError","predicateUrl","firstUrl","getIri","getUrlAll","getIriAll","getBoolean","getLiteralOfType","getBooleanAll","literalStrings","getLiteralAllOfType","possibleBoolean","getDatetime","getDatetimeAll","potentialDatetime","getDateAll","potentialDate","getTime","getTimeAll","potentialTime","getDecimal","getDecimalAll","potentialDecimal","getInteger","getIntegerAll","potentialInteger","getStringEnglish","getStringWithLocale","existingLocales","matchingLocale","existingLocale","getStringEnglishAll","getStringWithLocaleAll","getStringByLocaleAll","stringsByLocale","Map","entries","values","getStringNoLocale","getStringNoLocaleAll","getNamedNode","getNamedNodeAll","iriStrings","getLiteral","nonEmptyLocale","otherLiterals","dataTypes","nonEmptyDataType","dataType","getLiteralAll","stringsInLocale","localeLiterals","dataTypeLiterals","blankNodeValue","getTermAll","blankNodeValues","rawBlankNode","blankNodeName","terms","literalType","literalsOfType","getThing","thingUrl","ValidThingUrlExpectedError","thingsByIri","resolvedThingIri","getThingAll","acceptBlankNodes","setThing","isThingLocal","updatedDefaultGraph","updatedGraphs","deletedThingPredicates","removeThing","asIri","createThing","generateName","input","asUrl","baseUrl","thingAsMarkdown","predicateIris","acc","receivedValue","receivedProperty","ValidValueUrlExpectedError","now","random","normalizeServerSideIri","iriObj","createSolidDataset","responseToSolidDataset","parseOptions","parsers","mimeType","text","parsingPromise","quadsWithBlankNodes","allQuads","maxBlankNodesToDetectChainsFor","quadsWithoutChainBlankNodeSubjects","datasetAcc","solidDatasetWithResourceInfo","getSolidDataset","parserContentTypes","acceptedContentTypes","Accept","prepareSolidDatasetUpdate","deleteStatement","getNamedNodesForLocalNodes","insertStatement","prepareSolidDatasetCreation","Link","saveSolidDatasetAt","datasetWithChangelog","requestInit","isUpdate","diagnostics","changeLogAsMarkdown","solidDatasetAsMarkdown","storedDataset","storedDatasetWithResolvedIris","resolveLocalIrisInSolidDataset","deleteSolidDataset","createContainerAt","initialContent","containerType","containerDataset","isSourceIriEqualTo","saveSolidDatasetInContainer","slugSuggestion","internalResourceInfo","resourceWithResourceInfo","resourceWithResolvedIris","createContainerInContainer","deleteContainer","container","getContainedResourceUrlAll","readableSolidDataset","things","getReadableChangeLogSummary","readableChangeLog","changeLogsByThingAndProperty","sortChangeLogByThingAndProperty","changeLogByProperty","propertyUrl","deleted","added","deletedValue","addedValue","nrOfAdditions","count","nrOfDeletions","additionString","deletionString","getNamedNodeFromLocalNode","thingIris","graphAcc","resolvedThing","resolveLocalIrisInThing","updatedGraph","updatedPredicates","updatedNamedNodes","updatedPredicate","getWellKnownSolid","urlString","wellKnownSolidUrl","resourceMetadata","rootResources","rootResource","Response","mockSolidDatasetFrom","mockContainerFrom","mockFileFrom","Blob","mockFetchError","fetchedUrl","failedResponse","addUrl","existingPredicate","existingNamedNodes","iriToAdd","updatedThing","addIri","addBoolean","addLiteralOfType","addDatetime","addDate","addTime","addDecimal","addInteger","addStringEnglish","addStringWithLocale","normalizedLocale","existingLangStrings","existingStringsInLocale","updatedStringsInLocale","updatedLangStrings","addStringNoLocale","addNamedNode","addLiteral","addTerm","existingBlankNodes","updatedBlankNodes","existingLiterals","existingValuesOfType","updatedValuesOfType","updatedLiterals","removeAll","newPredicates","removeUrl","iriToRemove","removeIri","removeBoolean","removeLiteralMatching","foundBoolean","removeDatetime","foundDatetime","removeDate","foundDate","deserializedDate","removeTime","foundTime","removeDecimal","foundDecimal","removeInteger","foundInteger","removeStringEnglish","removeStringWithLocale","existingString","removeStringNoLocale","foundString","removeNamedNode","removeLiteral","existingPredicateValues","updatedValues","existingValue","matcher","setUrl","setIri","setBoolean","setDatetime","setDate","setTime","setDecimal","setInteger","setStringWithLocale","setStringNoLocale","setNamedNode","setLiteral","setTerm","buildThing","getAdder","adder","builder","getSetter","setter","getRemover","remover","build","setStringEnglish","mockThingFrom","isAcr","linkedAccessResource","relTypeLinks","internal_fetchAcl","hasAccessibleAcl","resourceAcl","fallbackAcl","internal_fetchResourceAcl","internal_fetchFallbackAcl","AclIsAcrError","aclSolidDataset","internal_accessTo","resourceUrl","resourcePath","pathname","containerPath","internal_getContainerPath","containerIri","containerInfo","containerAcl","resourcePathWithoutTrailingSlash","lastIndexOf","internal_getAclRules","aclDataset","isAclRule","internal_getResourceAclRulesForResource","aclRules","rule","appliesToResource","aclRule","internal_getDefaultAclRulesForResource","isDefaultForResource","internal_getAccess","ruleAccessModes","writeAccess","internal_accessModeIriStrings","internal_combineAccessModes","modes","accumulator","current","internal_removeEmptyAclRules","aclRulesToRemove","isEmptyAclRule","updatedAclDataset","isAclQuad","internal_getAclRulesForIri","targetIri","targetType","internal_getAccessByIri","targetIriAccess","ruleTargetIri","internal_initialiseAclRule","newRule","internal_duplicateAclRule","sourceRule","targetRule","copyIris","inputRule","outputRule","iriTarget","internal_setAcl","internal_acl","supportedActorPredicates","internal_removeActorFromRule","actor","actorPredicate","ruleType","emptyRule","ruleWithoutActor","ruleForOtherTargets","internal_setActorAccess$2","accessType","filteredAcl","filteredRule","remainingRule","updatedAcl","internal_setResourceAcl","newAcl","internal_getResourceAcl","sourceResource","aclResource","hasAcl","potentialAcl","hasResourceAcl","getSolidDatasetWithAcl","getFileWithAcl","getResourceInfoWithAcl","getResourceAcl","hasFallbackAcl","getFallbackAcl","createAcl","targetResource","emptyResourceAcl","createAclFromFallbackAcl","fallbackAclRules","defaultAclRules","newAclRules","initialisedResourceAcl","saveAclFor","savedDataset","savedAclDataset","deleteAclFor","storedResource","getAgentAccess$5","getAgentResourceAccess","getAgentDefaultAccess","getAgentAccessAll$5","getAgentResourceAccessAll","getAgentDefaultAccessAll","allRules","resourceRules","agentResourceRules","getAgentAclRulesForAgent","agentAccessModes","getAgentAclRules","getAccessByAgent","setAgentResourceAccess$1","setAgentDefaultAccess","isAgentAclRule","getGroupAccess$2","getGroupResourceAccess","getGroupDefaultAccess","getGroupAccessAll$2","getGroupResourceAccessAll","getGroupDefaultAccessAll","groupResourceRules","getGroupAclRuleForGroup","groupAccessModes","getAccessByGroup","defaultRules","groupDefaultRules","rules","setGroupResourceAccess$1","setGroupDefaultAccess","getPublicAccess$5","getPublicResourceAccess","getPublicDefaultAccess","publicResourceRules","getClassAclRulesForClass","publicAccessModes","setPublicResourceAccess$1","setPublicDefaultAccess","appliesToClass","setMockAclUrl","resourceWithAclUrl","addMockResourceAclTo","resourceWithResourceAcl","addMockFallbackAclTo","mockContainer","resourceWithFallbackAcl","rdfJsDataset","fromRdfJsDataset","from","toRdfJsDataset","set","datasetFactory","getProfileFromProfileDoc","profileDataset","profile","setProfileJwks","profileDocument","jwksIri","getProfileJwksIri","isJwks","jwksDocument","addJwkToJwks","jwk","jwksResponse","stringify","addPublicKeyToProfileJwks","updatedJwks","getAltProfileUrlAllFrom","webIdProfile","webIdThing","altProfileUrlAll","profileIri","Set","getProfileAll","authFetch","altProfileAll","allSettled","uniqueProfileIri","successfulResult","getPodUrlAll","profiles","getPodUrlAllFrom","profileResource","podIri","add","getWebIdDataset","prefixes","cc","cert","csvw","dc","dcam","dcat","dctype","owl","posixstat","rdfs","schema","shacl","skos","skosxl","swapdoc","ui","vann","vcard","ws","xsd","solidDatasetAsTurtle","prefixes$1","NamedNode","match","addQuad","internal_getAcr","hasAccessibleAcr","internal_acp","acr","internal_setAcr","internal_createControl","internal_getControl","withAccessControlResource","foundThing","internal_getControlAll","foundThings","explicitAccessControl","implicitAccessControl","thingWithAccessControl","controlIri","internal_setControl","updatedAcr","updatedResource","internal_addPolicyUrl","policyUrl","internal_getPolicyUrlAll","internal_removePolicyUrl","internal_removePolicyUrlAll","internal_addMemberPolicyUrl","internal_getMemberPolicyUrlAll","internal_removeMemberPolicyUrl","internal_removeMemberPolicyUrlAll","internal_getInitialisedControl","resourceWithAcr","allControls","hasLinkedAcr","addAcrPolicyUrl$1","acrUrl","acrThing","addMemberAcrPolicyUrl$1","getAcrPolicyUrlAll$1","getMemberAcrPolicyUrlAll$1","removeAcrPolicyUrl$1","updatedAcrThing","removeMemberAcrPolicyUrl$1","removeAcrPolicyUrlAll","removeMemberAcrPolicyUrlAll","addPolicyUrl$1","updatedControl","addMemberPolicyUrl$1","getPolicyUrlAll$1","controls","policyUrlsByControl","uniquePolicyUrls","policyUrls","getMemberPolicyUrlAll$1","memberPolicyUrlsByControl","removePolicyUrl$1","updatedControls","removeMemberPolicyUrl$1","removePolicyUrlAll","removeMemberPolicyUrlAll","acrAsMarkdown","markdown","memberPolicyUrls","acrPolicyUrls","memberAcrPolicyUrls","ACP_NAMESPACE","ACP","vc","ACL_NAMESPACE","ACL","Control","VC_ACCESS_GRANT","getAccessControlResourceThing","DEFAULT_ACCESS_CONTROL","DEFAULT_ACR_ACCESS_CONTROL","DEFAULT_MEMBER_ACCESS_CONTROL","DEFAULT_MEMBER_ACR_ACCESS_CONTROL","getDefaultAccessControlUrl","getDefaultAccessControlThing","defaultAccessControlUrl","accessControlThing","getModes","policy","controlRead","controlWrite","setAcr","setModes","newPolicy","DEFAULT_VC_POLICY_NAME","DEFAULT_VC_MATCHER_NAME","setVcAccess","defaultVcPolicyIri","defaultVcMatcherIri","vcPolicy","vcMatcher","currentModes","DEFAULT_NO_ACCESS","linkExists","getVcAccess","getSolidDatasetWithAcr","fetchAcr","getFileWithAcr","getResourceInfoWithAcr","getSolidDatasetWithAccessDatasets","getFileWithAccessDatasets","getResourceInfoWithAccessDatasets","saveAcrFor","savedAcr","aclResourceInfo","acrDataset","acpInfo","getReferencedPolicyUrlAll","withAcr","uniqueUrls","isAcpControlled","getLinkedAcrUrl","acrLinks","x","isRule","addAllOfRuleUrl","removeAllOfRuleUrl","setAllOfRuleUrl","getAllOfRuleUrlAll","addAnyOfRuleUrl","removeAnyOfRuleUrl","setAnyOfRuleUrl","getAnyOfRuleUrlAll","addNoneOfRuleUrl","removeNoneOfRuleUrl","setNoneOfRuleUrl","getNoneOfRuleUrlAll","createRule","stringUrl","ruleThing","createResourceRuleFor","getRule","ruleResource","getResourceRule","getRuleAll","getResourceRuleAll","removeRule","removeResourceRule","ruleToRemove","ruleUrl","matchingRule","setRule","setResourceRule","getAgentAll$1","setAgent$1","isPublic","hasPublic$1","isAuthenticated","hasAuthenticated$1","isCreator","hasCreator$1","setPublic$1","setAuthenticated$1","setCreator$1","addAgent$1","removeAgent$1","getGroupAll","setGroup","addGroup","removeGroup","arguments","removePublic$1","removeAuthenticated$1","removeCreator$1","getClientAll$1","setClient$1","anyClientEnabled","hasAnyClient$1","setAnyClient$1","addClient$1","removeClient$1","removeAnyClient$1","ruleAsMarkdown","targetEnumeration","targetAgents","targetGroups","targetClients","isPolicy","createPolicy","policyThing","getPolicy","policyResource","getPolicyAll","foundPolicies","removePolicy","setPolicy","setAllowModesV2","setAllowModesV1","getAllowModesV2","allowedModes","getAllowModesV1","setDenyModesV2","setDenyModesV1","getDenyModesV2","deniedModes","getDenyModesV1","createResourcePolicyFor","getResourcePolicy","getResourceAcrPolicy","getResourcePolicyAll","getResourceAcrPolicyAll","removeResourcePolicy","policyToRemove","policyUrlString","removeResourceAcrPolicy","setResourcePolicy$1","setResourceAcrPolicy","policyAsMarkdown","getStatus","allowModes","denyModes","allOfRules","anyOfRules","noneOfRules","mockAcrFor","addMockAcrTo","accessControlResource","aprs","v2AcpFunctions","v2ControlFunctions","addAcrPolicyUrl","addMemberAcrPolicyUrl","addMemberPolicyUrl","addPolicyUrl","getAcrPolicyUrlAll","getMemberAcrPolicyUrlAll","getMemberPolicyUrlAll","getPolicyUrlAll","removeAcrPolicyUrl","removeMemberAcrPolicyUrl","removeMemberPolicyUrl","removePolicyUrl","v2PolicyFunctions","getAllowModes","getDenyModes","setAllowModes","setDenyModes","v2RuleFunctions","addAgent","addForbiddenRuleUrl","addOptionalRuleUrl","addRequiredRuleUrl","getAgentAll","getForbiddenRuleUrlAll","getOptionalRuleUrlAll","getRequiredRuleUrlAll","hasAuthenticated","hasCreator","hasPublic","removeAgent","removeForbiddenRuleUrl","removeOptionalRuleUrl","removeRequiredRuleUrl","setAgent","setForbiddenRuleUrl","setOptionalRuleUrl","setRequiredRuleUrl","v2MockFunctions","previousSetPublicSignature","enable","previousSetAuthenticatedSignature","previousSetCreatorSignature","deprecatedFunctions$1","getForbiddenRuleurlAll","setPublic","setAuthenticated","setCreator","acp_v2","v1AcpFunctions","v1PolicyFunctions","v1RuleFunctions","v1MockFunctions","v1ControlFunctions","deprecatedFunctions","createControl","getControl","getAllControl","getControlAll","setControl","removeControl","acp_v1","v3AcpFunctions","v3ControlFunctions","v3PolicyFunctions","setResourcePolicy","v3RuleFunctions","addClient","getClientAll","hasAnyClient","removeClient","setAnyClient","setClient","removeAnyClient","removeAuthenticated","removeCreator","removePublic","v3MockFunctions","acp_v3","setAccessControlResourceThing","getAccessControlTypeFromDefaultAccessControlName","setDefaultAccessControlThingIfNotExist","defaultAccessControlThingUrl","accessControlResourceThing","accessControlUrlAll","resourceWithAcrContainingDefaultAccessControl","defaultAccessControlThing","resourceWithAcrContainingDefaultMemberAccessControl","defaultMemberAccessControlThing","getAccessControlUrlAll","getPolicyUrls","accessControlUrls","accessControlUrl","previousValue","currentValue","getMemberAccessControlUrlAll","isMatcher","addAllOfMatcherUrl","removeAllOfMatcherUrl","setAllOfMatcherUrl","getAllOfMatcherUrlAll","addAnyOfMatcherUrl","removeAnyOfMatcherUrl","setAnyOfMatcherUrl","getAnyOfMatcherUrlAll","addNoneOfMatcherUrl","removeNoneOfMatcherUrl","setNoneOfMatcherUrl","getNoneOfMatcherUrlAll","createMatcher","matcherThing","createResourceMatcherFor","getMatcher","matcherResource","getResourceMatcher","getMatcherAll","getResourceMatcherAll","removeMatcher","removeResourceMatcher","matcherToRemove","matcherUrl","matchingMatcher","setMatcher","setResourceMatcher","v4AcpFunctions","v4ControlFunctions","v4PolicyFunctions","v4MatcherFunctions","v4MockFunctions","acp_v4","knownActorRelations$1","internal_getActorAccess$1","acpData","actorRelation","inaccessibleUrls","applicableAcrPolicies","acrPolicies","policyAppliesTo$1","applicablePolicies","policies","initialAccess","allowedAcrAccess","allAllowedAccess","withAllowedAccess","withAcrDeniedAccess","allDeniedAccess","withDeniedAccess","internal_getAgentAccess$1","internal_getGroupAccess","groupUrl","internal_getPublicAccess$1","ruleAppliesTo","policyConflictsWith$1","otherAccess","isEmpty","knownActorRelation","internal_findActorAll$1","actors","internal_getActorAccessAll$1","internal_getGroupAccessAll","internal_getAgentAccessAll$1","internal_setActorAccess$1","existingAccess","conflictingAcrPolicies","conflictingPolicies","otherActorAcrPolicies","acrPolicy","policyHasOtherActors$1","otherActorPolicies","acpDataWithPoliciesExcluded","remainingAccess","policyCopy","ruleCopies","copyPolicyExcludingActor$1","newRuleName","encodeURIComponent","newControlReadAccess","newControlWriteAccess","acrPoliciesToUnapply","newAcrPolicyName","newAcrPolicy","newReadAccess","newAppendAccess","newWriteAccess","policiesToUnapply","newPolicyName","previouslyApplicableAcrPolicy","previouslyApplicablePolicy","internal_setAgentAccess$1","internal_setGroupAccess","internal_setPublicAccess$1","allOfRulesHaveOtherActors","ruleHasOtherActors","anyOfRulesHaveOtherActors","noneOfRulesHaveOtherActors","otherActors","otherActorsWithThisRelation","applicableActor","inputPolicy","actorRelationToExclude","actorToExclude","newIriSuffix","newAllOfRules","copyRulesExcludingActor","newAnyOfRules","newNoneOfRules","encodeURI","allowMode","denyMode","ruleIris","iriSuffix","ruleIri","listsOtherActors","targetActor","isNotNull$1","internal_getPoliciesAndRules","allPolicyResourceUrls","getResourceUrls$1","policyResources","getResources$1","getThingsFromResources$1","ruleUrlSet","referencedRuleUrls","getReferencedRuleUrls","ruleUrls","ruleResourceUrls","getResourceUrl$1","unfetchedRuleResourceUrls","ruleResourceUrl","ruleResources","allResources","thingUrlObject","thingUrls","resourceUrls","uniqueResourceUrls","resources","all","universalAccessToAcl","newAccess","previousAccess","aclAccessToUniversal","getActorAccess","accessEvaluationCallback","wacAccess","getActorClassAccess","getActorAccessAll","wacAgentAccess","getAgentAccess$4","getGroupAccess$1","getPublicAccess$4","getAgentAccessAll$4","getGroupAccessAll$1","prepareResourceAcl","resourceWithAcl","saveUpdatedAcl","savedAcl","setActorClassAccess","getAccess","setAccess","resourceWithOldAcl","currentAccess","updatedResourceAcl","setActorAccess","setAgentResourceAccess","setGroupResourceAccess","setPublicResourceAccess","universal","__proto__","getAccessFor","getAccessForAll","setAccessFor","getAgentAccess","getAgentAccess$3","setAgentAccess","setAgentAccess$3","getAgentAccessAll","getAgentAccessAll$3","getGroupAccess","getGroupAccessAll","setGroupAccess","getPublicAccess","getPublicAccess$3","setPublicAccess","setPublicAccess$3","actorType","universal_v1","knownActorRelations","internal_getActorAccess","policyAppliesTo","internal_getAgentAccess","internal_getPublicAccess","allOfMatchers","matchers","anyOfMatchers","noneOfMatchers","matcherAppliesTo","policyConflictsWith","internal_findActorAll","internal_getActorAccessAll","internal_getAgentAccessAll","internal_setActorAccess","policyHasOtherActors","matcherCopies","copyPolicyExcludingActor","newMatcherName","newMatcher","internal_setAgentAccess","internal_setPublicAccess","allOfMatchersHaveOtherActors","matcherHasOtherActors","anyOfMatchersHaveOtherActors","noneOfMatchersHaveOtherActors","newAllOfMatchers","copyMatchersExcludingActor","newAnyOfMatchers","newNoneOfMatchers","matcherIris","matcherIri","isNotNull","internal_getPoliciesAndMatchers","getResourceUrls","getResources","getThingsFromResources","matcherUrlSet","referencedMatcherUrls","getReferencedMatcherUrls","matcherUrls","matcherResourceUrls","getResourceUrl","unfetchedMatcherResourceUrls","matcherResourceUrl","matcherResources","getAgentAccess$2","setAgentAccess$2","getAgentAccessAll$2","getPublicAccess$2","setPublicAccess$2","universal_v2","getAclServerResourceInfo","isAgentMatched","allOfMatched","anyOfMatched","noneOfMatched","reduceModes","allowed","denied","getAgentAccess$1","resourceAccess","policyAll","acrPolicyAll","getAcrUrl$1","linkedAccessControlResource","getAcrUrl","legacyAcrUrl","aclServerResourceInfo","getResourceAcr","getAgentUrlAll","flatArray","agentArray","getAgentAccessAll$1","agentAccessAll","currentAgentAccess","getPublicAccess$1","getDefaultAgentMatcherPolicyUrl","toUpperCase","setDefaultAgentMatcherPolicyThingIfNotExist","getDefaultAgentMatcherPolicyMatcherUrl","DEFAULT_POLICY_MATCHER_PREDICATE","setDefaultAgentMatcherPolicyMatcherThingIfNotExist","defaultAgentMatcherPolicyThing","agentMatcherPolicyUrlAll","setAgentAccessMode","operation","resourceWithDefaultAgentMatcher","defaultAgentMatcherThing","setAgentAccess$1","setPublicAccess$1","index","ess1","ess2","exports","access_v1","access_v2","acp_ess_1","acp_ess_2","universalAccess"],"sources":["E:/react-todo-app/node_modules/@inrupt/solid-client/dist/index.js"],"sourcesContent":["'use strict';\n\nvar LinkHeader = require('http-link-header');\nvar RdfJsDataFactory = require('@rdfjs/data-model');\nvar rdfJsDatasetModule = require('@rdfjs/dataset');\nvar jsonld = require('jsonld');\nvar n3 = require('n3');\nvar crossFetch = require('cross-fetch');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar jsonld__namespace = /*#__PURE__*/_interopNamespaceDefault(jsonld);\nvar crossFetch__namespace = /*#__PURE__*/_interopNamespaceDefault(crossFetch);\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was sent to.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was sent to, false if not.\r\n * @since 0.2.0\r\n */\r\nfunction hasResourceInfo(resource) {\r\n    const potentialResourceInfo = resource;\r\n    return (typeof potentialResourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo === \"object\");\r\n}\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was retrieved from.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.\r\n * @since 0.6.0\r\n */\r\nfunction hasServerResourceInfo(resource) {\r\n    const potentialResourceInfo = resource;\r\n    return (typeof potentialResourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo.linkedResources ===\r\n            \"object\");\r\n}\r\n/** @internal */\r\nfunction hasChangelog(dataset) {\r\n    const potentialChangeLog = dataset;\r\n    return (typeof potentialChangeLog.internal_changeLog === \"object\" &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.additions) &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.deletions));\r\n}\r\n/**\r\n * Errors thrown by solid-client extend this class, and can thereby be distinguished from errors\r\n * thrown in lower-level libraries.\r\n * @since 1.2.0\r\n */\r\nclass SolidClientError extends Error {\r\n}\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n/** @internal */\r\nfunction internal_toIriString(iri) {\r\n    return typeof iri === \"string\" ? iri : iri.value;\r\n}\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n/* eslint-disable prefer-const, global-require, no-shadow, @typescript-eslint/no-var-requires */\r\n/**\r\n * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.\r\n */\r\nconst fetch = async (resource, init) => {\r\n    /* istanbul ignore if: `require` is always defined in the unit test environment */\r\n    if (typeof window === \"object\" && typeof require !== \"function\") {\r\n        return window.fetch(resource, init);\r\n    }\r\n    /* istanbul ignore if: `require` is always defined in the unit test environment */\r\n    if (typeof require !== \"function\") {\r\n        // When using Node.js with ES Modules, require is not defined:\r\n        const crossFetchModule = await import('cross-fetch');\r\n        const fetch = crossFetchModule.default;\r\n        return fetch(resource, init);\r\n    }\r\n    // Implementation note: it's up to the client application to resolve these module names to the\r\n    // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if\r\n    // the module names are literal strings.\r\n    // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js\r\n    // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a\r\n    // warning. Since the use of package names instead of file names requires a bundles anyway, this\r\n    // should not have any practical consequences. For more background, see:\r\n    // https://github.com/webpack/webpack/issues/7713\r\n    // Unfortunately solid-client-authn-browser does not support a default session yet.\r\n    // Once it does, we can auto-detect if it is available and use it as follows:\r\n    // try {\r\n    //   fetch = require(\"solid-client-authn-browser\").fetch;\r\n    // } catch (e) {\r\n    // When enabling the above, make sure to add a similar try {...} catch block using `import`\r\n    // statements in the elseif above.\r\n    const fetch = require(\"cross-fetch\");\r\n    // }\r\n    return fetch(resource, init);\r\n};\n\n//\r\n/**\r\n * @internal\r\n */\r\nfunction internal_parseResourceInfo(response) {\r\n    var _a, _b, _c, _d, _e;\r\n    const contentTypeParts = (_b = (_a = response.headers.get(\"Content-Type\")) === null || _a === void 0 ? void 0 : _a.split(\";\")) !== null && _b !== void 0 ? _b : [];\r\n    // If the server offers a Turtle or JSON-LD serialisation on its own accord,\r\n    // that tells us whether it is RDF data that the server can understand\r\n    // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),\r\n    // in which case our SolidDataset-related functions should handle it.\r\n    // For more context, see https://github.com/inrupt/solid-client-js/pull/214.\r\n    const isSolidDataset = contentTypeParts.length > 0 &&\r\n        [\"text/turtle\", \"application/ld+json\"].includes(contentTypeParts[0]);\r\n    const resourceInfo = {\r\n        sourceIri: response.url,\r\n        isRawData: !isSolidDataset,\r\n        contentLocation: (_c = response.headers.get(\"Content-Location\")) !== null && _c !== void 0 ? _c : undefined,\r\n        contentType: (_d = response.headers.get(\"Content-Type\")) !== null && _d !== void 0 ? _d : undefined,\r\n        linkedResources: {},\r\n        location: (_e = response.headers.get(\"Location\")) !== null && _e !== void 0 ? _e : undefined,\r\n    };\r\n    const linkHeader = response.headers.get(\"Link\");\r\n    if (linkHeader) {\r\n        const parsedLinks = LinkHeader.parse(linkHeader);\r\n        // Set ACL link\r\n        const aclLinks = parsedLinks.get(\"rel\", \"acl\");\r\n        if (aclLinks.length === 1) {\r\n            resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;\r\n        }\r\n        // Parse all link headers and expose them in a standard way\r\n        // (this can replace the parsing of the ACL link above):\r\n        resourceInfo.linkedResources = parsedLinks.refs.reduce((rels, ref) => {\r\n            var _a;\r\n            var _b;\r\n            (_a = rels[_b = ref.rel]) !== null && _a !== void 0 ? _a : (rels[_b] = []);\r\n            rels[ref.rel].push(new URL(ref.uri, resourceInfo.sourceIri).href);\r\n            return rels;\r\n        }, resourceInfo.linkedResources);\r\n    }\r\n    const wacAllowHeader = response.headers.get(\"WAC-Allow\");\r\n    if (wacAllowHeader) {\r\n        resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);\r\n    }\r\n    return resourceInfo;\r\n}\r\n/**\r\n * Parse a WAC-Allow header into user and public access booleans.\r\n *\r\n * @param wacAllowHeader A WAC-Allow header in the format `user=\"read append write control\",public=\"read\"`\r\n * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers\r\n */\r\nfunction parseWacAllowHeader(wacAllowHeader) {\r\n    function parsePermissionStatement(permissionStatement) {\r\n        const permissions = permissionStatement.split(\" \");\r\n        const writePermission = permissions.includes(\"write\");\r\n        return writePermission\r\n            ? {\r\n                read: permissions.includes(\"read\"),\r\n                append: true,\r\n                write: true,\r\n                control: permissions.includes(\"control\"),\r\n            }\r\n            : {\r\n                read: permissions.includes(\"read\"),\r\n                append: permissions.includes(\"append\"),\r\n                write: false,\r\n                control: permissions.includes(\"control\"),\r\n            };\r\n    }\r\n    function getStatementFor(header, scope) {\r\n        const relevantEntries = header\r\n            .split(\",\")\r\n            .map((rawEntry) => rawEntry.split(\"=\"))\r\n            .filter((parts) => parts.length === 2 && parts[0].trim() === scope);\r\n        // There should only be one statement with the given scope:\r\n        if (relevantEntries.length !== 1) {\r\n            return \"\";\r\n        }\r\n        const relevantStatement = relevantEntries[0][1].trim();\r\n        // The given statement should be wrapped in double quotes to be valid:\r\n        if (relevantStatement.charAt(0) !== '\"' ||\r\n            relevantStatement.charAt(relevantStatement.length - 1) !== '\"') {\r\n            return \"\";\r\n        }\r\n        // Return the statment without the wrapping quotes, e.g.: read append write control\r\n        return relevantStatement.substring(1, relevantStatement.length - 1);\r\n    }\r\n    return {\r\n        user: parsePermissionStatement(getStatementFor(wacAllowHeader, \"user\")),\r\n        public: parsePermissionStatement(getStatementFor(wacAllowHeader, \"public\")),\r\n    };\r\n}\r\n/** @hidden Used to instantiate a separate instance from input parameters */\r\nfunction internal_cloneResource(resource) {\r\n    let clonedResource;\r\n    if (typeof resource.slice === \"function\") {\r\n        // If given Resource is a File:\r\n        clonedResource = Object.assign(resource.slice(), Object.assign({}, resource));\r\n    }\r\n    else {\r\n        // If it is just a plain object containing metadata:\r\n        clonedResource = Object.assign({}, resource);\r\n    }\r\n    return clonedResource;\r\n}\r\n/** @internal */\r\nfunction internal_isUnsuccessfulResponse(response) {\r\n    return !response.ok;\r\n}\r\nfunction internal_isAuthenticationFailureResponse(response) {\r\n    return response.status === 401 || response.status === 403;\r\n}\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n// TODO: These should be replaced by auto-generated constants,\r\n//       if we can ensure that unused constants will be excluded from bundles.\r\n/** @hidden */\r\nconst acl = {\r\n    Authorization: \"http://www.w3.org/ns/auth/acl#Authorization\",\r\n    AuthenticatedAgent: \"http://www.w3.org/ns/auth/acl#AuthenticatedAgent\",\r\n    accessTo: \"http://www.w3.org/ns/auth/acl#accessTo\",\r\n    agent: \"http://www.w3.org/ns/auth/acl#agent\",\r\n    agentGroup: \"http://www.w3.org/ns/auth/acl#agentGroup\",\r\n    agentClass: \"http://www.w3.org/ns/auth/acl#agentClass\",\r\n    default: \"http://www.w3.org/ns/auth/acl#default\",\r\n    defaultForNew: \"http://www.w3.org/ns/auth/acl#defaultForNew\",\r\n    mode: \"http://www.w3.org/ns/auth/acl#mode\",\r\n    origin: \"http://www.w3.org/ns/auth/acl#origin\",\r\n};\r\n/** @hidden */\r\nconst rdf = {\r\n    type: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\r\n};\r\n/** @hidden */\r\nconst ldp = {\r\n    BasicContainer: \"http://www.w3.org/ns/ldp#BasicContainer\",\r\n    Container: \"http://www.w3.org/ns/ldp#Container\",\r\n    Resource: \"http://www.w3.org/ns/ldp#Resource\",\r\n    contains: \"http://www.w3.org/ns/ldp#contains\",\r\n};\r\n/** @hidden */\r\nconst foaf = {\r\n    Agent: \"http://xmlns.com/foaf/0.1/Agent\",\r\n    primaryTopic: \"http://xmlns.com/foaf/0.1/primaryTopic\",\r\n    isPrimaryTopicOf: \"http://xmlns.com/foaf/0.1/isPrimaryTopicOf\",\r\n};\r\n/** @hidden */\r\nconst acp = {\r\n    AccessControlResource: \"http://www.w3.org/ns/solid/acp#AccessControlResource\",\r\n    Policy: \"http://www.w3.org/ns/solid/acp#Policy\",\r\n    AccessControl: \"http://www.w3.org/ns/solid/acp#AccessControl\",\r\n    Read: \"http://www.w3.org/ns/solid/acp#Read\",\r\n    Append: \"http://www.w3.org/ns/solid/acp#Append\",\r\n    Write: \"http://www.w3.org/ns/solid/acp#Write\",\r\n    /** @deprecated Removed from the ACP proposal, to be replaced by Matchers. */\r\n    Rule: \"http://www.w3.org/ns/solid/acp#Rule\",\r\n    Matcher: \"http://www.w3.org/ns/solid/acp#Matcher\",\r\n    accessControl: \"http://www.w3.org/ns/solid/acp#accessControl\",\r\n    memberAccessControl: \"http://www.w3.org/ns/solid/acp#memberAccessControl\",\r\n    apply: \"http://www.w3.org/ns/solid/acp#apply\",\r\n    /** @deprecated Removed from the ACP proposal, to be replaced by memberAccessControls. */\r\n    applyMembers: \"http://www.w3.org/ns/solid/acp#applyMembers\",\r\n    allow: \"http://www.w3.org/ns/solid/acp#allow\",\r\n    deny: \"http://www.w3.org/ns/solid/acp#deny\",\r\n    allOf: \"http://www.w3.org/ns/solid/acp#allOf\",\r\n    anyOf: \"http://www.w3.org/ns/solid/acp#anyOf\",\r\n    noneOf: \"http://www.w3.org/ns/solid/acp#noneOf\",\r\n    access: \"http://www.w3.org/ns/solid/acp#access\",\r\n    /** @deprecated Removed from the ACP proposal, to be replaced by memberAccessControls. */\r\n    accessMembers: \"http://www.w3.org/ns/solid/acp#accessMembers\",\r\n    agent: \"http://www.w3.org/ns/solid/acp#agent\",\r\n    group: \"http://www.w3.org/ns/solid/acp#group\",\r\n    client: \"http://www.w3.org/ns/solid/acp#client\",\r\n    PublicAgent: \"http://www.w3.org/ns/solid/acp#PublicAgent\",\r\n    AuthenticatedAgent: \"http://www.w3.org/ns/solid/acp#AuthenticatedAgent\",\r\n    CreatorAgent: \"http://www.w3.org/ns/solid/acp#CreatorAgent\",\r\n};\r\n/** @hidden */\r\nconst solid = {\r\n    PublicOidcClient: \"http://www.w3.org/ns/solid/terms#PublicOidcClient\",\r\n};\r\n/** @hidden */\r\nconst security = {\r\n    publicKey: \"https://w3id.org/security#publicKey\",\r\n};\r\n/** @hidden */\r\nconst pim = {\r\n    storage: \"http://www.w3.org/ns/pim/space#storage\",\r\n};\n\n//\r\n/** @ignore For internal use only. */\r\nconst internal_defaultFetchOptions = {\r\n    fetch,\r\n};\r\n/**\r\n * Retrieve the information about a resource (e.g. access permissions) without\r\n * fetching the resource itself.\r\n *\r\n * @param url URL to fetch Resource metadata from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.\r\n * @since 0.4.0\r\n */\r\nasync function getResourceInfo(url, options = Object.assign(Object.assign({}, internal_defaultFetchOptions), { ignoreAuthenticationErrors: false })) {\r\n    var _a;\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, { method: \"HEAD\" });\r\n    return responseToResourceInfo(response, {\r\n        ignoreAuthenticationErrors: (_a = options.ignoreAuthenticationErrors) !== null && _a !== void 0 ? _a : false,\r\n    });\r\n}\r\n/**\r\n * Parse Solid metadata from a Response obtained by fetching a Resource from a Solid Pod,\r\n *\r\n * @param response A Fetch API Response. See {@link https://developer.mozilla.org/en-US/docs/Web/API/Response MDN}.\r\n * @returns Resource metadata readable by functions such as [[getSourceUrl]].\r\n * @hidden This interface is not exposed yet until we've tried it out in practice.\r\n */\r\nfunction responseToResourceInfo(response, options = { ignoreAuthenticationErrors: false }) {\r\n    if (internal_isUnsuccessfulResponse(response) &&\r\n        (!internal_isAuthenticationFailureResponse(response) ||\r\n            !options.ignoreAuthenticationErrors)) {\r\n        throw new FetchError(`Fetching the metadata of the Resource at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    return { internal_resourceInfo: resourceInfo };\r\n}\r\n/**\r\n * @param resource Resource for which to check whether it is a Container.\r\n * @returns Whether `resource` is a Container.\r\n */\r\nfunction isContainer(resource) {\r\n    const containerUrl = hasResourceInfo(resource)\r\n        ? getSourceUrl(resource)\r\n        : internal_toIriString(resource);\r\n    return containerUrl.endsWith(\"/\");\r\n}\r\n/**\r\n * This function will tell you whether a given Resource contains raw data, or a SolidDataset.\r\n *\r\n * @param resource Resource for which to check whether it contains raw data.\r\n * @return Whether `resource` contains raw data.\r\n */\r\nfunction isRawData(resource) {\r\n    return resource.internal_resourceInfo.isRawData;\r\n}\r\n/**\r\n * @param resource Resource for which to determine the Content Type.\r\n * @returns The Content Type, if known, or null if not known.\r\n */\r\nfunction getContentType$1(resource) {\r\n    var _a;\r\n    return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;\r\n}\r\nfunction getSourceUrl(resource) {\r\n    if (hasResourceInfo(resource)) {\r\n        return resource.internal_resourceInfo.sourceIri;\r\n    }\r\n    return null;\r\n}\r\n/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */\r\nconst getSourceIri = getSourceUrl;\r\n/**\r\n * Given a Resource that exposes information about the owner of the Pod it is in, returns the WebID of that owner.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns The WebID of the owner of the Pod the Resource is in, if provided, or `null` if not.\r\n * @since 0.6.0\r\n */\r\nfunction getPodOwner(resource) {\r\n    var _a;\r\n    if (!hasServerResourceInfo(resource)) {\r\n        return null;\r\n    }\r\n    const podOwners = (_a = getLinkedResourceUrlAll(resource)[\"http://www.w3.org/ns/solid/terms#podOwner\"]) !== null && _a !== void 0 ? _a : [];\r\n    return podOwners.length === 1 ? podOwners[0] : null;\r\n}\r\n/**\r\n * Given a WebID and a Resource that exposes information about the owner of the Pod it is in, returns whether the given WebID is the owner of the Pod.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param webId The WebID of which to check whether it is the Pod Owner's.\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns Whether the given WebID is the Pod Owner's, if the Pod Owner is exposed, or `null` if it is not exposed.\r\n * @since 0.6.0\r\n */\r\nfunction isPodOwner(webId, resource) {\r\n    const podOwner = getPodOwner(resource);\r\n    if (typeof podOwner !== \"string\") {\r\n        return null;\r\n    }\r\n    return podOwner === webId;\r\n}\r\n/**\r\n * Get the URLs of Resources linked to the given Resource.\r\n *\r\n * Solid servers can link Resources to each other. For example, in servers\r\n * implementing Web Access Control, Resources can have an Access Control List\r\n * Resource linked to it via the `acl` relation.\r\n *\r\n * @param resource A Resource fetched from a Solid Pod.\r\n * @returns The URLs of Resources linked to the given Resource, indexed by the key that links them.\r\n * @since 1.7.0\r\n */\r\nfunction getLinkedResourceUrlAll(resource) {\r\n    return resource.internal_resourceInfo.linkedResources;\r\n}\r\n/**\r\n * Get what access the current user has to the given Resource.\r\n *\r\n * This function can tell you what access the current user has for the given\r\n * Resource, allowing you to e.g. determine that changes to it will be rejected\r\n * before attempting to do so.\r\n * Additionally, for servers adhering to the Web Access Control specification,\r\n * it will tell you what access unauthenticated users have to the given Resource.\r\n *\r\n * @param resource A Resource fetched from a Solid Pod.\r\n * @returns What access the current user and, if supported by the server, unauthenticated users have to the given Resource.\r\n * @since 1.7.0\r\n */\r\nfunction getEffectiveAccess(resource) {\r\n    var _a, _b, _c, _d, _e, _f, _g;\r\n    if (typeof resource.internal_resourceInfo.permissions === \"object\") {\r\n        return {\r\n            user: {\r\n                read: resource.internal_resourceInfo.permissions.user.read,\r\n                append: resource.internal_resourceInfo.permissions.user.append,\r\n                write: resource.internal_resourceInfo.permissions.user.write,\r\n            },\r\n            public: {\r\n                read: resource.internal_resourceInfo.permissions.public.read,\r\n                append: resource.internal_resourceInfo.permissions.public.append,\r\n                write: resource.internal_resourceInfo.permissions.public.write,\r\n            },\r\n        };\r\n    }\r\n    const linkedResourceUrls = getLinkedResourceUrlAll(resource);\r\n    return {\r\n        user: {\r\n            read: (_b = (_a = linkedResourceUrls[acp.allow]) === null || _a === void 0 ? void 0 : _a.includes(acp.Read)) !== null && _b !== void 0 ? _b : false,\r\n            append: (_e = (((_c = linkedResourceUrls[acp.allow]) === null || _c === void 0 ? void 0 : _c.includes(acp.Append)) ||\r\n                ((_d = linkedResourceUrls[acp.allow]) === null || _d === void 0 ? void 0 : _d.includes(acp.Write)))) !== null && _e !== void 0 ? _e : false,\r\n            write: (_g = (_f = linkedResourceUrls[acp.allow]) === null || _f === void 0 ? void 0 : _f.includes(acp.Write)) !== null && _g !== void 0 ? _g : false,\r\n        },\r\n    };\r\n}\r\n/**\r\n * Extends the regular JavaScript error object with access to the status code and status message.\r\n * @since 1.2.0\r\n */\r\nclass FetchError extends SolidClientError {\r\n    constructor(message, errorResponse) {\r\n        super(message);\r\n        this.response = errorResponse;\r\n    }\r\n    get statusCode() {\r\n        return this.response.status;\r\n    }\r\n    get statusText() {\r\n        return this.response.statusText;\r\n    }\r\n}\n\n//\r\nconst defaultGetFileOptions = {\r\n    fetch,\r\n};\r\nconst RESERVED_HEADERS = [\"Slug\", \"If-None-Match\", \"Content-Type\"];\r\n/**\r\n * Some of the headers must be set by the library, rather than directly.\r\n */\r\nfunction containsReserved(header) {\r\n    return RESERVED_HEADERS.some((reserved) => header[reserved] !== undefined);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file from a URL and returns the file as a blob.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * const fileBlob = await getFile(\"https://pod.example.com/some/file\", { fetch: fetch });\r\n * ```\r\n *\r\n * For additional examples, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#retrieve-a-file).\r\n *\r\n * @param fileUrl The URL of the file to return\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns The file as a blob.\r\n */\r\nasync function getFile(fileUrl, options = defaultGetFileOptions) {\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const url = internal_toIriString(fileUrl);\r\n    const response = await config.fetch(url, config.init);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the File failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const data = await response.blob();\r\n    const fileWithResourceInfo = Object.assign(data, {\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return fileWithResourceInfo;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Deletes a file at a given URL.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * await deleteFile( \"https://pod.example.com/some/file\", { fetch: fetch });\r\n * ```\r\n *\r\n * For additional examples, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#delete-a-file).\r\n *\r\n * @param file The URL of the file to delete or the file itself (if it has ResourceInfo).\r\n */\r\nasync function deleteFile(file, options = defaultGetFileOptions) {\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const url = hasResourceInfo(file)\r\n        ? internal_toIriString(getSourceIri(file))\r\n        : internal_toIriString(file);\r\n    const response = await config.fetch(url, Object.assign(Object.assign({}, config.init), { method: \"DELETE\" }));\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the file at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file in an existing folder/Container associated with the given URL.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * const savedFile = await saveFileInContainer(\r\n *   \"https://pod.example.com/some/existing/container/\",\r\n *   new Blob([\"This is a plain piece of text\"], { type: \"plain/text\" }),\r\n *   { slug: \"suggestedFileName.txt\", contentType: \"text/plain\", fetch: fetch }\r\n * );\r\n * ```\r\n *\r\n * For additional example, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#save-a-file-into-an-existing-container).\r\n *\r\n * In the `options` parameter,\r\n *\r\n * - You can suggest a file name in the `slug` field.  However, the Solid\r\n *   Server may or may not use the suggested `slug` as the file name.\r\n *\r\n * - *Recommended:* You can specify the [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)\r\n *   of the file in the `contentType`.  If unspecified, the function uses the default type of\r\n *   `application/octet-stream`, indicating a binary data file.\r\n *\r\n * The function saves a file into an *existing* Container. If the\r\n * Container does not exist, either:\r\n * - Create the Container first using [[createContainerAt]], and then\r\n *   use the function, or\r\n * - Use [[overwriteFile]] to save the file. [[overwriteFile]] creates\r\n *   the Containers in the saved file path as needed.\r\n *\r\n * Users who only have `Append` but not `Write` access to a Container\r\n * can use [[saveFileInContainer]] to save new files to the Container.\r\n * That is, [[saveFileInContainer]] is useful in situations where users\r\n * can add new files to a Container but not change existing files in\r\n * the Container, such as users given access to send notifications to\r\n * another's Pod but not to view or delete existing notifications in that Pod.\r\n *\r\n * Users with `Write` access to the given folder/Container may prefer to\r\n * use [[overwriteFile]].\r\n *\r\n * @param folderUrl The URL of an existing folder where the new file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g. a slug).\r\n * @returns A Promise that resolves to the saved file, if available, or `null` if the current user does not have Read access to the newly-saved file. It rejects if saving fails.\r\n */\r\nasync function saveFileInContainer(folderUrl, file, options = defaultGetFileOptions) {\r\n    const folderUrlString = internal_toIriString(folderUrl);\r\n    const response = await writeFile(folderUrlString, file, \"POST\", options);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Saving the file in [${folderUrl}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly saved file.\");\r\n    }\r\n    const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;\r\n    const blobClone = internal_cloneResource(file);\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: true,\r\n            sourceIri: fileIri,\r\n            contentType: getContentType(file, options.contentType),\r\n        },\r\n    };\r\n    return Object.assign(blobClone, resourceInfo);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file at a given URL. If a file already exists at the URL,\r\n * the function overwrites the existing file.\r\n *\r\n * For example:\r\n *\r\n * ```\r\n * const savedFile = await overwriteFile(\r\n *   \"https://pod.example.com/some/container/myFile.txt\",\r\n *   new Blob([\"This is a plain piece of text\"], { type: \"plain/text\" }),\r\n *   { contentType: \"text/plain\", fetch: fetch }\r\n * );\r\n * ```\r\n *\r\n * For additional example, see\r\n * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#write-a-file-to-a-specific-url).\r\n *\r\n * *Recommended:* In the `options` parameter, you can specify the\r\n * [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)\r\n * of the file in the `contentType`.  If unspecified, the function uses the default type of\r\n * `application/octet-stream`, indicating a binary data file.\r\n *\r\n * When saving a file with [[overwriteFile]], the Solid server creates any\r\n * intermediary Containers as needed; i.e., the Containers do not\r\n * need to be created in advance. For example, when saving a file to the target URL of\r\n * https://example.pod/container/resource, if https://example.pod/container/ does not exist,\r\n * the container is created as part of the save.\r\n *\r\n * @param fileUrl The URL where the file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g., media type).\r\n */\r\nasync function overwriteFile(fileUrl, file, options = defaultGetFileOptions) {\r\n    const fileUrlString = internal_toIriString(fileUrl);\r\n    const response = await writeFile(fileUrlString, file, \"PUT\", options);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Overwriting the file at [${fileUrlString}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const blobClone = internal_cloneResource(file);\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    resourceInfo.sourceIri = fileUrlString;\r\n    resourceInfo.isRawData = true;\r\n    return Object.assign(blobClone, { internal_resourceInfo: resourceInfo });\r\n}\r\nfunction isHeadersArray(headers) {\r\n    return Array.isArray(headers);\r\n}\r\n/**\r\n * The return type of this function is misleading: it should ONLY be used to check\r\n * whether an object has a forEach method that returns <key, value> pairs.\r\n *\r\n * @param headers A headers object that might have a forEach\r\n */\r\nfunction hasHeadersObjectForEach(headers) {\r\n    return typeof headers.forEach === \"function\";\r\n}\r\n/**\r\n * @hidden\r\n * This function feels unnecessarily complicated, but is required in order to\r\n * have Headers according to type definitions in both Node and browser environments.\r\n * This might require a fix upstream to be cleaned up.\r\n *\r\n * @param headersToFlatten A structure containing headers potentially in several formats\r\n */\r\nfunction flattenHeaders(headersToFlatten) {\r\n    if (typeof headersToFlatten === \"undefined\") {\r\n        return {};\r\n    }\r\n    let flatHeaders = {};\r\n    if (isHeadersArray(headersToFlatten)) {\r\n        headersToFlatten.forEach(([key, value]) => {\r\n            flatHeaders[key] = value;\r\n        });\r\n        // Note that the following line must be a elsif, because string[][] has a forEach,\r\n        // but it returns string[] instead of <key, value>\r\n    }\r\n    else if (hasHeadersObjectForEach(headersToFlatten)) {\r\n        headersToFlatten.forEach((value, key) => {\r\n            flatHeaders[key] = value;\r\n        });\r\n    }\r\n    else {\r\n        // If the headers are already a Record<string, string>,\r\n        // they can directly be returned.\r\n        flatHeaders = headersToFlatten;\r\n    }\r\n    return flatHeaders;\r\n}\r\n/**\r\n * Internal function that performs the actual write HTTP query, either POST\r\n * or PUT depending on the use case.\r\n *\r\n * @param fileUrl The URL where the file is saved\r\n * @param file The file to be written\r\n * @param method The HTTP method\r\n * @param options Additional parameters for file creation (e.g. a slug, or media type)\r\n */\r\nasync function writeFile(targetUrl, file, method, options) {\r\n    var _a, _b;\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const headers = flattenHeaders((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});\r\n    if (containsReserved(headers)) {\r\n        throw new Error(`No reserved header (${RESERVED_HEADERS.join(\", \")}) should be set in the optional RequestInit.`);\r\n    }\r\n    // If a slug is in the parameters, set the request headers accordingly\r\n    if (config.slug !== undefined) {\r\n        headers.Slug = config.slug;\r\n    }\r\n    headers[\"Content-Type\"] = getContentType(file, options.contentType);\r\n    const targetUrlString = internal_toIriString(targetUrl);\r\n    return config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), { headers,\r\n        method, body: file }));\r\n}\r\nfunction getContentType(file, contentTypeOverride) {\r\n    if (typeof contentTypeOverride === \"string\") {\r\n        return contentTypeOverride;\r\n    }\r\n    const fileType = typeof file === \"object\" &&\r\n        file !== null &&\r\n        typeof file.type === \"string\" &&\r\n        file.type.length > 0\r\n        ? file.type\r\n        : undefined;\r\n    return fileType !== null && fileType !== void 0 ? fileType : \"application/octet-stream\";\r\n}\n\n//\r\nrdfJsDatasetModule.dataset;\r\nconst localNodeSkolemPrefix = \"https://inrupt.com/.well-known/sdk-local-node/\";\r\n/**\r\n * Runtime freezing might be too much overhead;\r\n * if so, this function allows us to replace it by a function\r\n * that merely marks its input as Readonly<> for static analysis.\r\n */\r\nconst { freeze } = Object;\r\nfunction isLocalNodeIri(iri) {\r\n    return (iri.substring(0, localNodeSkolemPrefix.length) === localNodeSkolemPrefix);\r\n}\r\nfunction getLocalNodeName(localNodeIri) {\r\n    return localNodeIri.substring(localNodeSkolemPrefix.length);\r\n}\r\nfunction getLocalNodeIri(localNodeName) {\r\n    return `${localNodeSkolemPrefix}${localNodeName}`;\r\n}\r\nfunction isBlankNodeId(value) {\r\n    return typeof value === \"string\" && value.substring(0, 2) === \"_:\";\r\n}\r\nfunction getBlankNodeValue(blankNodeId) {\r\n    return blankNodeId.substring(2);\r\n}\r\nfunction getBlankNodeId(blankNode) {\r\n    return `_:${blankNode.value}`;\r\n}\n\n//\r\n/**\r\n * IRIs of the XML Schema data types we support\r\n */\r\nconst xmlSchemaTypes = {\r\n    boolean: \"http://www.w3.org/2001/XMLSchema#boolean\",\r\n    dateTime: \"http://www.w3.org/2001/XMLSchema#dateTime\",\r\n    date: \"http://www.w3.org/2001/XMLSchema#date\",\r\n    time: \"http://www.w3.org/2001/XMLSchema#time\",\r\n    decimal: \"http://www.w3.org/2001/XMLSchema#decimal\",\r\n    integer: \"http://www.w3.org/2001/XMLSchema#integer\",\r\n    string: \"http://www.w3.org/2001/XMLSchema#string\",\r\n    langString: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\r\n};\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\r\nfunction serializeBoolean(value) {\r\n    return value ? \"true\" : \"false\";\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\r\nfunction deserializeBoolean(value) {\r\n    if (value === \"true\" || value === \"1\") {\r\n        return true;\r\n    }\r\n    if (value === \"false\" || value === \"0\") {\r\n        return false;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value` in UTC.\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\r\nfunction serializeTime(value) {\r\n    let millisecondString;\r\n    let timezoneString;\r\n    if (value.millisecond) {\r\n        if (value.millisecond < 10) {\r\n            millisecondString = `00${value.millisecond}`;\r\n        }\r\n        else if (value.millisecond < 100) {\r\n            millisecondString = `0${value.millisecond}`;\r\n        }\r\n        else {\r\n            millisecondString = value.millisecond;\r\n        }\r\n    }\r\n    if (typeof value.timezoneHourOffset === \"number\") {\r\n        const timezoneFormatted = Math.abs(value.timezoneHourOffset) < 10\r\n            ? `0${Math.abs(value.timezoneHourOffset)}`\r\n            : Math.abs(value.timezoneHourOffset);\r\n        timezoneString =\r\n            value.timezoneHourOffset >= 0\r\n                ? `+${timezoneFormatted}`\r\n                : `-${timezoneFormatted}`;\r\n        if (value.timezoneMinuteOffset) {\r\n            timezoneString = `${timezoneString}:${value.timezoneMinuteOffset < 10\r\n                ? `0${value.timezoneMinuteOffset}`\r\n                : value.timezoneMinuteOffset}`;\r\n        }\r\n        else {\r\n            timezoneString += \":00\";\r\n        }\r\n    }\r\n    return `${value.hour < 10 ? `0${value.hour}` : value.hour}:${value.minute < 10 ? `0${value.minute}` : value.minute}:${value.second < 10 ? `0${value.second}` : value.second}${value.millisecond ? `.${millisecondString}` : \"\"}${timezoneString || \"\"}`;\r\n}\r\n/**\r\n * @internal\r\n * @param literalString Value to deserialise.\r\n * @returns Deserialized time, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\r\nfunction deserializeTime(literalString) {\r\n    // Time in the format described at\r\n    // https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n    // \\d\\d:\\d\\d:\\d\\d - Two digits for the hour, minute and second, respectively, separated by a `:`.\r\n    //                  Example: \"13:37:42\".\r\n    // (\\.\\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.\r\n    //            Example: \".1337\".\r\n    // (Z|(\\+|-)\\d\\d:\\d\\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for\r\n    //                       the hour offset and two for the minute offset, separated by a `:`.\r\n    //                       Example: \"+13:37\".\r\n    const timeRegEx = /\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)?/;\r\n    if (!timeRegEx.test(literalString)) {\r\n        return null;\r\n    }\r\n    const [timeString, timezoneString] = splitTimeFromTimezone(literalString);\r\n    const [hourString, minuteString, timeRest] = timeString.split(\":\");\r\n    let utcHours = Number.parseInt(hourString, 10);\r\n    let utcMinutes = Number.parseInt(minuteString, 10);\r\n    const [secondString, optionalMillisecondString] = timeRest.split(\".\");\r\n    const utcSeconds = Number.parseInt(secondString, 10);\r\n    const utcMilliseconds = optionalMillisecondString\r\n        ? Number.parseInt(optionalMillisecondString, 10)\r\n        : undefined;\r\n    if (utcMinutes >= 60) {\r\n        utcHours += 1;\r\n        utcMinutes -= 60;\r\n    }\r\n    const deserializedTime = {\r\n        hour: utcHours,\r\n        minute: utcMinutes,\r\n        second: utcSeconds,\r\n    };\r\n    if (typeof utcMilliseconds === \"number\") {\r\n        deserializedTime.millisecond = utcMilliseconds;\r\n    }\r\n    if (typeof timezoneString === \"string\") {\r\n        const [hourOffset, minuteOffset] = getTimezoneOffsets(timezoneString);\r\n        if (typeof hourOffset !== \"number\" ||\r\n            hourOffset > 24 ||\r\n            typeof minuteOffset !== \"number\" ||\r\n            minuteOffset > 59) {\r\n            return null;\r\n        }\r\n        deserializedTime.timezoneHourOffset = hourOffset;\r\n        deserializedTime.timezoneMinuteOffset = minuteOffset;\r\n    }\r\n    return deserializedTime;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\r\nfunction serializeDatetime(value) {\r\n    // Although the XML Schema DateTime is not _exactly_ an ISO 8601 string\r\n    // (see https://www.w3.org/TR/xmlschema-2/#deviantformats),\r\n    // the deviations only affect the parsing, not the serialisation.\r\n    // Therefore, we can just use .toISOString():\r\n    return value.toISOString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\r\nfunction deserializeDatetime(literalString) {\r\n    // DateTime in the format described at\r\n    // https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n    // (without constraints on the value).\r\n    // -? - An optional leading `-`.\r\n    // \\d{4,}- - Four or more digits followed by a `-` representing the year. Example: \"3000-\".\r\n    // \\d\\d-\\d\\d - Two digits representing the month and two representing the day of the month,\r\n    //             separated by a `-`. Example: \"11-03\".\r\n    // T - The letter T, separating the date from the time.\r\n    // \\d\\d:\\d\\d:\\d\\d - Two digits for the hour, minute and second, respectively, separated by a `:`.\r\n    //                  Example: \"13:37:42\".\r\n    // (\\.\\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.\r\n    //            Example: \".1337\".\r\n    // (Z|(\\+|-)\\d\\d:\\d\\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for\r\n    //                       the hour offset and two for the minute offset, separated by a `:`.\r\n    //                       Example: \"+13:37\".\r\n    const datetimeRegEx = /-?\\d{4,}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)?/;\r\n    if (!datetimeRegEx.test(literalString)) {\r\n        return null;\r\n    }\r\n    const [signedDateString, rest] = literalString.split(\"T\");\r\n    // The date string can optionally be prefixed with `-`,\r\n    // in which case the year is negative:\r\n    const [yearMultiplier, dateString] = signedDateString.charAt(0) === \"-\"\r\n        ? [-1, signedDateString.substring(1)]\r\n        : [1, signedDateString];\r\n    const [yearString, monthString, dayString] = dateString.split(\"-\");\r\n    const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;\r\n    const utcMonth = Number.parseInt(monthString, 10) - 1;\r\n    const utcDate = Number.parseInt(dayString, 10);\r\n    const [timeString, timezoneString] = splitTimeFromTimezone(rest);\r\n    const [hourOffset, minuteOffset] = typeof timezoneString === \"string\"\r\n        ? getTimezoneOffsets(timezoneString)\r\n        : [0, 0];\r\n    const [hourString, minuteString, timeRest] = timeString.split(\":\");\r\n    const utcHours = Number.parseInt(hourString, 10) + hourOffset;\r\n    const utcMinutes = Number.parseInt(minuteString, 10) + minuteOffset;\r\n    const [secondString, optionalMillisecondString] = timeRest.split(\".\");\r\n    const utcSeconds = Number.parseInt(secondString, 10);\r\n    const utcMilliseconds = optionalMillisecondString\r\n        ? Number.parseInt(optionalMillisecondString, 10)\r\n        : 0;\r\n    const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, utcHours, utcMinutes, utcSeconds, utcMilliseconds));\r\n    // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation\r\n    // always writes out the years fully, we should correct this to actually map to the years 0 to 99.\r\n    // See\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values\r\n    if (utcFullYear >= 0 && utcFullYear < 100) {\r\n        // Note that we base it on the calculated year, rather than the year that was actually read.\r\n        // This is because the year might actually differ from the value listed in the serialisation,\r\n        // i.e. when moving the timezone offset to UTC pushes it into a different year:\r\n        date.setUTCFullYear(date.getUTCFullYear() - 1900);\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation\r\n */\r\nfunction serializeDate(value) {\r\n    const year = value.getFullYear();\r\n    const month = value.getMonth() + 1;\r\n    const day = value.getDate();\r\n    const [_, timezone] = splitTimeFromTimezone(value.toISOString());\r\n    return `${year}-${String(month).padStart(2, \"0\")}-${String(day).padStart(2, \"0\")}${timezone}`;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation\r\n */\r\nfunction deserializeDate(literalString) {\r\n    // Date in the format described at\r\n    // https://www.w3.org/TR/xmlschema-2/#date-lexical-representation\r\n    // (without constraints on the value).\r\n    // -? - An optional leading `-`.\r\n    // \\d{4,}- - Four or more digits followed by a `-` representing the year. Example: \"3000-\".\r\n    // \\d\\d-\\d\\d - Two digits representing the month and two representing the day of the month,\r\n    //             separated by a `-`. Example: \"11-03\".\r\n    // (Z|(\\+|-)\\d\\d:\\d\\d) - Optionally, the letter Z indicating UTC, or a `+` or `-` followed by two digits for\r\n    //                       the hour offset and two for the minute offset, separated by a `:`.\r\n    //                       Example: \"+13:37\".\r\n    const dateRegEx = /-?\\d{4,}-\\d\\d-\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?/;\r\n    if (!dateRegEx.test(literalString)) {\r\n        return null;\r\n    }\r\n    const signedDateString = literalString;\r\n    // The date string can optionally be prefixed with `-`,\r\n    // in which case the year is negative:\r\n    const [yearMultiplier, dateString] = signedDateString.charAt(0) === \"-\"\r\n        ? [-1, signedDateString.substring(1)]\r\n        : [1, signedDateString];\r\n    const [yearString, monthString, dayAndTimezoneString] = dateString.split(\"-\");\r\n    const dayString = dayAndTimezoneString.length > 2\r\n        ? dayAndTimezoneString.substring(0, 2)\r\n        : dayAndTimezoneString;\r\n    const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;\r\n    const utcMonth = Number.parseInt(monthString, 10) - 1;\r\n    const utcDate = Number.parseInt(dayString, 10);\r\n    const hour = 12;\r\n    // setting at 12:00 avoids all timezones\r\n    const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, hour));\r\n    // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation\r\n    // always writes out the years fully, we should correct this to actually map to the years 0 to 99.\r\n    // See\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values\r\n    if (utcFullYear >= 0 && utcFullYear < 100) {\r\n        date.setUTCFullYear(date.getUTCFullYear() - 1900);\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * @param timeString An XML Schema time string.\r\n * @returns A tuple [timeString, timezoneString].\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\r\nfunction splitTimeFromTimezone(timeString) {\r\n    if (timeString.endsWith(\"Z\")) {\r\n        return [timeString.substring(0, timeString.length - 1), \"Z\"];\r\n    }\r\n    const splitOnPlus = timeString.split(\"+\");\r\n    const splitOnMinus = timeString.split(\"-\");\r\n    if (splitOnPlus.length === 1 && splitOnMinus.length === 1) {\r\n        return [splitOnPlus[0], undefined];\r\n    }\r\n    return splitOnPlus.length > splitOnMinus.length\r\n        ? [splitOnPlus[0], `+${splitOnPlus[1]}`]\r\n        : [splitOnMinus[0], `-${splitOnMinus[1]}`];\r\n}\r\n/**\r\n * @param timezoneString Lexical representation of a time zone in XML Schema.\r\n * @returns A tuple of the hour and minute offset of the time zone.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-timezones\r\n */\r\nfunction getTimezoneOffsets(timezoneString) {\r\n    if (timezoneString === \"Z\") {\r\n        return [0, 0];\r\n    }\r\n    const multiplier = timezoneString.charAt(0) === \"+\" ? 1 : -1;\r\n    const [hourString, minuteString] = timezoneString.substring(1).split(\":\");\r\n    const hours = Number.parseInt(hourString, 10);\r\n    const minutes = Number.parseInt(minuteString, 10);\r\n    return [hours * multiplier, minutes * multiplier];\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\r\nfunction serializeDecimal(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\r\nfunction deserializeDecimal(literalString) {\r\n    const deserialized = Number.parseFloat(literalString);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeInteger(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized integer, or null if the given value is not a valid serialised integer.\r\n */\r\nfunction deserializeInteger(literalString) {\r\n    const deserialized = Number.parseInt(literalString, 10);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param locale Locale to transform into a consistent format.\r\n */\r\nfunction normalizeLocale(locale) {\r\n    return locale.toLowerCase();\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param value The value that might or might not be a Named Node.\r\n * @returns Whether `value` is a Named Node.\r\n */\r\nfunction isNamedNode(value) {\r\n    return isTerm(value) && value.termType === \"NamedNode\";\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Literals.\r\n * @param value The value that might or might not be a Literal.\r\n * @returns Whether `value` is a Literal.\r\n */\r\nfunction isLiteral(value) {\r\n    return isTerm(value) && value.termType === \"Literal\";\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Terms.\r\n * @param value The value that might or might not be a Term.\r\n * @returns Whether `value` is a Term.\r\n */\r\nfunction isTerm(value) {\r\n    return (value !== null &&\r\n        typeof value === \"object\" &&\r\n        typeof value.termType === \"string\" &&\r\n        typeof value.value === \"string\" &&\r\n        typeof value.equals === \"function\");\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param value The value that might or might not be a Node with no known IRI yet.\r\n * @returns Whether `value` is a Node with no known IRI yet.\r\n */\r\nfunction isLocalNode(value) {\r\n    return isNamedNode(value) && isLocalNodeIri(value.value);\r\n}\r\n/**\r\n * Ensure that a given value is a valid URL.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw URLs.\r\n * @param iri The value of which to verify that it is a valid URL.\r\n */\r\nfunction internal_isValidUrl(iri) {\r\n    const iriString = internal_toIriString(iri);\r\n    // If the runtime environment supports URL, instantiate one.\r\n    // If the given IRI is not a valid URL, it will throw an error.\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n    /* istanbul ignore if [URL is available in our testing environment, so we cannot test the alternative] */\r\n    if (typeof URL !== \"function\") {\r\n        // If we can't validate the URL, do not throw an error:\r\n        return true;\r\n    }\r\n    try {\r\n        // const here is needed to avoid a \"no-new\" warning:\r\n        const url = new URL(iriString);\r\n        return true;\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param localNode The LocalNode to resolve to a NamedNode.\r\n * @param resourceIri The Resource in which the Node will be saved.\r\n */\r\nfunction resolveIriForLocalNode(localNode, resourceIri) {\r\n    return DataFactory.namedNode(resolveLocalIri(getLocalNodeName(localNode.value), resourceIri));\r\n}\r\n/**\r\n * @internal API for internal use only.\r\n * @param name The name identifying a Thing.\r\n * @param resourceIri The Resource in which the Thing can be found.\r\n */\r\nfunction resolveLocalIri(name, resourceIri) {\r\n    /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */\r\n    if (typeof URL !== \"function\") {\r\n        throw new Error(\"The URL interface is not available, so an IRI cannot be determined.\");\r\n    }\r\n    const thingIri = new URL(resourceIri);\r\n    thingIri.hash = name;\r\n    return thingIri.href;\r\n}\n\n//\r\nconst DataFactory = RdfJsDataFactory;\r\nfunction addRdfJsQuadToDataset(dataset, quad, quadParseOptions = {}) {\r\n    var _a;\r\n    const supportedGraphTypes = [\r\n        \"NamedNode\",\r\n        \"DefaultGraph\",\r\n    ];\r\n    if (!supportedGraphTypes.includes(quad.graph.termType)) {\r\n        throw new Error(`Cannot parse Quads with nodes of type [${quad.graph.termType}] as their Graph node.`);\r\n    }\r\n    const graphId = quad.graph.termType === \"DefaultGraph\" ? \"default\" : quad.graph.value;\r\n    const graph = (_a = dataset.graphs[graphId]) !== null && _a !== void 0 ? _a : {};\r\n    return freeze(Object.assign(Object.assign({}, dataset), { graphs: freeze(Object.assign(Object.assign({}, dataset.graphs), { [graphId]: addRdfJsQuadToGraph(graph, quad, quadParseOptions) })) }));\r\n}\r\nfunction addRdfJsQuadToGraph(graph, quad, quadParseOptions) {\r\n    var _a;\r\n    const supportedSubjectTypes = [\r\n        \"NamedNode\",\r\n        \"BlankNode\",\r\n    ];\r\n    if (!supportedSubjectTypes.includes(quad.subject.termType)) {\r\n        throw new Error(`Cannot parse Quads with nodes of type [${quad.subject.termType}] as their Subject node.`);\r\n    }\r\n    const subjectIri = quad.subject.termType === \"BlankNode\"\r\n        ? `_:${quad.subject.value}`\r\n        : quad.subject.value;\r\n    const subject = (_a = graph[subjectIri]) !== null && _a !== void 0 ? _a : {\r\n        type: \"Subject\",\r\n        url: subjectIri,\r\n        predicates: {},\r\n    };\r\n    return freeze(Object.assign(Object.assign({}, graph), { [subjectIri]: addRdfJsQuadToSubject(subject, quad, quadParseOptions) }));\r\n}\r\nfunction addRdfJsQuadToSubject(subject, quad, quadParseOptions) {\r\n    return freeze(Object.assign(Object.assign({}, subject), { predicates: addRdfJsQuadToPredicates(subject.predicates, quad, quadParseOptions) }));\r\n}\r\nfunction addRdfJsQuadToPredicates(predicates, quad, quadParseOptions) {\r\n    var _a;\r\n    const supportedPredicateTypes = [\r\n        \"NamedNode\",\r\n    ];\r\n    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {\r\n        throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);\r\n    }\r\n    const predicateIri = quad.predicate.value;\r\n    const objects = (_a = predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n    return freeze(Object.assign(Object.assign({}, predicates), { [predicateIri]: addRdfJsQuadToObjects(objects, quad, quadParseOptions) }));\r\n}\r\nfunction addRdfJsQuadToObjects(objects, quad, quadParseOptions) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    if (quad.object.termType === \"NamedNode\") {\r\n        const namedNodes = freeze([\r\n            ...((_a = objects.namedNodes) !== null && _a !== void 0 ? _a : []),\r\n            quad.object.value,\r\n        ]);\r\n        return freeze(Object.assign(Object.assign({}, objects), { namedNodes }));\r\n    }\r\n    if (quad.object.termType === \"Literal\") {\r\n        if (quad.object.datatype.value === xmlSchemaTypes.langString) {\r\n            const locale = quad.object.language.toLowerCase();\r\n            const thisLocaleStrings = freeze([\r\n                ...((_c = (_b = objects.langStrings) === null || _b === void 0 ? void 0 : _b[locale]) !== null && _c !== void 0 ? _c : []),\r\n                quad.object.value,\r\n            ]);\r\n            const langStrings = freeze(Object.assign(Object.assign({}, ((_d = objects.langStrings) !== null && _d !== void 0 ? _d : {})), { [locale]: thisLocaleStrings }));\r\n            return freeze(Object.assign(Object.assign({}, objects), { langStrings }));\r\n        }\r\n        // If the Object is a non-langString Literal\r\n        const thisTypeValues = freeze([\r\n            ...((_f = (_e = objects.literals) === null || _e === void 0 ? void 0 : _e[quad.object.datatype.value]) !== null && _f !== void 0 ? _f : []),\r\n            quad.object.value,\r\n        ]);\r\n        const literals = freeze(Object.assign(Object.assign({}, ((_g = objects.literals) !== null && _g !== void 0 ? _g : {})), { [quad.object.datatype.value]: thisTypeValues }));\r\n        return freeze(Object.assign(Object.assign({}, objects), { literals }));\r\n    }\r\n    if (quad.object.termType === \"BlankNode\") {\r\n        const blankNodePredicates = getPredicatesForBlankNode(quad.object, quadParseOptions);\r\n        const blankNodes = freeze([\r\n            ...((_h = objects.blankNodes) !== null && _h !== void 0 ? _h : []),\r\n            blankNodePredicates,\r\n        ]);\r\n        return freeze(Object.assign(Object.assign({}, objects), { blankNodes }));\r\n    }\r\n    throw new Error(`Objects of type [${quad.object.termType}] are not supported.`);\r\n}\r\nfunction getPredicatesForBlankNode(node, quadParseOptions) {\r\n    var _a, _b;\r\n    const chainBlankNodes = (_a = quadParseOptions.chainBlankNodes) !== null && _a !== void 0 ? _a : [];\r\n    if (chainBlankNodes.find((chainBlankNode) => chainBlankNode.equals(node)) ===\r\n        undefined) {\r\n        // If this Blank Node is not used to provide nested values for another Subject,\r\n        // just return its identifier.\r\n        // That identifier will also be listed among the Subjects in the Graph.\r\n        return getBlankNodeId(node);\r\n    }\r\n    /* istanbul ignore next: If there are chain nodes, there will always be other Quads, so the `?? []` can't be reached: */\r\n    const quads = (_b = quadParseOptions.otherQuads) !== null && _b !== void 0 ? _b : [];\r\n    const quadsWithNodeAsSubject = quads.filter((quad) => quad.subject.equals(node));\r\n    // First add the Quads with regular Objects\r\n    const predicates = quadsWithNodeAsSubject\r\n        .filter((quad) => !isBlankNode(quad.object))\r\n        .reduce((predicatesAcc, quad) => {\r\n        var _a;\r\n        const supportedPredicateTypes = [\r\n            \"NamedNode\",\r\n        ];\r\n        if (!supportedPredicateTypes.includes(quad.predicate.termType)) {\r\n            throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);\r\n        }\r\n        const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};\r\n        return freeze(Object.assign(Object.assign({}, predicatesAcc), { [quad.predicate.value]: addRdfJsQuadToObjects(objects, quad, quadParseOptions) }));\r\n    }, {});\r\n    // And then also add the Quads that have another Blank Node as the Object\r\n    // in addition to the Blank Node `node` as the Subject:\r\n    const blankNodeObjectQuads = quadsWithNodeAsSubject.filter((quad) => isBlankNode(quad.object));\r\n    return blankNodeObjectQuads.reduce((predicatesAcc, quad) => {\r\n        var _a, _b;\r\n        const supportedPredicateTypes = [\r\n            \"NamedNode\",\r\n        ];\r\n        if (!supportedPredicateTypes.includes(quad.predicate.termType)) {\r\n            throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);\r\n        }\r\n        /* istanbul ignore next: The `?? {}` doesn't get hit; presumably it's initialised above. */\r\n        const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};\r\n        /* istanbul ignore next: The `?? []` doesn't get hit; presumably it's initialised above. */\r\n        const blankNodes = (_b = objects.blankNodes) !== null && _b !== void 0 ? _b : [];\r\n        return freeze(Object.assign(Object.assign({}, predicatesAcc), { \r\n            // The BlankNode assertions are valid because we filtered on BlankNodes above:\r\n            [quad.predicate.value]: Object.assign(Object.assign({}, objects), { blankNodes: [\r\n                    ...blankNodes,\r\n                    getPredicatesForBlankNode(quad.object, quadParseOptions),\r\n                ] }) }));\r\n    }, predicates);\r\n}\r\n/**\r\n * Given an array of Quads, returns all Blank Nodes that are used in a single chain of Nodes.\r\n *\r\n * This allows you to obtain which Blank Nodes are involved in e.g. RDF lists.\r\n * This is useful because those can be represented as nested data that will have\r\n * a deterministic structure, whereas a representation of Blank Nodes that\r\n * create a cycle or are re-used will need ad-hoc, non-deterministic identifiers\r\n * to allow for representation without inifinite nesting.\r\n */\r\nfunction getChainBlankNodes(quads) {\r\n    // All Blank Nodes that occur in Subject position:\r\n    const blankNodeSubjects = quads\r\n        .map((quad) => quad.subject)\r\n        .filter(isBlankNode);\r\n    // All Blank Nodes that occur in Object position:\r\n    const blankNodeObjects = quads.map((quad) => quad.object).filter(isBlankNode);\r\n    // Makes sure that all given Nodes are the same,\r\n    // which will be used to verify that a set of Quads all have the same Subject:\r\n    function everyNodeTheSame(nodes) {\r\n        // This could potentially be made more performant by mapping every term\r\n        // to their value and using native JS comparisons, assuming every node is\r\n        // either a Blank or a Named Node.\r\n        return nodes.every((otherNode) => nodes.every((anotherNode) => otherNode.equals(anotherNode)));\r\n    }\r\n    // Get all Blank Nodes that are part of a cycle in the graph:\r\n    const cycleBlankNodes = [];\r\n    blankNodeObjects.forEach((blankNodeObject) => {\r\n        cycleBlankNodes.push(...getCycleBlankNodes(blankNodeObject, quads));\r\n    });\r\n    // Get Blank Nodes that are used to provide nested values for a single Subject,\r\n    // which we'll represent as nested values as well\r\n    // (this allows us to avoid generating a non-deterministic, ad-hoc identifier\r\n    // for those Blank Nodes).\r\n    // We'll do this by taking all Blank Nodes in the given Quads...\r\n    const chainBlankNodes = blankNodeSubjects\r\n        .concat(blankNodeObjects)\r\n        .filter((blankNode) => {\r\n        // ....removing those Blank Nodes that are part of a cycle...\r\n        if (cycleBlankNodes.some((cycleBlankNode) => cycleBlankNode.equals(blankNode))) {\r\n            return false;\r\n        }\r\n        // ...and then returning only those Blank Nodes that only occur in the\r\n        // Object position for a single Subject, i.e. that are part of a single\r\n        // chain:\r\n        const subjectsWithThisNodeAsObject = quads\r\n            .filter((quad) => quad.object.equals(blankNode))\r\n            .map((quad) => quad.subject);\r\n        return (subjectsWithThisNodeAsObject.length > 0 &&\r\n            everyNodeTheSame(subjectsWithThisNodeAsObject));\r\n    });\r\n    return chainBlankNodes;\r\n}\r\nfunction toRdfJsQuads(dataset, options = {}) {\r\n    var _a;\r\n    const quads = [];\r\n    const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : RdfJsDataFactory;\r\n    Object.keys(dataset.graphs).forEach((graphIri) => {\r\n        const graph = dataset.graphs[graphIri];\r\n        const graphNode = graphIri === \"default\"\r\n            ? dataFactory.defaultGraph()\r\n            : dataFactory.namedNode(graphIri);\r\n        Object.keys(graph).forEach((subjectIri) => {\r\n            const { predicates } = graph[subjectIri];\r\n            const subjectNode = isBlankNodeId(subjectIri)\r\n                ? dataFactory.blankNode(getBlankNodeValue(subjectIri))\r\n                : dataFactory.namedNode(subjectIri);\r\n            quads.push(...subjectToRdfJsQuads(predicates, subjectNode, graphNode, options));\r\n        });\r\n    });\r\n    return quads;\r\n}\r\nfunction subjectToRdfJsQuads(predicates, subjectNode, graphNode, options = {}) {\r\n    var _a;\r\n    const quads = [];\r\n    const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : RdfJsDataFactory;\r\n    Object.keys(predicates).forEach((predicateIri) => {\r\n        var _a, _b, _c, _d;\r\n        const predicateNode = dataFactory.namedNode(predicateIri);\r\n        const langStrings = (_a = predicates[predicateIri].langStrings) !== null && _a !== void 0 ? _a : {};\r\n        const namedNodes = (_b = predicates[predicateIri].namedNodes) !== null && _b !== void 0 ? _b : [];\r\n        const literals = (_c = predicates[predicateIri].literals) !== null && _c !== void 0 ? _c : {};\r\n        const blankNodes = (_d = predicates[predicateIri].blankNodes) !== null && _d !== void 0 ? _d : [];\r\n        const literalTypes = Object.keys(literals);\r\n        literalTypes.forEach((typeIri) => {\r\n            const typeNode = dataFactory.namedNode(typeIri);\r\n            const literalValues = literals[typeIri];\r\n            literalValues.forEach((value) => {\r\n                const literalNode = dataFactory.literal(value, typeNode);\r\n                quads.push(dataFactory.quad(subjectNode, predicateNode, literalNode, graphNode));\r\n            });\r\n        });\r\n        const locales = Object.keys(langStrings);\r\n        locales.forEach((locale) => {\r\n            const localeValues = langStrings[locale];\r\n            localeValues.forEach((value) => {\r\n                const langStringNode = dataFactory.literal(value, locale);\r\n                quads.push(dataFactory.quad(subjectNode, predicateNode, langStringNode, graphNode));\r\n            });\r\n        });\r\n        namedNodes.forEach((namedNodeIri) => {\r\n            const node = dataFactory.namedNode(namedNodeIri);\r\n            quads.push(dataFactory.quad(subjectNode, predicateNode, node, graphNode));\r\n        });\r\n        blankNodes.forEach((blankNodeIdOrPredicates) => {\r\n            if (isBlankNodeId(blankNodeIdOrPredicates)) {\r\n                const blankNode = dataFactory.blankNode(getBlankNodeValue(blankNodeIdOrPredicates));\r\n                quads.push(dataFactory.quad(subjectNode, predicateNode, blankNode, graphNode));\r\n            }\r\n            else {\r\n                const node = dataFactory.blankNode();\r\n                const blankNodeObjectQuad = dataFactory.quad(subjectNode, predicateNode, node, graphNode);\r\n                const blankNodeSubjectQuads = subjectToRdfJsQuads(blankNodeIdOrPredicates, node, graphNode);\r\n                quads.push(blankNodeObjectQuad);\r\n                quads.push(...blankNodeSubjectQuads);\r\n            }\r\n        });\r\n    });\r\n    return quads;\r\n}\r\n/**\r\n * A recursive function that finds all Blank Nodes in an array of Quads that create a cycle in the graph.\r\n *\r\n * This function will traverse the graph starting from `currentNode`, keeping\r\n * track of all the Blank Nodes it encounters twice while doing so, and\r\n * returning those.\r\n */\r\nfunction getCycleBlankNodes(currentNode, quads, traversedBlankNodes = []) {\r\n    // If we've encountered `currentNode` before, all the Blank Nodes we've\r\n    // encountered so far are part of a cycle. Return those.\r\n    if (traversedBlankNodes.find((traversedBlankNode) => traversedBlankNode.equals(currentNode)) !== undefined) {\r\n        return traversedBlankNodes;\r\n    }\r\n    // Find all Blank Nodes that are connected to `currentNode`:\r\n    const blankNodeObjects = quads\r\n        .filter((quad) => quad.subject.equals(currentNode) && isBlankNode(quad.object))\r\n        .map((quad) => quad.object);\r\n    // If no Blank Nodes are connected to `currentNode`, and `currentNode` is not\r\n    // part of a cycle, we're done; the currently traversed Nodes do not form a\r\n    // cycle:\r\n    if (blankNodeObjects.length === 0) {\r\n        return [];\r\n    }\r\n    // Store that we've traversed `currentNode`, then move on to all the Blank\r\n    // Nodes connected to it, which will then take up the role of `currentNode`:\r\n    const nextTraversedNodes = [...traversedBlankNodes, currentNode];\r\n    const cycleBlankNodeArrays = blankNodeObjects.map((nextNode) => getCycleBlankNodes(nextNode, quads, nextTraversedNodes));\r\n    // Collect all the cycle Blank Nodes found in those traverals,\r\n    // then return them:\r\n    const allCycleBlankNodes = [];\r\n    for (const cycleBlankNodes of cycleBlankNodeArrays) {\r\n        allCycleBlankNodes.push(...cycleBlankNodes);\r\n    }\r\n    return allCycleBlankNodes;\r\n}\r\nfunction isBlankNode(term) {\r\n    return term.termType === \"BlankNode\";\r\n}\n\n//\r\nconst fetchDocumentLoader = async (url) => {\r\n    const res = await fetch(url);\r\n    return {\r\n        contextUrl: undefined,\r\n        documentUrl: url,\r\n        document: await res.json(),\r\n    };\r\n};\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even\r\n * in a non-major release.\r\n * ```\r\n * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.\r\n *\r\n * @returns A Parser object.\r\n * @since 1.15.0\r\n */\r\nconst getJsonLdParser = () => {\r\n    const onQuadCallbacks = [];\r\n    const onCompleteCallbacks = [];\r\n    const onErrorCallbacks = [];\r\n    return {\r\n        onQuad: (callback) => {\r\n            onQuadCallbacks.push(callback);\r\n        },\r\n        onError: (callback) => {\r\n            onErrorCallbacks.push(callback);\r\n        },\r\n        onComplete: (callback) => {\r\n            onCompleteCallbacks.push(callback);\r\n        },\r\n        parse: async (source, resourceInfo) => {\r\n            let quads = [];\r\n            try {\r\n                const plainQuads = (await jsonld__namespace.toRDF(JSON.parse(source), {\r\n                    base: getSourceUrl(resourceInfo),\r\n                    documentLoader: fetchDocumentLoader,\r\n                }));\r\n                quads = fixQuads(plainQuads);\r\n            }\r\n            catch (error) {\r\n                onErrorCallbacks.forEach((callback) => callback(error));\r\n            }\r\n            quads.forEach((quad) => {\r\n                onQuadCallbacks.forEach((callback) => callback(quad));\r\n            });\r\n            onCompleteCallbacks.forEach((callback) => callback());\r\n        },\r\n    };\r\n};\r\n/* Quads returned by jsonld parser are not spec-compliant\r\n * see https://github.com/digitalbazaar/jsonld.js/issues/243\r\n * Also, no specific type for these 'quads' is exposed by the library\r\n */\r\n// change to MaybeQuad\r\nfunction fixQuads(plainQuads) {\r\n    const fixedQuads = plainQuads.map((plainQuad) => DataFactory.quad(term(plainQuad.subject), term(plainQuad.predicate), term(plainQuad.object), term(plainQuad.graph)));\r\n    return fixedQuads;\r\n}\r\nfunction term(term) {\r\n    switch (term.termType) {\r\n        case \"NamedNode\":\r\n            return DataFactory.namedNode(term.value);\r\n        case \"BlankNode\":\r\n            return DataFactory.blankNode(term.value.substr(2)); // Remove the '_:' prefix. see https://github.com/digitalbazaar/jsonld.js/issues/244\r\n        case \"Literal\":\r\n            return DataFactory.literal(term.value, term.language || term.datatype);\r\n        case \"DefaultGraph\":\r\n            return DataFactory.defaultGraph();\r\n        default:\r\n            throw Error(`unknown termType: ${term.termType}`);\r\n    }\r\n}\n\n//\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even\r\n * in a non-major release.\r\n * ```\r\n * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.\r\n *\r\n * @returns A Parser object.\r\n * @since 1.15.0\r\n */\r\nconst getTurtleParser = () => {\r\n    const onQuadCallbacks = [];\r\n    const onCompleteCallbacks = [];\r\n    const onErrorCallbacks = [];\r\n    return {\r\n        onQuad: (callback) => {\r\n            onQuadCallbacks.push(callback);\r\n        },\r\n        onError: (callback) => {\r\n            onErrorCallbacks.push(callback);\r\n        },\r\n        onComplete: (callback) => {\r\n            onCompleteCallbacks.push(callback);\r\n        },\r\n        parse: async (source, resourceInfo) => {\r\n            const parser = await getParser(getSourceUrl(resourceInfo));\r\n            parser.parse(source, (error, quad) => {\r\n                if (error) {\r\n                    onErrorCallbacks.forEach((callback) => callback(error));\r\n                }\r\n                else if (quad) {\r\n                    onQuadCallbacks.forEach((callback) => callback(quad));\r\n                }\r\n                else {\r\n                    onCompleteCallbacks.forEach((callback) => callback());\r\n                }\r\n            });\r\n        },\r\n    };\r\n};\r\nasync function getParser(baseIri) {\r\n    return new n3.Parser({ format: \"text/turtle\", baseIRI: baseIri });\r\n}\r\n/**\r\n * @param quads Triples that should be serialised to Turtle\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nasync function triplesToTurtle(quads) {\r\n    const format = \"text/turtle\";\r\n    const writer = new n3.Writer({ format });\r\n    // Remove any potentially lingering references to Named Graphs in Quads;\r\n    // they'll be determined by the URL the Turtle will be sent to:\r\n    const triples = quads.map((quad) => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));\r\n    writer.addQuads(triples);\r\n    const writePromise = new Promise((resolve, reject) => {\r\n        writer.end((error, result) => {\r\n            /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n    const rawTurtle = await writePromise;\r\n    return rawTurtle;\r\n}\n\n//\r\n/** @hidden For internal use only. */\r\nfunction internal_getReadableValue(value) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    if (isNamedNode(value)) {\r\n        return `<${value.value}> (URL)`;\r\n    }\r\n    if (isLiteral(value)) {\r\n        /* istanbul ignore if: thingAsMarkdown always instantiates a NamedNode, so we can't hit this code path in tests. */\r\n        if (!isNamedNode(value.datatype)) {\r\n            return `[${value.value}] (RDF/JS Literal of unknown type)`;\r\n        }\r\n        let val;\r\n        switch (value.datatype.value) {\r\n            case xmlSchemaTypes.boolean:\r\n                val =\r\n                    (_b = (_a = deserializeBoolean(value.value)) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : `Invalid data: \\`${value.value}\\``;\r\n                return `${val} (boolean)`;\r\n            case xmlSchemaTypes.dateTime:\r\n                val =\r\n                    (_d = (_c = deserializeDatetime(value.value)) === null || _c === void 0 ? void 0 : _c.toUTCString()) !== null && _d !== void 0 ? _d : `Invalid data: \\`${value.value}\\``;\r\n                return `${val} (datetime)`;\r\n            case xmlSchemaTypes.decimal:\r\n                val =\r\n                    (_f = (_e = deserializeDecimal(value.value)) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : `Invalid data: \\`${value.value}\\``;\r\n                return `${val} (decimal)`;\r\n            case xmlSchemaTypes.integer:\r\n                val =\r\n                    (_h = (_g = deserializeInteger(value.value)) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : `Invalid data: \\`${value.value}\\``;\r\n                return `${val} (integer)`;\r\n            case xmlSchemaTypes.langString:\r\n                return `\"${value.value}\" (${value.language} string)`;\r\n            case xmlSchemaTypes.string:\r\n                return `\"${value.value}\" (string)`;\r\n            default:\r\n                return `[${value.value}] (RDF/JS Literal of type: \\`${value.datatype.value}\\`)`;\r\n        }\r\n    }\r\n    /* istanbul ignore else: thingAsMarkdown doesn't generate other Nodes, so we can't hit this path in tests. */\r\n    if (value.termType === \"BlankNode\") {\r\n        return `[${value.value}] (RDF/JS BlankNode)`;\r\n    }\r\n    /* istanbul ignore next: thingAsMarkdown doesn't generate Quad Nodes, so we can't hit this path in tests. */\r\n    if (value.termType === \"Quad\") {\r\n        return `??? (nested RDF* Quad)`;\r\n    }\r\n    /* istanbul ignore else: The if statements are exhaustive; if not, TypeScript will complain. */\r\n    /* istanbul ignore next: thingAsMarkdown doesn't generate Variable Nodes, so we can't hit this path in tests. */\r\n    if (value.termType === \"Variable\") {\r\n        return `?${value.value} (RDF/JS Variable)`;\r\n    }\r\n    /* istanbul ignore next: The if statements are exhaustive; if not, TypeScript will complain. */\r\n    return value;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nfunction internal_throwIfNotThing(thing) {\r\n    if (!isThing(thing)) {\r\n        throw new ThingExpectedError(thing);\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n * @param solidDataset\r\n */\r\nfunction internal_addAdditionsToChangeLog(solidDataset, additions) {\r\n    const changeLog = hasChangelog(solidDataset)\r\n        ? solidDataset.internal_changeLog\r\n        : /* istanbul ignore next: This function always gets called after addDeletionsToChangeLog, so the ChangeLog always already exists in tests: */\r\n            { additions: [], deletions: [] };\r\n    const [newAdditions, newDeletions] = additions\r\n        .filter((addition) => !containsBlankNode(addition))\r\n        .reduce(([additionsAcc, deletionsAcc], addition) => {\r\n        const existingDeletion = deletionsAcc.find((deletion) => deletion.equals(addition));\r\n        if (typeof existingDeletion !== \"undefined\") {\r\n            return [\r\n                additionsAcc,\r\n                deletionsAcc.filter((deletion) => !deletion.equals(addition)),\r\n            ];\r\n        }\r\n        return [additionsAcc.concat(addition), deletionsAcc];\r\n    }, [changeLog.additions, changeLog.deletions]);\r\n    return freeze(Object.assign(Object.assign({}, solidDataset), { internal_changeLog: {\r\n            additions: newAdditions,\r\n            deletions: newDeletions,\r\n        } }));\r\n}\r\n/**\r\n * @hidden\r\n * @param solidDataset\r\n */\r\nfunction internal_addDeletionsToChangeLog(solidDataset, deletions) {\r\n    const changeLog = hasChangelog(solidDataset)\r\n        ? solidDataset.internal_changeLog\r\n        : { additions: [], deletions: [] };\r\n    const [newAdditions, newDeletions] = deletions\r\n        .filter((deletion) => !containsBlankNode(deletion))\r\n        .reduce(([additionsAcc, deletionsAcc], deletion) => {\r\n        const existingAddition = additionsAcc.find((addition) => addition.equals(deletion));\r\n        if (typeof existingAddition !== \"undefined\") {\r\n            return [\r\n                additionsAcc.filter((addition) => !addition.equals(deletion)),\r\n                deletionsAcc,\r\n            ];\r\n        }\r\n        return [additionsAcc, deletionsAcc.concat(deletion)];\r\n    }, [changeLog.additions, changeLog.deletions]);\r\n    return freeze(Object.assign(Object.assign({}, solidDataset), { internal_changeLog: {\r\n            additions: newAdditions,\r\n            deletions: newDeletions,\r\n        } }));\r\n}\r\n/**\r\n * Enforces the presence of a Changelog for a given dataset. If a changelog is\r\n * already present, it is unchanged. Otherwise, an empty changelog is created.\r\n * @hidden\r\n * @param solidDataset\r\n */\r\nfunction internal_withChangeLog(solidDataset) {\r\n    const newSolidDataset = hasChangelog(solidDataset)\r\n        ? solidDataset\r\n        : freeze(Object.assign(Object.assign({}, solidDataset), { internal_changeLog: { additions: [], deletions: [] } }));\r\n    return newSolidDataset;\r\n}\r\n/**\r\n * We don't currently support reading and writing Blank Nodes, so this function can be used to skip those Quads.\r\n *\r\n * This is needed because we cannot reconcile Blank Nodes in additions and\r\n * deletions. Down the road, we should do a diff before saving a SolidDataset\r\n * against a saved copy of the originally-fetched one, based on our own data\r\n * structures, which should make it easier to reconcile.\r\n */\r\nfunction containsBlankNode(quad) {\r\n    return (quad.subject.termType === \"BlankNode\" ||\r\n        quad.object.termType === \"BlankNode\");\r\n}\n\n//\r\n/**\r\n * Returns the URLs of all Properties that the given [[Thing ]]has values for.b\r\n *\r\n * @param thing The [[Thing]] of which to get that Property URLs that have a value.\r\n * @returns The URLs of the Properties for which values are defined for the given Thing.\r\n * @hidden This is an advanced API that should not be needed for most Solid use cases. If you do find yourself needing this, please file a feature request sharing your use case.\r\n */\r\nfunction getPropertyAll(thing) {\r\n    return Object.keys(thing.predicates).filter((predicate) => getTerm(thing, predicate) !== null);\r\n}\r\n/**\r\n * Returns the URL value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type URL, returns null.\r\n * If the Property has multiple URL values, returns one of its URL values.\r\n *\r\n * @param thing The [[Thing]] to read a URL value from.\r\n * @param property The Property whose URL value to return.\r\n * @returns A URL value for the given Property if present, or null if the Property is not present or the value is not of type URL.\r\n */\r\nfunction getUrl(thing, property) {\r\n    var _a, _b, _c;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateUrl = internal_toIriString(property);\r\n    const firstUrl = (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : null;\r\n    if (firstUrl === null) {\r\n        return null;\r\n    }\r\n    return isLocalNodeIri(firstUrl) ? `#${getLocalNodeName(firstUrl)}` : firstUrl;\r\n}\r\n/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */\r\nconst getIri = getUrl;\r\n/**\r\n * Returns the URL values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type URL, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the URL values from.\r\n * @param property The Property whose URL values to return.\r\n * @returns An array of URL values for the given Property.\r\n */\r\nfunction getUrlAll(thing, property) {\r\n    var _a, _b, _c;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateUrl = internal_toIriString(property);\r\n    return ((_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.map((iri) => isLocalNodeIri(iri) ? `#${getLocalNodeName(iri)}` : iri)) !== null && _c !== void 0 ? _c : []);\r\n}\r\n/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */\r\nconst getIriAll = getUrlAll;\r\n/**\r\n * Returns the boolean value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type boolean, returns null.\r\n * If the Property has multiple boolean values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a boolean value from.\r\n * @param property The Property whose boolean value to return.\r\n * @returns A boolean value for the given Property if present, or null if the Property is not present or the value is not of type boolean.\r\n */\r\nfunction getBoolean(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeBoolean(literalString);\r\n}\r\n/**\r\n * Returns the boolean values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type boolean, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the boolean values from.\r\n * @param property The Property whose boolean values to return.\r\n * @returns An array of boolean values for the given Property.\r\n */\r\nfunction getBooleanAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);\r\n    return literalStrings\r\n        .map(deserializeBoolean)\r\n        .filter((possibleBoolean) => possibleBoolean !== null);\r\n}\r\n/**\r\n * Returns the datetime value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type datetime, returns null.\r\n * If the Property has multiple datetime values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a datetime value from.\r\n * @param property The Property whose datetime value to return.\r\n * @returns A datetime value for the given Property if present, or null if the Property is not present or the value is not of type datetime.\r\n */\r\nfunction getDatetime(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDatetime(literalString);\r\n}\r\n/**\r\n * Returns the datetime values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type datetime, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the datetime values from.\r\n * @param property The Property whose datetime values to return.\r\n * @returns An array of datetime values for the given Property.\r\n */\r\nfunction getDatetimeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    return literalStrings\r\n        .map(deserializeDatetime)\r\n        .filter((potentialDatetime) => potentialDatetime !== null);\r\n}\r\n/**\r\n * Returns the date value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type date, returns null.\r\n * If the Property has multiple date values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a date value from.\r\n * @param property The Property whose date value to return.\r\n * @returns A date value for the given Property if present, or null if the Property is not present or the value is not of type date.\r\n * @since 1.10.0\r\n */\r\nfunction getDate(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.date);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDate(literalString);\r\n}\r\n/**\r\n * Returns the date values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type date, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the date values from.\r\n * @param property The Property whose date values to return.\r\n * @returns An array of date values for the given Property.\r\n * @since 1.10.0\r\n */\r\nfunction getDateAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.date);\r\n    return literalStrings\r\n        .map(deserializeDate)\r\n        .filter((potentialDate) => potentialDate !== null);\r\n}\r\n/**\r\n * Returns the time value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type time, returns null.\r\n * If the Property has multiple time values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a time value from.\r\n * @param property The Property whose time value to return.\r\n * @returns A time value for the given Property if present, or null if the Property is not present or the value is not of type time.\r\n * @since 1.10.0\r\n */\r\nfunction getTime(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.time);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeTime(literalString);\r\n}\r\n/**\r\n * Returns the time values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type time, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the time values from.\r\n * @param property The Property whose time values to return.\r\n * @returns An array of time values for the given Property.\r\n * @since 1.10.0\r\n */\r\nfunction getTimeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.time);\r\n    return literalStrings\r\n        .map(deserializeTime)\r\n        .filter((potentialTime) => potentialTime !== null);\r\n}\r\n/**\r\n * Returns the decimal value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type decimal, returns null.\r\n * If the Property has multiple decimal values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a decimal value from.\r\n * @param property The Property whose decimal value to return.\r\n * @returns A decimal value for the given Property if present, or null if the Property is not present or the value is not of type decimal.\r\n */\r\nfunction getDecimal(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDecimal(literalString);\r\n}\r\n/**\r\n * Returns the decimal values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type decimal, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the decimal values from.\r\n * @param property The Property whose decimal values to return.\r\n * @returns An array of decimal values for the given Property.\r\n */\r\nfunction getDecimalAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);\r\n    return literalStrings\r\n        .map((literalString) => deserializeDecimal(literalString))\r\n        .filter((potentialDecimal) => potentialDecimal !== null);\r\n}\r\n/**\r\n * Returns the integer value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type integer, returns null.\r\n * If the Property has multiple integer values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read an integer value from.\r\n * @param property The Property whose integer value to return.\r\n * @returns A integer value for the given Property if present, or null if the Property is not present or the value is not of type datetime.\r\n */\r\nfunction getInteger(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeInteger(literalString);\r\n}\r\n/**\r\n * Returns the integer values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type integer, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the integer values from.\r\n * @param property The Property whose integer values to return.\r\n * @returns An array of integer values for the given Property.\r\n */\r\nfunction getIntegerAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);\r\n    return literalStrings\r\n        .map((literalString) => deserializeInteger(literalString))\r\n        .filter((potentialInteger) => potentialInteger !== null);\r\n}\r\n/**\r\n * Returns the English (language tag \"en\") string value of the specified Property from a [[Thing]].\r\n * If the Property is not present as a string in English, returns null.\r\n * If the Property has multiple English string values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @returns An English string value for the given Property if present, or null otherwise.\r\n * @since 1.13.0\r\n */\r\nfunction getStringEnglish(thing, property) {\r\n    return getStringWithLocale(thing, property, \"en\");\r\n}\r\n/**\r\n * Returns the localized string value of the specified Property from a [[Thing]].\r\n * If the Property is not present as a string in the specified locale, returns null.\r\n * If the Property has multiple string values for the specified locale, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @param locale The desired locale for the string value.\r\n * @returns A localised string value for the given Property if present in the specified `locale`, or null otherwise.\r\n */\r\nfunction getStringWithLocale(thing, property, locale) {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    const existingLocales = Object.keys(langStrings);\r\n    const matchingLocale = existingLocales.find((existingLocale) => existingLocale.toLowerCase() === locale.toLowerCase() &&\r\n        Array.isArray(langStrings[existingLocale]) &&\r\n        langStrings[existingLocale].length > 0);\r\n    return typeof matchingLocale === \"string\"\r\n        ? langStrings[matchingLocale][0]\r\n        : null;\r\n}\r\n/**\r\n * Returns the English (language tag \"en\") string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not an English string, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @returns An array of English string values for the given Property.\r\n */\r\nfunction getStringEnglishAll(thing, property) {\r\n    return getStringWithLocaleAll(thing, property, \"en\");\r\n}\r\n/**\r\n * Returns the localized string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not a string of the specified locale, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The Property whose localised string values to return.\r\n * @param locale The desired locale for the string values.\r\n * @returns An array of localised string values for the given Property.\r\n */\r\nfunction getStringWithLocaleAll(thing, property, locale) {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    const existingLocales = Object.keys(langStrings);\r\n    const matchingLocale = existingLocales.find((existingLocale) => existingLocale.toLowerCase() === locale.toLowerCase() &&\r\n        Array.isArray(langStrings[existingLocale]) &&\r\n        langStrings[existingLocale].length > 0);\r\n    return typeof matchingLocale === \"string\"\r\n        ? [...langStrings[matchingLocale]]\r\n        : [];\r\n}\r\n/**\r\n * Returns all localized string values mapped by the locales for the specified property from the\r\n * specified [[Thing]] (explicitly filters out non-language string literals).\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The Property whose localised string values to return.\r\n * @returns A Map of objects, keyed on locale with the value an array of string values (for that locale).\r\n */\r\nfunction getStringByLocaleAll(thing, property) {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const stringsByLocale = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    return new Map(Object.entries(stringsByLocale).map(([locale, values]) => [\r\n        locale,\r\n        [...values],\r\n    ]));\r\n}\r\n/**\r\n * Returns the string value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type string, returns null.\r\n * If the Property has multiple string values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a string value from.\r\n * @param property The Property whose string value to return.\r\n * @returns A string value for the given Property if present, or null if the Property is not present or the value is not of type string.\r\n */\r\nfunction getStringNoLocale(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalString;\r\n}\r\n/**\r\n * Returns the string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type string, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the string values from.\r\n * @param property The Property whose string values to return.\r\n * @returns An array of string values for the given Property.\r\n */\r\nfunction getStringNoLocaleAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalStrings;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a NamedNode value from.\r\n * @param property The given Property for which you want the NamedNode value.\r\n * @returns A NamedNode value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\r\nfunction getNamedNode(thing, property) {\r\n    const iriString = getIri(thing, property);\r\n    if (iriString === null) {\r\n        return null;\r\n    }\r\n    return DataFactory.namedNode(iriString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the NamedNode values from.\r\n * @param property The given Property for which you want the NamedNode values.\r\n * @returns The NamedNode values for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\r\nfunction getNamedNodeAll(thing, property) {\r\n    const iriStrings = getIriAll(thing, property);\r\n    return iriStrings.map((iriString) => DataFactory.namedNode(iriString));\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a Literal value from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @returns A Literal value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\r\nfunction getLiteral(thing, property) {\r\n    var _a, _b, _c, _d;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    const locales = Object.keys(langStrings);\r\n    if (locales.length > 0) {\r\n        const nonEmptyLocale = locales.find((locale) => Array.isArray(langStrings[locale]) && langStrings[locale].length > 0);\r\n        if (typeof nonEmptyLocale === \"string\") {\r\n            return DataFactory.literal(langStrings[nonEmptyLocale][0], nonEmptyLocale);\r\n        }\r\n    }\r\n    const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};\r\n    const dataTypes = Object.keys(otherLiterals);\r\n    if (dataTypes.length > 0) {\r\n        const nonEmptyDataType = dataTypes.find((dataType) => Array.isArray(otherLiterals[dataType]) &&\r\n            otherLiterals[dataType].length > 0);\r\n        if (typeof nonEmptyDataType === \"string\") {\r\n            return DataFactory.literal(otherLiterals[nonEmptyDataType][0], DataFactory.namedNode(nonEmptyDataType));\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the Literal values from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @returns The Literal values for the given Property.\r\n * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\r\nfunction getLiteralAll(thing, property) {\r\n    var _a, _b, _c, _d;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    let literals = [];\r\n    const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    const locales = Object.keys(langStrings);\r\n    for (const locale of locales) {\r\n        const stringsInLocale = langStrings[locale];\r\n        const localeLiterals = stringsInLocale.map((langString) => DataFactory.literal(langString, locale));\r\n        literals = literals.concat(localeLiterals);\r\n    }\r\n    const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};\r\n    const dataTypes = Object.keys(otherLiterals);\r\n    for (const dataType of dataTypes) {\r\n        const values = otherLiterals[dataType];\r\n        const typeNode = DataFactory.namedNode(dataType);\r\n        const dataTypeLiterals = values.map((value) => DataFactory.literal(value, typeNode));\r\n        literals = literals.concat(dataTypeLiterals);\r\n    }\r\n    return literals;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a raw RDF/JS value from.\r\n * @param property The given Property for which you want the raw value.\r\n * @returns A Term for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\r\nfunction getTerm(thing, property) {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    const namedNode = getNamedNode(thing, property);\r\n    if (namedNode !== null) {\r\n        return namedNode;\r\n    }\r\n    const literal = getLiteral(thing, property);\r\n    if (literal !== null) {\r\n        return literal;\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const blankNodes = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];\r\n    if (blankNodes.length > 0) {\r\n        const blankNodeValue = isBlankNodeId(blankNodes[0])\r\n            ? getBlankNodeValue(blankNodes[0])\r\n            : undefined;\r\n        return DataFactory.blankNode(blankNodeValue);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the raw RDF/JS values from.\r\n * @param property The given Property for which you want the raw values.\r\n * @returns The Terms for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\r\nfunction getTermAll(thing, property) {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodes = getNamedNodeAll(thing, property);\r\n    const literals = getLiteralAll(thing, property);\r\n    const predicateIri = internal_toIriString(property);\r\n    const blankNodeValues = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];\r\n    const blankNodes = blankNodeValues.map((rawBlankNode) => {\r\n        const blankNodeName = isBlankNodeId(rawBlankNode)\r\n            ? getBlankNodeValue(rawBlankNode)\r\n            : undefined;\r\n        return DataFactory.blankNode(blankNodeName);\r\n    });\r\n    const terms = namedNodes\r\n        .concat(literals)\r\n        .concat(blankNodes);\r\n    return terms;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read a Literal of the given type from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified value for the given Property and type, if present, or null otherwise.\r\n */\r\nfunction getLiteralOfType(thing, property, literalType) {\r\n    var _a, _b, _c, _d;\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    return (_d = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : null;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read the Literals of the given type from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified values for the given Property and type.\r\n */\r\nfunction getLiteralAllOfType(thing, property, literalType) {\r\n    var _a, _b, _c;\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const literalsOfType = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) !== null && _c !== void 0 ? _c : [];\r\n    return [...literalsOfType];\r\n}\n\n//\r\n/**\r\n * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.\r\n * @param thingUrl The URL of the desired [[Thing]].\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThing(solidDataset, thingUrl, options = {}) {\r\n    var _a;\r\n    if (!internal_isValidUrl(thingUrl)) {\r\n        throw new ValidThingUrlExpectedError(thingUrl);\r\n    }\r\n    const graph = typeof options.scope !== \"undefined\"\r\n        ? internal_toIriString(options.scope)\r\n        : \"default\";\r\n    const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};\r\n    const thingIri = internal_toIriString(thingUrl);\r\n    const resolvedThingIri = isLocalNodeIri(thingIri) && hasServerResourceInfo(solidDataset)\r\n        ? resolveLocalIri(getLocalNodeName(thingIri), getSourceUrl(solidDataset))\r\n        : thingIri;\r\n    const thing = thingsByIri[resolvedThingIri];\r\n    if (typeof thing === \"undefined\") {\r\n        return null;\r\n    }\r\n    return thing;\r\n}\r\n/**\r\n * Get all [[Thing]]s in a [[SolidDataset]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThingAll(solidDataset, options = { acceptBlankNodes: false }) {\r\n    var _a;\r\n    const graph = typeof options.scope !== \"undefined\"\r\n        ? internal_toIriString(options.scope)\r\n        : \"default\";\r\n    const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};\r\n    return Object.values(thingsByIri).filter((thing) => !isBlankNodeId(thing.url) || options.acceptBlankNodes);\r\n}\r\n/**\r\n * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.\r\n *\r\n * @param solidDataset The SolidDataset to insert a Thing into.\r\n * @param thing The Thing to insert into the given SolidDataset.\r\n * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.\r\n */\r\nfunction setThing(solidDataset, thing) {\r\n    var _a;\r\n    const thingIri = isThingLocal(thing) && hasServerResourceInfo(solidDataset)\r\n        ? resolveLocalIri(getLocalNodeName(thing.url), getSourceUrl(solidDataset))\r\n        : thing.url;\r\n    const defaultGraph = solidDataset.graphs.default;\r\n    const updatedDefaultGraph = freeze(Object.assign(Object.assign({}, defaultGraph), { [thingIri]: freeze(Object.assign(Object.assign({}, thing), { url: thingIri })) }));\r\n    const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), { default: updatedDefaultGraph }));\r\n    const subjectNode = DataFactory.namedNode(thingIri);\r\n    const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;\r\n    const deletions = typeof deletedThingPredicates !== \"undefined\"\r\n        ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph())\r\n        : [];\r\n    const additions = subjectToRdfJsQuads(thing.predicates, subjectNode, DataFactory.defaultGraph());\r\n    return internal_addAdditionsToChangeLog(internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), { graphs: updatedGraphs })), deletions), additions);\r\n}\r\n/**\r\n * Remove a Thing from a SolidDataset.\r\n *\r\n * @param solidDataset The SolidDataset to remove a Thing from.\r\n * @param thing The Thing to remove from `solidDataset`.\r\n * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.\r\n */\r\nfunction removeThing(solidDataset, thing) {\r\n    var _a;\r\n    let thingIri;\r\n    if (isNamedNode(thing)) {\r\n        thingIri = thing.value;\r\n    }\r\n    else if (typeof thing === \"string\") {\r\n        thingIri =\r\n            isLocalNodeIri(thing) && hasServerResourceInfo(solidDataset)\r\n                ? resolveLocalIri(getLocalNodeName(thing), getSourceUrl(solidDataset))\r\n                : thing;\r\n    }\r\n    else if (isThingLocal(thing)) {\r\n        thingIri = thing.url;\r\n    }\r\n    else {\r\n        thingIri = asIri(thing);\r\n    }\r\n    const defaultGraph = solidDataset.graphs.default;\r\n    const updatedDefaultGraph = Object.assign({}, defaultGraph);\r\n    delete updatedDefaultGraph[thingIri];\r\n    const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), { default: freeze(updatedDefaultGraph) }));\r\n    const subjectNode = DataFactory.namedNode(thingIri);\r\n    const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;\r\n    const deletions = typeof deletedThingPredicates !== \"undefined\"\r\n        ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph())\r\n        : [];\r\n    return internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), { graphs: updatedGraphs })), deletions);\r\n}\r\nfunction createThing(options = {}) {\r\n    var _a;\r\n    if (typeof options.url !== \"undefined\") {\r\n        const { url } = options;\r\n        if (!internal_isValidUrl(url)) {\r\n            throw new ValidThingUrlExpectedError(url);\r\n        }\r\n        const thing = freeze({\r\n            type: \"Subject\",\r\n            predicates: freeze({}),\r\n            url,\r\n        });\r\n        return thing;\r\n    }\r\n    const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();\r\n    const localNodeIri = getLocalNodeIri(name);\r\n    const thing = freeze({\r\n        type: \"Subject\",\r\n        predicates: freeze({}),\r\n        url: localNodeIri,\r\n    });\r\n    return thing;\r\n}\r\n/**\r\n * @param input An value that might be a [[Thing]].\r\n * @returns Whether `input` is a Thing.\r\n * @since 0.2.0\r\n */\r\nfunction isThing(input) {\r\n    return (typeof input === \"object\" &&\r\n        input !== null &&\r\n        typeof input.type === \"string\" &&\r\n        input.type === \"Subject\");\r\n}\r\nfunction asUrl(thing, baseUrl) {\r\n    if (isThingLocal(thing)) {\r\n        if (typeof baseUrl === \"undefined\") {\r\n            throw new Error(\"The URL of a Thing that has not been persisted cannot be determined without a base URL.\");\r\n        }\r\n        return resolveLocalIri(getLocalNodeName(thing.url), baseUrl);\r\n    }\r\n    return thing.url;\r\n}\r\n/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */\r\nconst asIri = asUrl;\r\n/**\r\n * Gets a human-readable representation of the given Thing to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param thing The Thing to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\r\nfunction thingAsMarkdown(thing) {\r\n    let thingAsMarkdown = \"\";\r\n    if (isThingLocal(thing)) {\r\n        thingAsMarkdown += `## Thing (no URL yet — identifier: \\`#${getLocalNodeName(thing.url)}\\`)\\n`;\r\n    }\r\n    else {\r\n        thingAsMarkdown += `## Thing: ${thing.url}\\n`;\r\n    }\r\n    const predicateIris = Object.keys(thing.predicates);\r\n    if (predicateIris.length === 0) {\r\n        thingAsMarkdown += \"\\n<empty>\\n\";\r\n    }\r\n    else {\r\n        for (const predicate of predicateIris) {\r\n            thingAsMarkdown += `\\nProperty: ${predicate}\\n`;\r\n            const values = getTermAll(thing, predicate);\r\n            thingAsMarkdown += values.reduce((acc, value) => {\r\n                return `${acc}- ${internal_getReadableValue(value)}\\n`;\r\n            }, \"\");\r\n        }\r\n    }\r\n    return thingAsMarkdown;\r\n}\r\n/**\r\n * @param thing The [[Thing]] of which a URL might or might not be known.\r\n * @return `true` if `thing` has no known URL yet.\r\n * @since 1.7.0\r\n */\r\nfunction isThingLocal(thing) {\r\n    return isLocalNodeIri(thing.url);\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a [[Thing]] but received something else.\r\n * @since 1.2.0\r\n */\r\nclass ThingExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const message = `Expected a Thing, but received: [${receivedValue}].`;\r\n        super(message);\r\n        this.receivedValue = receivedValue;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a property but received something else.\r\n */\r\nclass ValidPropertyUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL to identify a property, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedProperty = value;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL value but received something else.\r\n */\r\nclass ValidValueUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL value, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a [[Thing]] but received something else.\r\n */\r\nclass ValidThingUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL to identify a Thing, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\r\n/**\r\n * Generate a string that can be used as the unique identifier for a Thing\r\n *\r\n * This function works by starting with a date string (so that Things can be\r\n * sorted chronologically), followed by a random number generated by taking a\r\n * random number between 0 and 1, and cutting off the `0.`.\r\n *\r\n * @internal\r\n * @returns An string that's likely to be unique\r\n */\r\nconst generateName = () => {\r\n    return (Date.now().toString() + Math.random().toString().substring(\"0.\".length));\r\n};\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n/**\r\n * This function normalizes IRIs as managed by the server to ease accurate comparison.\r\n * @param iri\r\n * @hidden\r\n */\r\nfunction normalizeServerSideIri(iri) {\r\n    const iriObj = new URL(iri);\r\n    iriObj.hash = \"\";\r\n    return iriObj.href;\r\n}\n\n//\r\n/**\r\n * Initialise a new [[SolidDataset]] in memory.\r\n *\r\n * @returns An empty [[SolidDataset]].\r\n */\r\nfunction createSolidDataset() {\r\n    return freeze({\r\n        type: \"Dataset\",\r\n        graphs: {\r\n            default: {},\r\n        },\r\n    });\r\n}\r\n/**\r\n * @hidden This interface is not exposed yet until we've tried it out in practice.\r\n */\r\nasync function responseToSolidDataset(response, parseOptions = {}) {\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the SolidDataset at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = responseToResourceInfo(response);\r\n    const parsers = Object.assign({ \"text/turtle\": getTurtleParser() }, parseOptions.parsers);\r\n    const contentType = getContentType$1(resourceInfo);\r\n    if (contentType === null) {\r\n        throw new Error(`Could not determine the content type of the Resource at [${getSourceUrl(resourceInfo)}].`);\r\n    }\r\n    const mimeType = contentType.split(\";\")[0];\r\n    const parser = parsers[mimeType];\r\n    if (typeof parser === \"undefined\") {\r\n        throw new Error(`The Resource at [${getSourceUrl(resourceInfo)}] has a MIME type of [${mimeType}], but the only parsers available are for the following MIME types: [${Object.keys(parsers).join(\", \")}].`);\r\n    }\r\n    const data = await response.text();\r\n    const parsingPromise = new Promise((resolve, reject) => {\r\n        let solidDataset = freeze({\r\n            graphs: freeze({ default: freeze({}) }),\r\n            type: \"Dataset\",\r\n        });\r\n        // While Quads without Blank Nodes can be added to the SolidDataset as we\r\n        // encounter them, to parse Quads with Blank Nodes, we'll have to wait until\r\n        // we've seen all the Quads, so that we can reconcile equal Blank Nodes.\r\n        const quadsWithBlankNodes = [];\r\n        const allQuads = [];\r\n        parser.onError((error) => {\r\n            reject(new Error(`Encountered an error parsing the Resource at [${getSourceUrl(resourceInfo)}] with content type [${contentType}]: ${error}`));\r\n        });\r\n        parser.onQuad((quad) => {\r\n            allQuads.push(quad);\r\n            if (quad.subject.termType === \"BlankNode\" ||\r\n                quad.object.termType === \"BlankNode\") {\r\n                // Quads with Blank Nodes will be parsed when all Quads are known,\r\n                // so that equal Blank Nodes can be reconciled:\r\n                quadsWithBlankNodes.push(quad);\r\n            }\r\n            else {\r\n                solidDataset = addRdfJsQuadToDataset(solidDataset, quad);\r\n            }\r\n        });\r\n        parser.onComplete(async () => {\r\n            // If a Resource contains more than this number of Blank Nodes,\r\n            // we consider the detection of chains (O(n^2), I think) to be too\r\n            // expensive, and just incorporate them as regular Blank Nodes with\r\n            // non-deterministic, ad-hoc identifiers into the SolidDataset:\r\n            const maxBlankNodesToDetectChainsFor = 20;\r\n            // Some Blank Nodes only serve to use a set of Quads as the Object for a\r\n            // single Subject. Those Quads will be added to the SolidDataset when\r\n            // their Subject's Blank Node is encountered in the Object position.\r\n            const chainBlankNodes = quadsWithBlankNodes.length <= maxBlankNodesToDetectChainsFor\r\n                ? getChainBlankNodes(quadsWithBlankNodes)\r\n                : [];\r\n            const quadsWithoutChainBlankNodeSubjects = quadsWithBlankNodes.filter((quad) => chainBlankNodes.every((chainBlankNode) => !chainBlankNode.equals(quad.subject)));\r\n            solidDataset = quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {\r\n                otherQuads: allQuads,\r\n                chainBlankNodes,\r\n            }), solidDataset);\r\n            const solidDatasetWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));\r\n            resolve(solidDatasetWithResourceInfo);\r\n        });\r\n        parser.parse(data, resourceInfo);\r\n    });\r\n    return parsingPromise;\r\n}\r\n/**\r\n * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).\r\n *\r\n * Note that the URL of a container ends with a [trailing slash \"/\"](https://solidproject.org/TR/protocol#uri).\r\n * If it is missing, some libraries will add it automatically, which may result in additional round-trips, possibly including\r\n * authentication errors ([more information](https://github.com/inrupt/solid-client-js/issues/1216#issuecomment-904703695)).\r\n *\r\n * @param url URL to fetch a [[SolidDataset]] from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.\r\n */\r\nasync function getSolidDataset(url, options = internal_defaultFetchOptions) {\r\n    var _a;\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const parserContentTypes = Object.keys((_a = options.parsers) !== null && _a !== void 0 ? _a : {});\r\n    const acceptedContentTypes = parserContentTypes.length > 0\r\n        ? parserContentTypes.join(\", \")\r\n        : \"text/turtle\";\r\n    const response = await config.fetch(url, {\r\n        headers: {\r\n            Accept: acceptedContentTypes,\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the Resource at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const solidDataset = await responseToSolidDataset(response, options);\r\n    return solidDataset;\r\n}\r\n/**\r\n * Create a SPARQL UPDATE Patch request from a [[SolidDataset]] with a changelog.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PATCH request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a SPARQL UPDATE.\r\n * @hidden\r\n */\r\nasync function prepareSolidDatasetUpdate(solidDataset) {\r\n    const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0\r\n        ? `DELETE DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n        : \"\";\r\n    const insertStatement = solidDataset.internal_changeLog.additions.length > 0\r\n        ? `INSERT DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n        : \"\";\r\n    return {\r\n        method: \"PATCH\",\r\n        body: `${deleteStatement} ${insertStatement}`,\r\n        headers: {\r\n            \"Content-Type\": \"application/sparql-update\",\r\n        },\r\n    };\r\n}\r\n/**\r\n * Create a Put request to write a locally created [[SolidDataset]] to a Pod.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PUT request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a serialization of the [[SolidDataset]].\r\n * @hidden\r\n */\r\nasync function prepareSolidDatasetCreation(solidDataset) {\r\n    return {\r\n        method: \"PUT\",\r\n        body: await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes)),\r\n        headers: {\r\n            \"Content-Type\": \"text/turtle\",\r\n            \"If-None-Match\": \"*\",\r\n            Link: `<${ldp.Resource}>; rel=\"type\"`,\r\n        },\r\n    };\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).\r\n *\r\n * A SolidDataset keeps track of the data changes compared to the data in the Pod; i.e.,\r\n * the changelog tracks both the old value and new values of the property being modified. This\r\n * function applies the changes to the current SolidDataset. If the old value specified in the\r\n * changelog does not correspond to the value currently in the Pod, this function will throw an\r\n * error (common issues are listed in [the documentation](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/error-codes/)).\r\n *\r\n * The SolidDataset returned by this function will contain the data sent to the Pod, and a ChangeLog\r\n * up-to-date with the saved data. Note that if the data on the server was modified in between the\r\n * first fetch and saving it, the updated data will not be reflected in the returned SolidDataset.\r\n * To make sure you have the latest data, call [[getSolidDataset]] again after saving the data.\r\n *\r\n * The Solid server will create any intermediary Containers that do not exist yet, so they do not\r\n * need to be created in advance. For example, if the target URL is\r\n * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,\r\n * it will exist after this function resolves successfully.\r\n *\r\n * @param url URL to save `solidDataset` to.\r\n * @param solidDataset The [[SolidDataset]] to save.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.\r\n */\r\nasync function saveSolidDatasetAt(url, solidDataset, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const datasetWithChangelog = internal_withChangeLog(solidDataset);\r\n    const requestInit = isUpdate(datasetWithChangelog, url)\r\n        ? await prepareSolidDatasetUpdate(datasetWithChangelog)\r\n        : await prepareSolidDatasetCreation(datasetWithChangelog);\r\n    const response = await config.fetch(url, requestInit);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        const diagnostics = isUpdate(datasetWithChangelog, url)\r\n            ? `The changes that were sent to the Pod are listed below.\\n\\n${changeLogAsMarkdown(datasetWithChangelog)}`\r\n            : `The SolidDataset that was sent to the Pod is listed below.\\n\\n${solidDatasetAsMarkdown(datasetWithChangelog)}`;\r\n        throw new FetchError(`Storing the Resource at [${url}] failed: [${response.status}] [${response.statusText}].\\n\\n${diagnostics}`, response);\r\n    }\r\n    const resourceInfo = Object.assign(Object.assign({}, internal_parseResourceInfo(response)), { isRawData: false });\r\n    const storedDataset = freeze(Object.assign(Object.assign({}, solidDataset), { internal_changeLog: { additions: [], deletions: [] }, internal_resourceInfo: resourceInfo }));\r\n    const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);\r\n    return storedDatasetWithResolvedIris;\r\n}\r\n/**\r\n * Deletes the SolidDataset at a given URL.\r\n *\r\n * If operating on a container, the container must be empty otherwise a 409 CONFLICT will be raised.\r\n *\r\n * @param solidDataset The URL of the SolidDataset to delete or the SolidDataset itself (if it has ResourceInfo).\r\n * @since 0.6.0\r\n */\r\nasync function deleteSolidDataset(solidDataset, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const url = hasResourceInfo(solidDataset)\r\n        ? internal_toIriString(getSourceUrl(solidDataset))\r\n        : internal_toIriString(solidDataset);\r\n    const response = await config.fetch(url, { method: \"DELETE\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the SolidDataset at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n}\r\n/**\r\n * Create a Container at the given URL. Some content may optionally be specified,\r\n * e.g. to add metadata describing the container.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to, or because the Container already exists.\r\n *\r\n * Note that a Solid server will automatically create the necessary Containers when storing a\r\n * Resource; i.e. there is no need to call this function if it is immediately followed by\r\n * [[saveSolidDatasetAt]] or [[overwriteFile]].\r\n *\r\n * @param url URL of the empty Container that is to be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @param solidDataset Optional parameter - if provided we use this dataset as the body of the HTT request, meaning it's data is included in the Container resource.\r\n * @since 0.2.0\r\n */\r\nasync function createContainerAt(url, options = internal_defaultFetchOptions) {\r\n    var _a;\r\n    url = internal_toIriString(url);\r\n    url = url.endsWith(\"/\") ? url : `${url}/`;\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, {\r\n        method: \"PUT\",\r\n        body: config.initialContent\r\n            ? await triplesToTurtle(toRdfJsQuads(config.initialContent).map(getNamedNodesForLocalNodes))\r\n            : undefined,\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n            \"Content-Type\": \"text/turtle\",\r\n            \"If-None-Match\": \"*\",\r\n            // This header should not be required to create a Container,\r\n            // but ESS currently expects it:\r\n            Link: `<${ldp.BasicContainer}>; rel=\"type\"`,\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        const containerType = config.initialContent === undefined ? \"empty\" : \"non-empty\";\r\n        throw new FetchError(`Creating the ${containerType} Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const containerDataset = freeze(Object.assign(Object.assign({}, ((_a = options.initialContent) !== null && _a !== void 0 ? _a : createSolidDataset())), { internal_changeLog: { additions: [], deletions: [] }, internal_resourceInfo: resourceInfo }));\r\n    return containerDataset;\r\n}\r\nfunction isSourceIriEqualTo(dataset, iri) {\r\n    return (normalizeServerSideIri(dataset.internal_resourceInfo.sourceIri) ===\r\n        normalizeServerSideIri(iri));\r\n}\r\nfunction isUpdate(solidDataset, url) {\r\n    return (hasChangelog(solidDataset) &&\r\n        hasResourceInfo(solidDataset) &&\r\n        typeof solidDataset.internal_resourceInfo.sourceIri === \"string\" &&\r\n        isSourceIriEqualTo(solidDataset, url));\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.\r\n *\r\n * The Container at the given URL should already exist; if it does not, you can initialise it first\r\n * using [[createContainerAt]], or directly save the SolidDataset at the desired location using\r\n * [[saveSolidDatasetAt]].\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[saveSolidDatasetAt]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param containerUrl URL of the Container in which to create a new Resource.\r\n * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the saved data. The Promise rejects if the save failed.\r\n */\r\nasync function saveSolidDatasetInContainer(containerUrl, solidDataset, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    containerUrl = internal_toIriString(containerUrl);\r\n    const rawTurtle = await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes));\r\n    const headers = {\r\n        \"Content-Type\": \"text/turtle\",\r\n        Link: `<${ldp.Resource}>; rel=\"type\"`,\r\n    };\r\n    if (options.slugSuggestion) {\r\n        headers.slug = options.slugSuggestion;\r\n    }\r\n    const response = await config.fetch(containerUrl, {\r\n        method: \"POST\",\r\n        body: rawTurtle,\r\n        headers,\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Storing the Resource in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].\\n\\n` +\r\n            `The SolidDataset that was sent to the Pod is listed below.\\n\\n${solidDatasetAsMarkdown(solidDataset)}`, response);\r\n    }\r\n    const internalResourceInfo = internal_parseResourceInfo(response);\r\n    if (!internalResourceInfo.location) {\r\n        throw new Error(\"Could not determine the location of the newly saved SolidDataset.\");\r\n    }\r\n    let resourceIri;\r\n    try {\r\n        // Try to parse the location header as a URL (safe if it's an absolute URL)``\r\n        // This should help determine the container URL if normalisation happened on the server side.\r\n        resourceIri = new URL(internalResourceInfo.location).href;\r\n    }\r\n    catch (e) {\r\n        // If it's a relative URL then, rely on the response.url to construct the sourceIri\r\n        resourceIri = new URL(internalResourceInfo.location, response.url).href;\r\n    }\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: false,\r\n            sourceIri: resourceIri,\r\n        },\r\n    };\r\n    const resourceWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));\r\n    const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);\r\n    return resourceWithResolvedIris;\r\n}\r\n/**\r\n * Create an empty Container inside the Container at the given URL.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to.\r\n *\r\n * The Container in which to create the new Container should itself already exist.\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[createContainerAt]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param containerUrl URL of the Container in which the empty Container is to\r\n * be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch`\r\n * function to make the HTTP request, compatible with the browser-native [fetch\r\n * API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).`options.slugSuggestion`\r\n * accepts a string for your new Container's name.\r\n * @returns A promise that resolves to a SolidDataset with ResourceInfo if\r\n * successful, and that rejects otherwise.\r\n * @since 0.2.0\r\n */\r\nasync function createContainerInContainer(containerUrl, options = internal_defaultFetchOptions) {\r\n    containerUrl = internal_toIriString(containerUrl);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const headers = {\r\n        \"Content-Type\": \"text/turtle\",\r\n        Link: `<${ldp.BasicContainer}>; rel=\"type\"`,\r\n    };\r\n    if (options.slugSuggestion) {\r\n        headers.slug = options.slugSuggestion;\r\n    }\r\n    const response = await config.fetch(containerUrl, {\r\n        method: \"POST\",\r\n        headers,\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Creating an empty Container in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const internalResourceInfo = internal_parseResourceInfo(response);\r\n    if (!internalResourceInfo.location) {\r\n        throw new Error(\"Could not determine the location of the newly created Container.\");\r\n    }\r\n    try {\r\n        // Try to parse the location header as a URL (safe if it's an absolute URL)``\r\n        // This should help determine the container URL if normalisation happened on the server side.\r\n        const sourceIri = new URL(internalResourceInfo.location).toString();\r\n        return freeze(Object.assign(Object.assign({}, createSolidDataset()), { internal_resourceInfo: Object.assign(Object.assign({}, internalResourceInfo), { sourceIri }) }));\r\n    }\r\n    catch (e) {\r\n        // If it's a relative URL then, rely on the response.url to construct the sourceIri\r\n    }\r\n    return freeze(Object.assign(Object.assign({}, createSolidDataset()), { internal_resourceInfo: Object.assign(Object.assign({}, internalResourceInfo), { sourceIri: new URL(internalResourceInfo.location, response.url).href }) }));\r\n}\r\n/**\r\n * Deletes the Container at a given URL.\r\n *\r\n * @param container The URL of the Container to delete or the Container Dataset itself (if it has ResourceInfo).\r\n * @since 0.6.0\r\n */\r\nasync function deleteContainer(container, options = internal_defaultFetchOptions) {\r\n    const url = hasResourceInfo(container)\r\n        ? internal_toIriString(getSourceUrl(container))\r\n        : internal_toIriString(container);\r\n    if (!isContainer(container)) {\r\n        throw new Error(`You're trying to delete the Container at [${url}], but Container URLs should end in a \\`/\\`. Are you sure this is a Container?`);\r\n    }\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, { method: \"DELETE\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n}\r\n/**\r\n * Given a [[SolidDataset]] representing a Container (see [[isContainer]]), fetch the URLs of all\r\n * contained resources.\r\n * If the solidDataset given is not a container, or is missing resourceInfo, throw an error.\r\n *\r\n * @param solidDataset The container from which to fetch all contained Resource URLs.\r\n * @returns A list of URLs, each of which points to a contained Resource of the given SolidDataset.\r\n * @since 1.3.0\r\n */\r\nfunction getContainedResourceUrlAll(solidDataset) {\r\n    const container = getThing(solidDataset, getSourceUrl(solidDataset));\r\n    // See https://www.w3.org/TR/2015/REC-ldp-20150226/#h-ldpc-http_post:\r\n    // > a containment triple MUST be added to the state of the LDPC whose subject is the LDPC URI,\r\n    // > whose predicate is ldp:contains and whose object is the URI for the newly created document\r\n    return container !== null ? getIriAll(container, ldp.contains) : [];\r\n}\r\n/**\r\n * Gets a human-readable representation of the given SolidDataset to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\r\nfunction solidDatasetAsMarkdown(solidDataset) {\r\n    let readableSolidDataset = \"\";\r\n    if (hasResourceInfo(solidDataset)) {\r\n        readableSolidDataset += `# SolidDataset: ${getSourceUrl(solidDataset)}\\n`;\r\n    }\r\n    else {\r\n        readableSolidDataset += `# SolidDataset (no URL yet)\\n`;\r\n    }\r\n    const things = getThingAll(solidDataset);\r\n    if (things.length === 0) {\r\n        readableSolidDataset += \"\\n<empty>\\n\";\r\n    }\r\n    else {\r\n        things.forEach((thing) => {\r\n            readableSolidDataset += `\\n${thingAsMarkdown(thing)}`;\r\n            if (hasChangelog(solidDataset)) {\r\n                readableSolidDataset += `\\n${getReadableChangeLogSummary(solidDataset, thing)}\\n`;\r\n            }\r\n        });\r\n    }\r\n    return readableSolidDataset;\r\n}\r\n/**\r\n * Gets a human-readable representation of the local changes to a Resource to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The Resource of which to get a human-readable representation of the changes applied to it locally.\r\n * @since 0.3.0\r\n */\r\nfunction changeLogAsMarkdown(solidDataset) {\r\n    if (!hasResourceInfo(solidDataset)) {\r\n        return \"This is a newly initialized SolidDataset, so there is no source to compare it to.\";\r\n    }\r\n    if (!hasChangelog(solidDataset) ||\r\n        (solidDataset.internal_changeLog.additions.length === 0 &&\r\n            solidDataset.internal_changeLog.deletions.length === 0)) {\r\n        return (`## Changes compared to ${getSourceUrl(solidDataset)}\\n\\n` +\r\n            `This SolidDataset has not been modified since it was fetched from ${getSourceUrl(solidDataset)}.\\n`);\r\n    }\r\n    let readableChangeLog = `## Changes compared to ${getSourceUrl(solidDataset)}\\n`;\r\n    const changeLogsByThingAndProperty = sortChangeLogByThingAndProperty(solidDataset);\r\n    Object.keys(changeLogsByThingAndProperty).forEach((thingUrl) => {\r\n        readableChangeLog += `\\n### Thing: ${thingUrl}\\n`;\r\n        const changeLogByProperty = changeLogsByThingAndProperty[thingUrl];\r\n        Object.keys(changeLogByProperty).forEach((propertyUrl) => {\r\n            readableChangeLog += `\\nProperty: ${propertyUrl}\\n`;\r\n            const { deleted } = changeLogByProperty[propertyUrl];\r\n            const { added } = changeLogByProperty[propertyUrl];\r\n            if (deleted.length > 0) {\r\n                readableChangeLog += \"- Removed:\\n\";\r\n                readableChangeLog += deleted.reduce((acc, deletedValue) => {\r\n                    return `${acc}  - ${internal_getReadableValue(deletedValue)}\\n`;\r\n                }, \"\");\r\n            }\r\n            if (added.length > 0) {\r\n                readableChangeLog += \"- Added:\\n\";\r\n                readableChangeLog += added.reduce((acc, addedValue) => {\r\n                    return `${acc}  - ${internal_getReadableValue(addedValue)}\\n`;\r\n                }, \"\");\r\n            }\r\n        });\r\n    });\r\n    return readableChangeLog;\r\n}\r\nfunction sortChangeLogByThingAndProperty(solidDataset) {\r\n    const changeLogsByThingAndProperty = {};\r\n    solidDataset.internal_changeLog.deletions.forEach((deletion) => {\r\n        var _a, _b;\r\n        var _c;\r\n        const subjectNode = isLocalNode(deletion.subject)\r\n            ? /* istanbul ignore next: Unsaved deletions should be removed from the additions list instead, so this code path shouldn't be hit: */\r\n                resolveIriForLocalNode(deletion.subject, getSourceUrl(solidDataset))\r\n            : deletion.subject;\r\n        if (!isNamedNode(subjectNode) || !isNamedNode(deletion.predicate)) {\r\n            return;\r\n        }\r\n        const thingUrl = internal_toIriString(subjectNode);\r\n        const propertyUrl = internal_toIriString(deletion.predicate);\r\n        (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : (changeLogsByThingAndProperty[thingUrl] = {});\r\n        (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : (_c[propertyUrl] = {\r\n            added: [],\r\n            deleted: [],\r\n        });\r\n        changeLogsByThingAndProperty[thingUrl][propertyUrl].deleted.push(deletion.object);\r\n    });\r\n    solidDataset.internal_changeLog.additions.forEach((addition) => {\r\n        var _a, _b;\r\n        var _c;\r\n        const subjectNode = isLocalNode(addition.subject)\r\n            ? /* istanbul ignore next: setThing already resolves local Subjects when adding them, so this code path should never be hit. */\r\n                resolveIriForLocalNode(addition.subject, getSourceUrl(solidDataset))\r\n            : addition.subject;\r\n        if (!isNamedNode(subjectNode) || !isNamedNode(addition.predicate)) {\r\n            return;\r\n        }\r\n        const thingUrl = internal_toIriString(subjectNode);\r\n        const propertyUrl = internal_toIriString(addition.predicate);\r\n        (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : (changeLogsByThingAndProperty[thingUrl] = {});\r\n        (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : (_c[propertyUrl] = {\r\n            added: [],\r\n            deleted: [],\r\n        });\r\n        changeLogsByThingAndProperty[thingUrl][propertyUrl].added.push(addition.object);\r\n    });\r\n    return changeLogsByThingAndProperty;\r\n}\r\nfunction getReadableChangeLogSummary(solidDataset, thing) {\r\n    const subject = DataFactory.namedNode(thing.url);\r\n    const nrOfAdditions = solidDataset.internal_changeLog.additions.reduce((count, addition) => (addition.subject.equals(subject) ? count + 1 : count), 0);\r\n    const nrOfDeletions = solidDataset.internal_changeLog.deletions.reduce((count, deletion) => (deletion.subject.equals(subject) ? count + 1 : count), 0);\r\n    const additionString = nrOfAdditions === 1\r\n        ? \"1 new value added\"\r\n        : `${nrOfAdditions} new values added`;\r\n    const deletionString = nrOfDeletions === 1 ? \"1 value removed\" : `${nrOfDeletions} values removed`;\r\n    return `(${additionString} / ${deletionString})`;\r\n}\r\nfunction getNamedNodesForLocalNodes(quad) {\r\n    const subject = isNamedNode(quad.subject)\r\n        ? getNamedNodeFromLocalNode(quad.subject)\r\n        : /* istanbul ignore next: We don't allow non-NamedNodes as the Subject, so this code path should never be hit: */\r\n            quad.subject;\r\n    const object = isNamedNode(quad.object)\r\n        ? getNamedNodeFromLocalNode(quad.object)\r\n        : quad.object;\r\n    return DataFactory.quad(subject, quad.predicate, object, quad.graph);\r\n}\r\nfunction getNamedNodeFromLocalNode(node) {\r\n    if (isLocalNodeIri(node.value)) {\r\n        return DataFactory.namedNode(`#${getLocalNodeName(node.value)}`);\r\n    }\r\n    return node;\r\n}\r\nfunction resolveLocalIrisInSolidDataset(solidDataset) {\r\n    const resourceIri = getSourceUrl(solidDataset);\r\n    const defaultGraph = solidDataset.graphs.default;\r\n    const thingIris = Object.keys(defaultGraph);\r\n    const updatedDefaultGraph = thingIris.reduce((graphAcc, thingIri) => {\r\n        const resolvedThing = resolveLocalIrisInThing(graphAcc[thingIri], resourceIri);\r\n        const resolvedThingIri = isLocalNodeIri(thingIri)\r\n            ? `${resourceIri}#${getLocalNodeName(thingIri)}`\r\n            : thingIri;\r\n        const updatedGraph = Object.assign({}, graphAcc);\r\n        delete updatedGraph[thingIri];\r\n        updatedGraph[resolvedThingIri] = resolvedThing;\r\n        return freeze(updatedGraph);\r\n    }, defaultGraph);\r\n    const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), { default: updatedDefaultGraph }));\r\n    return freeze(Object.assign(Object.assign({}, solidDataset), { graphs: updatedGraphs }));\r\n}\r\nfunction resolveLocalIrisInThing(thing, baseIri) {\r\n    const predicateIris = Object.keys(thing.predicates);\r\n    const updatedPredicates = predicateIris.reduce((predicatesAcc, predicateIri) => {\r\n        var _a;\r\n        const namedNodes = (_a = predicatesAcc[predicateIri].namedNodes) !== null && _a !== void 0 ? _a : [];\r\n        if (namedNodes.every((namedNode) => !isLocalNodeIri(namedNode))) {\r\n            // This Predicate has no local node Objects, so return it unmodified:\r\n            return predicatesAcc;\r\n        }\r\n        const updatedNamedNodes = freeze(namedNodes.map((namedNode) => isLocalNodeIri(namedNode)\r\n            ? `${baseIri}#${getLocalNodeName(namedNode)}`\r\n            : namedNode));\r\n        const updatedPredicate = freeze(Object.assign(Object.assign({}, predicatesAcc[predicateIri]), { namedNodes: updatedNamedNodes }));\r\n        return freeze(Object.assign(Object.assign({}, predicatesAcc), { [predicateIri]: updatedPredicate }));\r\n    }, thing.predicates);\r\n    return freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates, url: isLocalNodeIri(thing.url)\r\n            ? `${baseIri}#${getLocalNodeName(thing.url)}`\r\n            : thing.url }));\r\n}\r\n/**\r\n * @hidden\r\n *\r\n * Fetch a SolidDataset containing information about the capabilities of the\r\n * storage server that hosts the given resource URL. For more information,\r\n * please see the [ESS\r\n * Documentation](https://docs.inrupt.com/ess/latest/services/discovery-endpoint/#well-known-solid).\r\n *\r\n * **Note:** The data contained in this dataset has changed between ESS 1.1 and\r\n * ESS 2.0, as such you will need to check for multiple predicates to support\r\n * both versions.\r\n *\r\n * ```typescript\r\n * const wellKnown = await getWellKnownSolid(resource);\r\n *\r\n * // The wellKnown dataset uses a blank node for the subject all of it’s predicates,\r\n * // such that we need to call getThingAll with acceptBlankNodes set to true to\r\n * // retrieve back predicates contained within the dataset\r\n * const wellKnownSubjects = getThingAll(wellKnown, {\r\n *   acceptBlankNodes: true,\r\n * });\r\n * const wellKnownSubject = wellKnownSubjects[0];\r\n *\r\n * // Retrieve a value from the wellKnown dataset:\r\n * let notificationGateway = getIri(\r\n *   wellKnownSubject,\r\n *   \"http://www.w3.org/ns/solid/terms#notificationGateway\"\r\n * );\r\n * ```\r\n *\r\n *\r\n * @param url URL of a Resource.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch`\r\n * function to make the HTTP request, compatible with the browser-native [fetch\r\n * API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at\r\n * '.well-known/solid' for the given Resource, or rejecting if fetching it\r\n * failed.\r\n * @since 1.12.0\r\n */\r\nasync function getWellKnownSolid(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    // Try to fetch the well-known solid dataset from the server's root\r\n    try {\r\n        const wellKnownSolidUrl = new URL(\"/.well-known/solid\", new URL(urlString).origin).href;\r\n        // Technically, the request here should be public and shouldn't require an\r\n        // authenticated fetch, however, in some environments, fetcher.ts fails to\r\n        // load cross-fetch sometimes, which results in this call failing if we\r\n        // don't pass the fetch method through:\r\n        return await getSolidDataset(wellKnownSolidUrl, { fetch: options.fetch });\r\n    }\r\n    catch (e) {\r\n        // In case of error, do nothing and try to discover the .well-known\r\n        // at the pod's root.\r\n    }\r\n    // 1.1s implementation:\r\n    const resourceMetadata = await getResourceInfo(urlString, {\r\n        fetch: options.fetch,\r\n        // Discovering the .well-known/solid document is useful even for resources\r\n        // we don't have access to.\r\n        ignoreAuthenticationErrors: true,\r\n    });\r\n    const linkedResources = getLinkedResourceUrlAll(resourceMetadata);\r\n    const rootResources = linkedResources[pim.storage];\r\n    const rootResource = (rootResources === null || rootResources === void 0 ? void 0 : rootResources.length) === 1 ? rootResources[0] : null;\r\n    // If pod root (storage) was advertised, retrieve well known solid from pod's root\r\n    if (rootResource !== null) {\r\n        const wellKnownSolidUrl = new URL(\".well-known/solid\", rootResource.endsWith(\"/\") ? rootResource : `${rootResource}/`).href;\r\n        return getSolidDataset(wellKnownSolidUrl, Object.assign(Object.assign({}, options), { parsers: {\r\n                \"application/ld+json\": getJsonLdParser(),\r\n            } }));\r\n    }\r\n    throw new Error(\"Could not determine storage root or well-known solid resource.\");\r\n}\n\n//\r\nconst { Response } = crossFetch__namespace;\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new [[SolidDataset]] with metadata as though the\r\n * SolidDataset has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted SolidDatasets; e.g., unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned SolidDataset appears to be retrieved.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockSolidDatasetFrom(url) {\r\n    const solidDataset = createSolidDataset();\r\n    const solidDatasetWithResourceInfo = Object.assign(Object.assign({}, solidDataset), { internal_resourceInfo: {\r\n            sourceIri: internal_toIriString(url),\r\n            isRawData: false,\r\n            contentType: \"text/turtle\",\r\n            linkedResources: {},\r\n        } });\r\n    return solidDatasetWithResourceInfo;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Container [[SolidDataset]] with metadata as though the\r\n * Container has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted Containers; e.g., unit tests that call [[isContainer]].\r\n *\r\n * @param url The URL from which the returned Container appears to be retrieved. The `url` must end in a slash.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockContainerFrom(url) {\r\n    const sourceIri = internal_toIriString(url);\r\n    if (!sourceIri.endsWith(\"/\")) {\r\n        throw new Error(\"A Container's URL should end in a slash. Please update your tests.\");\r\n    }\r\n    return mockSolidDatasetFrom(sourceIri);\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new File with metadata as though the\r\n * File has been retrieved from the given URL. The mock File can be used in\r\n * unit tests that require persisted Files; e.g. unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned File appears to be retrieved.\r\n * @returns A mock File that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockFileFrom(url, options) {\r\n    const file = new Blob();\r\n    const fileWithResourceInfo = Object.assign(file, {\r\n        internal_resourceInfo: {\r\n            sourceIri: internal_toIriString(url),\r\n            isRawData: true,\r\n            contentType: options === null || options === void 0 ? void 0 : options.contentType,\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return fileWithResourceInfo;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Error object with metadata as though the\r\n * it was the result of getting a 404 when trying to fetch the Resource at the\r\n * given URL. The mock Error can be used in unit tests that require functions\r\n * that fetch Resources (like [[getSolidDataset]]) to fail.\r\n *\r\n * @param url The URL of the Resource that could not be fetched according to the error.\r\n * @param statusCode Optional status code (defaults to 404) that caused the error.\r\n * @returns A mock Error that represents not having been able to fetch the Resource at `url` due to a 404 Response.\r\n * @since 1.1.0\r\n */\r\nfunction mockFetchError(fetchedUrl, statusCode = 404) {\r\n    const failedResponse = new Response(undefined, {\r\n        status: statusCode,\r\n    });\r\n    return new FetchError(`Fetching the Resource at [${fetchedUrl}] failed: [${failedResponse.status}] [${failedResponse.statusText}].`, failedResponse);\r\n}\n\n//\r\n/**\r\n * Create a new Thing with a URL added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a URL value to.\r\n * @param property Property for which to add the given URL value.\r\n * @param url URL to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addUrl = (thing, property, url) => {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    if (!isThing(url) && !internal_isValidUrl(url)) {\r\n        throw new ValidValueUrlExpectedError(url);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n    const existingNamedNodes = (_b = existingPredicate.namedNodes) !== null && _b !== void 0 ? _b : [];\r\n    let iriToAdd;\r\n    if (isNamedNode(url)) {\r\n        iriToAdd = url.value;\r\n    }\r\n    else if (typeof url === \"string\") {\r\n        iriToAdd = url;\r\n    }\r\n    else if (isThingLocal(url)) {\r\n        iriToAdd = url.url;\r\n    }\r\n    else {\r\n        iriToAdd = asIri(url);\r\n    }\r\n    const updatedNamedNodes = freeze(existingNamedNodes.concat(internal_toIriString(iriToAdd)));\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), { namedNodes: updatedNamedNodes }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    const updatedThing = freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n    return updatedThing;\r\n};\r\n/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */\r\nconst addIri = addUrl;\r\n/**\r\n * Create a new Thing with a boolean added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a boolean value to.\r\n * @param property Property for which to add the given boolean value.\r\n * @param value Boolean to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with a datetime added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value Datetime to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with a date added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDate]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a date value to.\r\n * @param property Property for which to add the given date value.\r\n * @param value Date to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 1.10.0\r\n */\r\nconst addDate = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDate(value), xmlSchemaTypes.date);\r\n};\r\n/**\r\n * Create a new Thing with a time added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value time to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 1.10.0\r\n */\r\nconst addTime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeTime(value), xmlSchemaTypes.time);\r\n};\r\n/**\r\n * Create a new Thing with a decimal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a decimal value to.\r\n * @param property Property for which to add the given decimal value.\r\n * @param value Decimal to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with an integer added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an integer value to.\r\n * @param property Property for which to add the given integer value.\r\n * @param value Integer to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\n/**\r\n * Create a new Thing with an English string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringEnglish]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a localised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 1.13.0\r\n */\r\nfunction addStringEnglish(thing, property, value) {\r\n    return addStringWithLocale(thing, property, value, \"en\");\r\n}\r\n/**\r\n * Create a new Thing with a localised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a localised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addStringWithLocale(thing, property, value, locale) {\r\n    var _a, _b, _c;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const normalizedLocale = normalizeLocale(locale);\r\n    const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n    const existingLangStrings = (_b = existingPredicate.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    const existingStringsInLocale = (_c = existingLangStrings[normalizedLocale]) !== null && _c !== void 0 ? _c : [];\r\n    const updatedStringsInLocale = freeze(existingStringsInLocale.concat(value));\r\n    const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), { [normalizedLocale]: updatedStringsInLocale }));\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), { langStrings: updatedLangStrings }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    const updatedThing = freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n    return updatedThing;\r\n}\r\n/**\r\n * Create a new Thing with an unlocalised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an unlocalised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\n/**\r\n * Create a new Thing with a Named Node added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Named Node to.\r\n * @param property Property for which to add a value.\r\n * @param value The Named Node to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addNamedNode(thing, property, value) {\r\n    return addUrl(thing, property, value.value);\r\n}\r\n/**\r\n * Create a new Thing with a Literal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Literal to.\r\n * @param property Property for which to add a value.\r\n * @param value The Literal to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const typeIri = value.datatype.value;\r\n    if (typeIri === xmlSchemaTypes.langString) {\r\n        return addStringWithLocale(thing, property, value.value, value.language);\r\n    }\r\n    return addLiteralOfType(thing, property, value.value, value.datatype.value);\r\n}\r\n/**\r\n * Creates a new Thing with a Term added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Term to.\r\n * @param property Property for which to add a value.\r\n * @param value The Term to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 0.3.0\r\n */\r\nfunction addTerm(thing, property, value) {\r\n    var _a, _b;\r\n    if (value.termType === \"NamedNode\") {\r\n        return addNamedNode(thing, property, value);\r\n    }\r\n    if (value.termType === \"Literal\") {\r\n        return addLiteral(thing, property, value);\r\n    }\r\n    if (value.termType === \"BlankNode\") {\r\n        internal_throwIfNotThing(thing);\r\n        if (!internal_isValidUrl(property)) {\r\n            throw new ValidPropertyUrlExpectedError(property);\r\n        }\r\n        const predicateIri = internal_toIriString(property);\r\n        const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n        const existingBlankNodes = (_b = existingPredicate.blankNodes) !== null && _b !== void 0 ? _b : [];\r\n        const updatedBlankNodes = freeze(existingBlankNodes.concat(getBlankNodeId(value)));\r\n        const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), { blankNodes: updatedBlankNodes }));\r\n        const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n        const updatedThing = freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n        return updatedThing;\r\n    }\r\n    throw new Error(`Term type [${value.termType}] is not supported by @inrupt/solid-client.`);\r\n}\r\nfunction addLiteralOfType(thing, property, value, type) {\r\n    var _a, _b, _c;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n    const existingLiterals = (_b = existingPredicate.literals) !== null && _b !== void 0 ? _b : {};\r\n    const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];\r\n    const updatedValuesOfType = freeze(existingValuesOfType.concat(value));\r\n    const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), { [type]: updatedValuesOfType }));\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), { literals: updatedLiterals }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    const updatedThing = freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n    return updatedThing;\r\n}\n\n//\r\nfunction removeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const newPredicates = Object.assign({}, thing.predicates);\r\n    delete newPredicates[predicateIri];\r\n    return freeze(Object.assign(Object.assign({}, thing), { predicates: freeze(newPredicates) }));\r\n}\r\n/**\r\n * Create a new Thing with the given URL removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a URL value from.\r\n * @param property Property for which to remove the given URL value.\r\n * @param value URL to remove from `thing` for the given `Property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeUrl = (thing, property, value) => {\r\n    var _a, _b, _c;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    if (!isThing(value) && !internal_isValidUrl(value)) {\r\n        throw new ValidValueUrlExpectedError(value);\r\n    }\r\n    const iriToRemove = isThing(value)\r\n        ? asIri(value)\r\n        : internal_toIriString(value);\r\n    const updatedNamedNodes = freeze((_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.filter((namedNode) => namedNode.toLowerCase() !== iriToRemove.toLowerCase())) !== null && _c !== void 0 ? _c : []);\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), { namedNodes: updatedNamedNodes }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    return freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n};\r\n/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */\r\nconst removeIri = removeUrl;\r\n/**\r\n * Create a new Thing with the given boolean removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a boolean value from.\r\n * @param property Property for which to remove the given boolean value.\r\n * @param value Boolean to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.boolean, (foundBoolean) => deserializeBoolean(foundBoolean) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Datetime to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.dateTime, (foundDatetime) => { var _a; return ((_a = deserializeDatetime(foundDatetime)) === null || _a === void 0 ? void 0 : _a.getTime()) === value.getTime(); });\r\n};\r\n/**\r\n * Create a new Thing with the given date removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a date value from.\r\n * @param property Property for which to remove the given date value.\r\n * @param value Date to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n * @since 1.10.0\r\n */\r\nconst removeDate = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.date, function (foundDate) {\r\n        const deserializedDate = deserializeDate(foundDate);\r\n        if (deserializedDate) {\r\n            return (deserializedDate.getFullYear() === value.getFullYear() &&\r\n                deserializedDate.getMonth() === value.getMonth() &&\r\n                deserializedDate.getDate() === value.getDate());\r\n        }\r\n        return false;\r\n    });\r\n};\r\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Time to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n * @since 1.10.0\r\n */\r\nconst removeTime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.time, function (foundTime) {\r\n        const deserializedTime = deserializeTime(foundTime);\r\n        if (deserializedTime) {\r\n            return (deserializedTime.hour === value.hour &&\r\n                deserializedTime.minute === value.minute &&\r\n                deserializedTime.second === value.second &&\r\n                deserializedTime.millisecond === value.millisecond &&\r\n                deserializedTime.timezoneHourOffset === value.timezoneHourOffset &&\r\n                deserializedTime.timezoneMinuteOffset === value.timezoneMinuteOffset);\r\n        }\r\n        return false;\r\n    });\r\n};\r\n/**\r\n * Create a new Thing with the given decimal removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a decimal value from.\r\n * @param property Property for which to remove the given decimal value.\r\n * @param value Decimal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.decimal, (foundDecimal) => deserializeDecimal(foundDecimal) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given integer removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an integer value from.\r\n * @param property Property for which to remove the given integer value.\r\n * @param value Integer to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.integer, (foundInteger) => deserializeInteger(foundInteger) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given English string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a localised string value from.\r\n * @param property Property for which to remove the given localised string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n * @since 1.13.0\r\n */\r\nfunction removeStringEnglish(thing, property, value) {\r\n    return removeStringWithLocale(thing, property, value, \"en\");\r\n}\r\n/**\r\n * Create a new Thing with the given localised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a localised string value from.\r\n * @param property Property for which to remove the given localised string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @param locale Locale of the string to remove.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeStringWithLocale(thing, property, value, locale) {\r\n    var _a, _b;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const existingLangStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};\r\n    const matchingLocale = Object.keys(existingLangStrings).find((existingLocale) => normalizeLocale(existingLocale) === normalizeLocale(locale) &&\r\n        Array.isArray(existingLangStrings[existingLocale]) &&\r\n        existingLangStrings[existingLocale].length > 0);\r\n    if (typeof matchingLocale !== \"string\") {\r\n        // Nothing to remove.\r\n        return thing;\r\n    }\r\n    const existingStringsInLocale = existingLangStrings[matchingLocale];\r\n    const updatedStringsInLocale = freeze(existingStringsInLocale.filter((existingString) => existingString !== value));\r\n    const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), { [matchingLocale]: updatedStringsInLocale }));\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), { langStrings: updatedLangStrings }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    return freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n}\r\n/**\r\n * Create a new Thing with the given unlocalised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an unlocalised string value from.\r\n * @param property Property for which to remove the given string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.string, (foundString) => foundString === value);\r\n};\r\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a NamedNode value from.\r\n * @param property Property for which to remove the given NamedNode value.\r\n * @param value NamedNode to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeNamedNode(thing, property, value) {\r\n    return removeUrl(thing, property, value.value);\r\n}\r\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param value Literal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeLiteral(thing, property, value) {\r\n    var _a, _b, _c;\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const typeIri = value.datatype.value;\r\n    if (typeIri === xmlSchemaTypes.langString) {\r\n        return removeStringWithLocale(thing, property, value.value, value.language);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n    const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};\r\n    const existingValuesOfType = (_c = existingLiterals[typeIri]) !== null && _c !== void 0 ? _c : [];\r\n    const updatedValues = freeze(existingValuesOfType.filter((existingValue) => existingValue !== value.value));\r\n    const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), { [typeIri]: updatedValues }));\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), { literals: updatedLiterals }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    const updatedThing = freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n    return updatedThing;\r\n}\r\n/**\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param type Data type that the Literal should be stored as.\r\n * @param matcher Function that returns true if the given value is an equivalent serialisation of the value to remove. For example, when removing a `false` boolean, the matcher should return true for both \"0\" and \"false\".\r\n */\r\nfunction removeLiteralMatching(thing, property, type, matcher) {\r\n    var _a, _b, _c;\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateIri = internal_toIriString(property);\r\n    const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};\r\n    const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};\r\n    const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];\r\n    const updatedValues = freeze(existingValuesOfType.filter((existingValue) => !matcher(existingValue)));\r\n    const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), { [type]: updatedValues }));\r\n    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), { literals: updatedLiterals }));\r\n    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), { [predicateIri]: updatedPredicate }));\r\n    const updatedThing = freeze(Object.assign(Object.assign({}, thing), { predicates: updatedPredicates }));\r\n    return updatedThing;\r\n}\n\n//\r\n/**\r\n * Create a new Thing with existing values replaced by the given URL for the given Property.\r\n *\r\n * To preserve existing values, see [[addUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a URL value on.\r\n * @param property Property for which to set the given URL value.\r\n * @param url URL to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setUrl = (thing, property, url) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    if (!isThing(url) && !internal_isValidUrl(url)) {\r\n        throw new ValidValueUrlExpectedError(url);\r\n    }\r\n    return addUrl(removeAll(thing, property), property, url);\r\n};\r\n/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */\r\nconst setIri = setUrl;\r\n/**\r\n * Create a new Thing with existing values replaced by the given boolean for the given Property.\r\n *\r\n * To preserve existing values, see [[addBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a boolean value on.\r\n * @param property Property for which to set the given boolean value.\r\n * @param value Boolean to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addBoolean(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given datetime for the given Property.\r\n *\r\n * To preserve existing values, see [[addDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an datetime value on.\r\n * @param property Property for which to set the given datetime value.\r\n * @param value Datetime to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addDatetime(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given date for the given Property.\r\n *\r\n * To preserve existing values, see [[addDate]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an date value on.\r\n * @param property Property for which to set the given date value.\r\n * @param value Date to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 1.10.0\r\n */\r\nconst setDate = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addDate(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given time for the given Property.\r\n *\r\n * To preserve existing values, see [[addTime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an time value on.\r\n * @param property Property for which to set the given time value.\r\n * @param value time to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 1.10.0\r\n */\r\nconst setTime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addTime(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given decimal for the given Property.\r\n *\r\n * To preserve existing values, see [[addDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a decimal value on.\r\n * @param property Property for which to set the given decimal value.\r\n * @param value Decimal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addDecimal(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given integer for the given Property.\r\n *\r\n * To preserve existing values, see [[addInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an integer value on.\r\n * @param property Property for which to set the given integer value.\r\n * @param value Integer to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addInteger(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given localised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a localised string value on.\r\n * @param property Property for which to set the given localised string value.\r\n * @param value Localised string to set on `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    return addStringWithLocale(removeAll(thing, property), property, value, locale);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an unlocalised string value on.\r\n * @param property Property for which to set the given unlocalised string value.\r\n * @param value Unlocalised string to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addStringNoLocale(removeAll(thing, property), property, value);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given Named Node for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a NamedNode on.\r\n * @param property Property for which to set the value.\r\n * @param value The NamedNode to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return addNamedNode(removeAll(thing, property), property, value);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given Literal for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Literal on.\r\n * @param property Property for which to set the value.\r\n * @param value The Literal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteral(removeAll(thing, property), property, value);\r\n}\r\n/**\r\n * Creates a new Thing with existing values replaced by the given Term for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Term on.\r\n * @param property Property for which to set the value.\r\n * @param value The raw RDF/JS value to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 0.3.0\r\n */\r\nfunction setTerm(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    return addTerm(removeAll(thing, property), property, value);\r\n}\n\n//\r\n/**\r\n * Create or modify a [[Thing]], setting multiple properties in a single expresssion.\r\n *\r\n * For example, you can create a new Thing and initialise several properties as follows:\r\n *\r\n *     const me = buildThing()\r\n *       .addUrl(rdf.type, schema.Person)\r\n *       .addStringNoLocale(schema.givenName, \"Vincent\")\r\n *       .build();\r\n *\r\n * Take note of the final call to `.build()` to obtain the actual Thing.\r\n *\r\n * @param init Optionally pass an existing [[Thing]] to modify the properties of. If left empty, `buildThing` will initialise a new Thing.\r\n * @returns a [[ThingBuilder]], a Fluent API that allows you to set multiple properties in a single expression.\r\n * @since 1.9.0\r\n */\r\nfunction buildThing(init = createThing()) {\r\n    let thing = isThing(init) ? init : createThing(init);\r\n    function getAdder(adder) {\r\n        return (property, value) => {\r\n            thing = adder(thing, property, value);\r\n            return builder;\r\n        };\r\n    }\r\n    function getSetter(setter) {\r\n        return (property, value) => {\r\n            thing = setter(thing, property, value);\r\n            return builder;\r\n        };\r\n    }\r\n    function getRemover(remover) {\r\n        return (property, value) => {\r\n            thing = remover(thing, property, value);\r\n            return builder;\r\n        };\r\n    }\r\n    const builder = {\r\n        build: () => thing,\r\n        addUrl: getAdder(addUrl),\r\n        addIri: getAdder(addIri),\r\n        addBoolean: getAdder(addBoolean),\r\n        addDatetime: getAdder(addDatetime),\r\n        addDate: getAdder(addDate),\r\n        addTime: getAdder(addTime),\r\n        addDecimal: getAdder(addDecimal),\r\n        addInteger: getAdder(addInteger),\r\n        addStringNoLocale: getAdder(addStringNoLocale),\r\n        addStringEnglish: (property, value) => {\r\n            thing = addStringWithLocale(thing, property, value, \"en\");\r\n            return builder;\r\n        },\r\n        addStringWithLocale: (property, value, locale) => {\r\n            thing = addStringWithLocale(thing, property, value, locale);\r\n            return builder;\r\n        },\r\n        addNamedNode: getAdder(addNamedNode),\r\n        addLiteral: getAdder(addLiteral),\r\n        addTerm: getAdder(addTerm),\r\n        setUrl: getSetter(setUrl),\r\n        setIri: getSetter(setIri),\r\n        setBoolean: getSetter(setBoolean),\r\n        setDatetime: getSetter(setDatetime),\r\n        setDate: getSetter(setDate),\r\n        setTime: getSetter(setTime),\r\n        setDecimal: getSetter(setDecimal),\r\n        setInteger: getSetter(setInteger),\r\n        setStringNoLocale: getSetter(setStringNoLocale),\r\n        setStringEnglish: (property, value) => {\r\n            thing = setStringWithLocale(thing, property, value, \"en\");\r\n            return builder;\r\n        },\r\n        setStringWithLocale: (property, value, locale) => {\r\n            thing = setStringWithLocale(thing, property, value, locale);\r\n            return builder;\r\n        },\r\n        setNamedNode: getSetter(setNamedNode),\r\n        setLiteral: getSetter(setLiteral),\r\n        setTerm: getSetter(setTerm),\r\n        removeAll: (property) => {\r\n            thing = removeAll(thing, property);\r\n            return builder;\r\n        },\r\n        removeUrl: getRemover(removeUrl),\r\n        removeIri: getRemover(removeIri),\r\n        removeBoolean: getRemover(removeBoolean),\r\n        removeDatetime: getRemover(removeDatetime),\r\n        removeDate: getRemover(removeDate),\r\n        removeTime: getRemover(removeTime),\r\n        removeDecimal: getRemover(removeDecimal),\r\n        removeInteger: getRemover(removeInteger),\r\n        removeStringNoLocale: getRemover(removeStringNoLocale),\r\n        removeStringEnglish: (property, value) => buildThing(removeStringWithLocale(thing, property, value, \"en\")),\r\n        removeStringWithLocale: (property, value, locale) => buildThing(removeStringWithLocale(thing, property, value, locale)),\r\n        removeNamedNode: getRemover(removeNamedNode),\r\n        removeLiteral: getRemover(removeLiteral),\r\n    };\r\n    return builder;\r\n}\n\n//\r\n/**\r\n * Function for use in unit tests to mock a [[Thing]] with a given URL.\r\n *\r\n * Warning: do not use this function in actual production code.\r\n * This function initialises a new empty Thing and sets its URL to a given URL.\r\n * This is useful to mock a Thing in tests of code that call e.g.\r\n * [[asUrl]].\r\n *\r\n * @param url The URL that the mocked Thing pretends identifies it.\r\n * @returns A new Thing, pretending to be identified by the given URL.\r\n * @since 0.2.0\r\n */\r\nfunction mockThingFrom(url) {\r\n    const iri = internal_toIriString(url);\r\n    const thing = {\r\n        type: \"Subject\",\r\n        predicates: {},\r\n        url: iri,\r\n    };\r\n    return thing;\r\n}\n\n//\r\n/**\r\n * @param linkedAccessResource A Resource exposed via the Link header of another Resource with rel=\"acl\".\r\n * @returns Whether that Resource is an ACP ACR or not (in which case it's likely a WAC ACL).\r\n */\r\nfunction isAcr(linkedAccessResource) {\r\n    const relTypeLinks = getLinkedResourceUrlAll(linkedAccessResource).type;\r\n    return (Array.isArray(relTypeLinks) &&\r\n        relTypeLinks.includes(acp.AccessControlResource));\r\n}\n\n//\r\n/**\r\n * This (currently internal) function fetches the ACL indicated in the [[WithServerResourceInfo]]\r\n * attached to a resource.\r\n *\r\n * @internal\r\n * @param resourceInfo The Resource info with the ACL URL\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n */\r\nasync function internal_fetchAcl(resourceInfo, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(resourceInfo)) {\r\n        return {\r\n            resourceAcl: null,\r\n            fallbackAcl: null,\r\n        };\r\n    }\r\n    try {\r\n        const resourceAcl = await internal_fetchResourceAcl(resourceInfo, options);\r\n        const acl = resourceAcl === null\r\n            ? {\r\n                resourceAcl: null,\r\n                fallbackAcl: await internal_fetchFallbackAcl(resourceInfo, options),\r\n            }\r\n            : { resourceAcl, fallbackAcl: null };\r\n        return acl;\r\n    }\r\n    catch (e) {\r\n        /* istanbul ignore else: fetchResourceAcl swallows all non-AclIsAcrErrors */\r\n        if (e instanceof AclIsAcrError) {\r\n            return {\r\n                resourceAcl: null,\r\n                fallbackAcl: null,\r\n            };\r\n        }\r\n        /* istanbul ignore next: fetchResourceAcl swallows all non-AclIsAcrErrors */\r\n        throw e;\r\n    }\r\n}\r\n/** @internal */\r\nasync function internal_fetchResourceAcl(dataset, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(dataset)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const aclSolidDataset = await getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);\r\n        if (isAcr(aclSolidDataset)) {\r\n            throw new AclIsAcrError(dataset, aclSolidDataset);\r\n        }\r\n        return freeze(Object.assign(Object.assign({}, aclSolidDataset), { internal_accessTo: getSourceUrl(dataset) }));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof AclIsAcrError) {\r\n            throw e;\r\n        }\r\n        // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,\r\n        // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal\r\n        // with it.\r\n        return null;\r\n    }\r\n}\r\n/** @internal */\r\nasync function internal_fetchFallbackAcl(resource, options = internal_defaultFetchOptions) {\r\n    const resourceUrl = new URL(getSourceUrl(resource));\r\n    const resourcePath = resourceUrl.pathname;\r\n    // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet\r\n    //       set in stone that that will always be the case. We might need to check the Container's\r\n    //       metadata at some point in time to check whether it is actually the root of the Pod.\r\n    //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022\r\n    if (resourcePath === \"/\") {\r\n        // We're already at the root, so there's no Container we can retrieve:\r\n        return null;\r\n    }\r\n    const containerPath = internal_getContainerPath(resourcePath);\r\n    const containerIri = new URL(containerPath, resourceUrl.origin).href;\r\n    const containerInfo = await getResourceInfo(containerIri, options);\r\n    if (!hasAccessibleAcl(containerInfo)) {\r\n        // If the current user does not have access to this Container's ACL,\r\n        // we cannot determine whether its ACL is the one that applies. Thus, return null:\r\n        return null;\r\n    }\r\n    const containerAcl = await internal_fetchResourceAcl(containerInfo, options);\r\n    if (containerAcl === null) {\r\n        return internal_fetchFallbackAcl(containerInfo, options);\r\n    }\r\n    return containerAcl;\r\n}\r\n/**\r\n * Given the path to a Resource, get the URL of the Container one level up in the hierarchy.\r\n * @param resourcePath The path of the Resource of which we need to determine the Container's path.\r\n * @hidden For internal use only.\r\n */\r\nfunction internal_getContainerPath(resourcePath) {\r\n    const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === \"/\"\r\n        ? resourcePath.substring(0, resourcePath.length - 1)\r\n        : resourcePath;\r\n    const containerPath = `${resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf(\"/\"))}/`;\r\n    return containerPath;\r\n}\r\n/** @internal */\r\nfunction internal_getAclRules(aclDataset) {\r\n    const things = getThingAll(aclDataset);\r\n    return things.filter(isAclRule);\r\n}\r\nfunction isAclRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acl.Authorization);\r\n}\r\n/** @internal */\r\nfunction internal_getResourceAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => appliesToResource(rule, resource));\r\n}\r\nfunction appliesToResource(aclRule, resource) {\r\n    return getIriAll(aclRule, acl.accessTo).includes(resource);\r\n}\r\n/** @internal */\r\nfunction internal_getDefaultAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => isDefaultForResource(rule, resource));\r\n}\r\nfunction isDefaultForResource(aclRule, resource) {\r\n    return (getIriAll(aclRule, acl.default).includes(resource) ||\r\n        getIriAll(aclRule, acl.defaultForNew).includes(resource));\r\n}\r\n/** @internal */\r\nfunction internal_getAccess(rule) {\r\n    const ruleAccessModes = getIriAll(rule, acl.mode);\r\n    const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);\r\n    return writeAccess\r\n        ? {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: true,\r\n            write: true,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        }\r\n        : {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: ruleAccessModes.includes(internal_accessModeIriStrings.append),\r\n            write: false,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        };\r\n}\r\n/** @internal */\r\nfunction internal_combineAccessModes(modes) {\r\n    return modes.reduce((accumulator, current) => {\r\n        const writeAccess = accumulator.write || current.write;\r\n        return writeAccess\r\n            ? {\r\n                read: accumulator.read || current.read,\r\n                append: true,\r\n                write: true,\r\n                control: accumulator.control || current.control,\r\n            }\r\n            : {\r\n                read: accumulator.read || current.read,\r\n                append: accumulator.append || current.append,\r\n                write: false,\r\n                control: accumulator.control || current.control,\r\n            };\r\n    }, { read: false, append: false, write: false, control: false });\r\n}\r\n/** @internal */\r\nfunction internal_removeEmptyAclRules(aclDataset) {\r\n    const aclRules = internal_getAclRules(aclDataset);\r\n    const aclRulesToRemove = aclRules.filter(isEmptyAclRule);\r\n    // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.\r\n    const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);\r\n    return updatedAclDataset;\r\n}\r\nfunction isEmptyAclRule(aclRule) {\r\n    // If there are Quads in there unrelated to Access Control,\r\n    // this is not an empty ACL rule that can be deleted:\r\n    if (subjectToRdfJsQuads(aclRule.predicates, DataFactory.namedNode(aclRule.url), DataFactory.defaultGraph()).some((quad) => !isAclQuad(quad))) {\r\n        return false;\r\n    }\r\n    // If the rule does not apply to any Resource, it is no longer working:\r\n    if (getIri(aclRule, acl.accessTo) === null &&\r\n        getIri(aclRule, acl.default) === null &&\r\n        getIri(aclRule, acl.defaultForNew) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify Access Modes, it is no longer working:\r\n    if (getIri(aclRule, acl.mode) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify whom it applies to, it is no longer working:\r\n    if (getIri(aclRule, acl.agent) === null &&\r\n        getIri(aclRule, acl.agentGroup) === null &&\r\n        getIri(aclRule, acl.agentClass) === null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isAclQuad(quad) {\r\n    const { predicate } = quad;\r\n    const { object } = quad;\r\n    if (predicate.equals(DataFactory.namedNode(rdf.type)) &&\r\n        object.equals(DataFactory.namedNode(acl.Authorization))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.accessTo)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.default)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.defaultForNew))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.mode)) &&\r\n        Object.values(internal_accessModeIriStrings).some((mode) => object.equals(DataFactory.namedNode(mode)))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.agent)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentGroup)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentClass))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.origin))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * IRIs of potential Access Modes\r\n * @internal\r\n */\r\nconst internal_accessModeIriStrings = {\r\n    read: \"http://www.w3.org/ns/auth/acl#Read\",\r\n    append: \"http://www.w3.org/ns/auth/acl#Append\",\r\n    write: \"http://www.w3.org/ns/auth/acl#Write\",\r\n    control: \"http://www.w3.org/ns/auth/acl#Control\",\r\n};\r\n/** @internal\r\n * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)\r\n * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).\r\n * @param aclRules The set of rules to filter\r\n * @param targetIri The IRI of the target\r\n * @param targetType The property linking the rule to the target\r\n */\r\nfunction internal_getAclRulesForIri(aclRules, targetIri, targetType) {\r\n    return aclRules.filter((rule) => getIriAll(rule, targetType).includes(targetIri));\r\n}\r\n/** @internal\r\n * This function transforms a given set of rules into a map associating the IRIs\r\n * of the entities to which permissions are granted by these rules, and the permissions\r\n * granted to them. Additionally, it filters these entities based on the predicate\r\n * that refers to them in the rule.\r\n */\r\nfunction internal_getAccessByIri(aclRules, targetType) {\r\n    const targetIriAccess = {};\r\n    aclRules.forEach((rule) => {\r\n        const ruleTargetIri = getIriAll(rule, targetType);\r\n        const access = internal_getAccess(rule);\r\n        // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access\r\n        // Modes granted by those rules should be combined:\r\n        ruleTargetIri.forEach((targetIri) => {\r\n            targetIriAccess[targetIri] =\r\n                typeof targetIriAccess[targetIri] === \"undefined\"\r\n                    ? access\r\n                    : internal_combineAccessModes([targetIriAccess[targetIri], access]);\r\n        });\r\n    });\r\n    return targetIriAccess;\r\n}\r\n/**\r\n * Initialises a new ACL Rule that grants some access - but does not yet specify to whom.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param access Access mode that this Rule will grant\r\n */\r\nfunction internal_initialiseAclRule(access) {\r\n    let newRule = createThing();\r\n    newRule = setIri(newRule, rdf.type, acl.Authorization);\r\n    if (access.read) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);\r\n    }\r\n    if (access.append && !access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);\r\n    }\r\n    if (access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);\r\n    }\r\n    if (access.control) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);\r\n    }\r\n    return newRule;\r\n}\r\n/**\r\n * Creates a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.\r\n *\r\n * Note that non-ACL values will not be copied over.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param sourceRule ACL rule to duplicate.\r\n */\r\nfunction internal_duplicateAclRule(sourceRule) {\r\n    let targetRule = createThing();\r\n    targetRule = setIri(targetRule, rdf.type, acl.Authorization);\r\n    function copyIris(inputRule, outputRule, predicate) {\r\n        return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);\r\n    }\r\n    targetRule = copyIris(sourceRule, targetRule, acl.accessTo);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.default);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.defaultForNew);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agent);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentClass);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.origin);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.mode);\r\n    return targetRule;\r\n}\r\nfunction internal_setAcl(resource, acl) {\r\n    return Object.assign(internal_cloneResource(resource), { internal_acl: acl });\r\n}\r\nconst supportedActorPredicates = [\r\n    acl.agent,\r\n    acl.agentClass,\r\n    acl.agentGroup,\r\n    acl.origin,\r\n];\r\n/**\r\n * Given an ACL Rule, returns two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the given Actor access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for a given Actor to a given Resource.\r\n * @param actor The Actor that should be removed from the Rule for the given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the given Actor.\r\n * @returns A tuple with the original ACL Rule without the given Actor, and a new ACL Rule for the given Actor for the remaining Resources, respectively.\r\n */\r\nfunction internal_removeActorFromRule(rule, actor, actorPredicate, resourceIri, ruleType) {\r\n    // If the existing Rule does not apply to the given Actor, we don't need to split up.\r\n    // Without this check, we'd be creating a new rule for the given Actor (ruleForOtherTargets)\r\n    // that would give it access it does not currently have:\r\n    if (!getIriAll(rule, actorPredicate).includes(actor)) {\r\n        const emptyRule = internal_initialiseAclRule({\r\n            read: false,\r\n            append: false,\r\n            write: false,\r\n            control: false,\r\n        });\r\n        return [rule, emptyRule];\r\n    }\r\n    // The existing rule will keep applying to Actors other than the given one:\r\n    const ruleWithoutActor = removeIri(rule, actorPredicate, actor);\r\n    // The actor might have been given other access in the existing rule, so duplicate it...\r\n    let ruleForOtherTargets = internal_duplicateAclRule(rule);\r\n    // ...but remove access to the original Resource...\r\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\r\n    // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation\r\n    if (ruleType === \"default\") {\r\n        ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);\r\n    }\r\n    // ...and only apply the new Rule to the given Actor (because the existing Rule covers the others):\r\n    ruleForOtherTargets = setIri(ruleForOtherTargets, actorPredicate, actor);\r\n    supportedActorPredicates\r\n        .filter((predicate) => predicate !== actorPredicate)\r\n        .forEach((predicate) => {\r\n        ruleForOtherTargets = removeAll(ruleForOtherTargets, predicate);\r\n    });\r\n    return [ruleWithoutActor, ruleForOtherTargets];\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Actor's access.\r\n *\r\n * If rules for Actor's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Actors through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Actors for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param actor The Actor to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Actor for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction internal_setActorAccess$2(aclDataset, access, actorPredicate, accessType, actor) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the Agent access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the given Actor,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Actor-Resource combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = internal_removeActorFromRule(aclRule, actor, actorPredicate, aclDataset.internal_accessTo, accessType);\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the given Actor the given Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, accessType === \"resource\" ? acl.accessTo : acl.default, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, actorPredicate, actor);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    return internal_removeEmptyAclRules(updatedAcl);\r\n}\r\nfunction internal_setResourceAcl(resource, acl) {\r\n    const newAcl = {\r\n        resourceAcl: acl,\r\n        fallbackAcl: null,\r\n    };\r\n    return internal_setAcl(resource, newAcl);\r\n}\r\nfunction internal_getResourceAcl(resource) {\r\n    return resource.internal_acl.resourceAcl;\r\n}\r\n/**\r\n * This error indicates that, if we're following a Link with rel=\"acl\",\r\n * it does not result in a WAC ACL, but in an ACP ACR.\r\n */\r\nclass AclIsAcrError extends Error {\r\n    constructor(sourceResource, aclResource) {\r\n        super(`[${getSourceIri(sourceResource)}] is governed by Access Control Policies in [${getSourceIri(aclResource)}] rather than by Web Access Control.`);\r\n    }\r\n}\n\n//\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verify whether a given SolidDataset was fetched together with its Access Control List.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have its ACLs attached.\r\n * @returns True if `dataset` was fetched together with its ACLs.\r\n */\r\nfunction hasAcl(dataset) {\r\n    const potentialAcl = dataset;\r\n    return typeof potentialAcl.internal_acl === \"object\";\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a resource ACL (Access Control List) attached.\r\n *\r\n * The [[hasResourceAcl]] function checks that:\r\n * - a given Resource has a resource ACL attached, and\r\n * - the user calling [[hasResourceAcl]] has Control access to the Resource.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A Resource that might have an ACL attached.\r\n * @returns `true` if the Resource has a resource ACL attached that is accessible by the user.\r\n */\r\nfunction hasResourceAcl(resource) {\r\n    return (resource.internal_acl.resourceAcl !== null &&\r\n        getSourceUrl(resource) ===\r\n            resource.internal_acl.resourceAcl.internal_accessTo &&\r\n        resource.internal_resourceInfo.aclUrl ===\r\n            getSourceUrl(resource.internal_acl.resourceAcl));\r\n}\r\n/**\r\n * Experimental: fetch a SolidDataset and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available. This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request. Therefore, and because this function is still\r\n * experimental, prefer [[getSolidDataset]] instead.\r\n *\r\n * If the Resource does not advertise the ACL Resource (because the authenticated user does not have\r\n * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be\r\n * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),\r\n * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the\r\n * authenticated user.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.\r\n */\r\nasync function getSolidDatasetWithAcl(url, options = internal_defaultFetchOptions) {\r\n    const solidDataset = await getSolidDataset(url, options);\r\n    const acl = await internal_fetchAcl(solidDataset, options);\r\n    return internal_setAcl(solidDataset, acl);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file, its resource ACL (Access Control List) if available,\r\n * and its fallback ACL from a URL and returns them as a blob.\r\n *\r\n * If the user calling the function does not have access to the file's resource ACL,\r\n * [[hasAccessibleAcl]] on the returned blob returns false.\r\n * If the user has access to the file's resource ACL but the resource ACL does not exist,\r\n * [[getResourceAcl]] on the returned blob returns null.\r\n * If the fallback ACL is inaccessible by the user,\r\n * [[getFallbackAcl]] on the returned blob returns null.\r\n *\r\n * ```{tip}\r\n * To retrieve the ACLs, the function results in multiple HTTP requests rather than a single\r\n * request as mandated by the Solid spec. As such, prefer [[getFile]] instead if you do not need the ACL.\r\n * ```\r\n *\r\n * @param url The URL of the fetched file\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns A file and its ACLs, if available to the authenticated user, as a blob.\r\n * @since 0.2.0\r\n */\r\nasync function getFileWithAcl(input, options = internal_defaultFetchOptions) {\r\n    const file = await getFile(input, options);\r\n    const acl = await internal_fetchAcl(file, options);\r\n    return internal_setAcl(file, acl);\r\n}\r\n/**\r\n * Experimental: fetch a Resource's metadata and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request.\r\n *\r\n * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because\r\n * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the\r\n * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be\r\n * `null`.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.\r\n */\r\nasync function getResourceInfoWithAcl(url, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfo(url, options);\r\n    const acl = await internal_fetchAcl(resourceInfo, options);\r\n    return internal_setAcl(resourceInfo, acl);\r\n}\r\nfunction getResourceAcl(resource) {\r\n    if (!hasResourceAcl(resource)) {\r\n        return null;\r\n    }\r\n    return resource.internal_acl.resourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a fallback ACL (Access Control List) attached.\r\n *\r\n * A fallback ACL for a Resource is inherited from the Resource's parent Container\r\n * (or another of its ancestor Containers) and applies if the Resource does\r\n * not have its own resource ACL.\r\n *\r\n * The [[hasFallbackAcl]] function checks that:\r\n * - a given Resource has a fallback ACL attached, and\r\n * - the user calling [[hasFallbackAcl]] has Control access to the Container\r\n * from which the Resource inherits its ACL.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A [[SolidDataset]] that might have a fallback ACL attached.\r\n *\r\n * @returns `true` if the Resource has a fallback ACL attached that is accessible to the user.\r\n */\r\nfunction hasFallbackAcl(resource) {\r\n    return resource.internal_acl.fallbackAcl !== null;\r\n}\r\nfunction getFallbackAcl(dataset) {\r\n    if (!hasFallbackAcl(dataset)) {\r\n        return null;\r\n    }\r\n    return dataset.internal_acl.fallbackAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates an empty resource ACL (Access Control List) for a given Resource.\r\n *\r\n * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).\r\n * @returns An empty resource ACL for the given Resource.\r\n */\r\nfunction createAcl(targetResource) {\r\n    const emptyResourceAcl = freeze(Object.assign(Object.assign({}, createSolidDataset()), { internal_accessTo: getSourceUrl(targetResource), internal_resourceInfo: {\r\n            sourceIri: targetResource.internal_resourceInfo.aclUrl,\r\n            isRawData: false,\r\n            linkedResources: {},\r\n        } }));\r\n    return emptyResourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates a resource ACL (Access Control List), initialised from the fallback ACL\r\n * inherited from the given Resource's Container (or another of its ancestor Containers).\r\n * That is, the new ACL has the same rules/entries as the fallback ACL that currently\r\n * applies to the Resource.\r\n *\r\n * @param resource A Resource without its own resource ACL (see [[hasResourceAcl]]) but with an accessible fallback ACL (see [[hasFallbackAcl]]).\r\n * @returns A resource ACL initialised with the rules/entries from the Resource's fallback ACL.\r\n */\r\nfunction createAclFromFallbackAcl(resource) {\r\n    const emptyResourceAcl = createAcl(resource);\r\n    const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);\r\n    const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);\r\n    const newAclRules = defaultAclRules.map((rule) => {\r\n        rule = removeAll(rule, acl.default);\r\n        rule = removeAll(rule, acl.defaultForNew);\r\n        rule = setIri(rule, acl.accessTo, getSourceUrl(resource));\r\n        rule = setIri(rule, acl.default, getSourceUrl(resource));\r\n        return rule;\r\n    });\r\n    // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:\r\n    const initialisedResourceAcl = newAclRules.reduce(setThing, emptyResourceAcl);\r\n    return initialisedResourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves the resource ACL for a Resource.\r\n *\r\n * @param resource The Resource to which the given resource ACL applies.\r\n * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function saveAclFor(resource, resourceAcl, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(resource)) {\r\n        throw new Error(`Could not determine the location of the ACL for the Resource at [${getSourceUrl(resource)}]; possibly the current user does not have Control access to that Resource. Try calling \\`hasAccessibleAcl()\\` before calling \\`saveAclFor()\\`.`);\r\n    }\r\n    const savedDataset = await saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);\r\n    const savedAclDataset = Object.assign(Object.assign({}, savedDataset), { internal_accessTo: getSourceUrl(resource) });\r\n    return savedAclDataset;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the resource ACL (Access Control List) from a Resource.\r\n *\r\n * Once the resource ACL is removed from the Resource, the Resource relies on the\r\n * fallback ACL inherited from the Resource's parent Container (or another of its ancestor Containers).\r\n *\r\n * @param resource The Resource for which you want to delete the ACL.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function deleteAclFor(resource, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(resource.internal_resourceInfo.aclUrl, {\r\n        method: \"DELETE\",\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting the ACL of the Resource at [${getSourceUrl(resource)}] failed: [${response.status}] [${response.statusText}].`);\r\n    }\r\n    const storedResource = Object.assign(internal_cloneResource(resource), {\r\n        acl: {\r\n            resourceAcl: null,\r\n        },\r\n    });\r\n    return storedResource;\r\n}\r\n/**\r\n * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.\r\n *\r\n * This should generally only be true for SolidDatasets fetched by\r\n * [[getSolidDatasetWithAcl]].\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param dataset A [[SolidDataset]].\r\n * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.\r\n */\r\nfunction hasAccessibleAcl(dataset) {\r\n    return typeof dataset.internal_resourceInfo.aclUrl === \"string\";\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's explicitly-granted Access Modes for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Agent through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the Agent for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccess$5(resourceInfo, agent) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns all explicitly-granted Access Modes per Agent for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to Agents through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which Agents may have been granted access.\r\n * @returns Access Modes per Agent that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccessAll$5(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getAgentResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getAgentDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to an Agent for the Resource\r\n * associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the child Resources if the associated Resource is a Container (see [[getAgentDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the Resource associated with an ACL SolidDataset.\r\n */\r\nfunction getAgentResourceAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Agent for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @returns Access Modes per Agent that have been explicitly granted for the Resource associated with an ACL SolidDataset.\r\n */\r\nfunction getAgentResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules for Agent's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction setAgentResourceAccess$1(aclDataset, agent, access) {\r\n    return internal_setActorAccess$2(aclDataset, access, acl.agent, \"resource\", agent);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's Access Modes explicitly granted for the children of the\r\n * Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself (see [[getAgentResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the children of the Container associated with the given ACL.\r\n */\r\nfunction getAgentDefaultAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Agent, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agents through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agents for the Container Resource itself (see [[getAgentResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Access Modes, per Agent, that have been explicitly granted for the children of the Container associated with the given ACL.\r\n */\r\nfunction getAgentDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set an Agent's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules already exist for the Agent in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction setAgentDefaultAccess(aclDataset, agent, access) {\r\n    return internal_setActorAccess$2(aclDataset, access, acl.agent, \"default\", agent);\r\n}\r\nfunction getAgentAclRulesForAgent(aclRules, agent) {\r\n    return internal_getAclRulesForIri(aclRules, agent, acl.agent);\r\n}\r\nfunction getAgentAclRules(aclRules) {\r\n    return aclRules.filter(isAgentAclRule);\r\n}\r\nfunction isAgentAclRule(aclRule) {\r\n    return getIri(aclRule, acl.agent) !== null;\r\n}\r\nfunction getAccessByAgent(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agent);\r\n}\n\n//\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns a Group's explicity-granted Access Modes for a given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the `group` for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccess$2(resourceInfo, group) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns all explicitly-granted Access Modes per Group for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @returns Access Modes per Group that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccessAll$2(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getGroupResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getGroupDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to a Group for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to the Group for the child Resources if the associated Resource is a Container\r\n *   (see [[getGroupDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes explicitly granted to a Group for the Resource associated with an ACL.\r\n */\r\nfunction getGroupResourceAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);\r\n    const groupAccessModes = groupResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Group for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes per Group that have been explicitly granted for the Resource associated with an ACL.\r\n */\r\nfunction getGroupResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(resourceRules);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns a Group's Access Modes explicitly granted for the children of the\r\n * Container associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself (see [[getGroupResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules for a certain Container.\r\n * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.\r\n * @returns Access Modes that have been explicitly granted to the Group for the children of the Container associated with the given ACL.\r\n */\r\nfunction getGroupDefaultAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);\r\n    const groupAccessModes = groupDefaultRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Group, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Groups through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Groups for the Container Resource itself (see [[getGroupResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes per Group that have been explicitly granted for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getGroupDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(defaultRules);\r\n}\r\nfunction getGroupAclRuleForGroup(rules, group) {\r\n    return internal_getAclRulesForIri(rules, group, acl.agentGroup);\r\n}\r\nfunction getAccessByGroup(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agentGroup);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Group.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Group's access.\r\n *\r\n * If rules for Groups's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Groups through other ACL rules, e.g., public or Agent-specific permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group The Group to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Group for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `group`.\r\n * @since 1.4.0\r\n */\r\nfunction setGroupResourceAccess$1(aclDataset, group, access) {\r\n    return internal_setActorAccess$2(aclDataset, access, acl.agentGroup, \"resource\", group);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set a Group's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Group's access.\r\n *\r\n * If rules already exist for the Group in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public or Agent-specific permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group The Group to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Group.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `group`.\r\n * @since 1.4.0\r\n */\r\nfunction setGroupDefaultAccess(aclDataset, group, access) {\r\n    return internal_setActorAccess$2(aclDataset, access, acl.agentGroup, \"default\", group);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for a Resource.\r\n *\r\n * This function does not return Access Modes granted to specific Agents\r\n * through other ACL (Access Control List) rules, e.g., agent- or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @returns Access Modes granted to the public in general for the Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getPublicAccess$5(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to specific Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container (see [[getPublicDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes granted to the public in general for the Resource associated with the `aclDataset`.\r\n */\r\nfunction getPublicResourceAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the child Resources\r\n * of the Container associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to the Container Resource itself (see [[getPublicResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes granted to the public in general for the children of the Container associated with the given `aclDataset`.\r\n */\r\nfunction getPublicDefaultAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the public.\r\n * Specifically, the function returns a new resource ACL (Access Control List) initialised\r\n * with the given resource ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and public `access`.\r\n */\r\nfunction setPublicResourceAccess$1(aclDataset, access) {\r\n    return internal_setActorAccess$2(aclDataset, access, acl.agentClass, \"resource\", foaf.Agent);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set the public's default Access Modes\r\n * to child resources. Specifically, the function returns a new default ACL initialised\r\n * with the given default ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new default ACL initialised with the given `aclDataset` and public `access`.\r\n */\r\nfunction setPublicDefaultAccess(aclDataset, access) {\r\n    return internal_setActorAccess$2(aclDataset, access, acl.agentClass, \"default\", foaf.Agent);\r\n}\r\nfunction getClassAclRulesForClass(aclRules, agentClass) {\r\n    return aclRules.filter((rule) => appliesToClass(rule, agentClass));\r\n}\r\nfunction appliesToClass(aclRule, agentClass) {\r\n    return getIriAll(aclRule, acl.agentClass).includes(agentClass);\r\n}\n\n//\r\nfunction setMockAclUrl(resource, aclUrl) {\r\n    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\r\n        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl }),\r\n    });\r\n    return resourceWithAclUrl;\r\n}\n\n//\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests** that\r\n * require a [[SolidDataset]] with a resource ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n * @since 0.2.0\r\n */\r\nfunction addMockResourceAclTo(resource) {\r\n    var _a;\r\n    const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : \"https://your.pod/mock-acl.ttl\";\r\n    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\r\n        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl }),\r\n    });\r\n    const aclDataset = createAcl(resourceWithAclUrl);\r\n    const resourceWithResourceAcl = internal_setAcl(resourceWithAclUrl, {\r\n        resourceAcl: aclDataset,\r\n        fallbackAcl: null,\r\n    });\r\n    return resourceWithResourceAcl;\r\n}\r\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[SolidDataset]] with a fallback ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].\r\n *\r\n * @param resource The Resource to mock up with new fallback ACL.\r\n * @returns The input Resource with an empty fallback ACL attached.\r\n * @since 0.2.0\r\n */\r\nfunction addMockFallbackAclTo(resource) {\r\n    const containerUrl = internal_getContainerPath(getSourceIri(resource));\r\n    const aclUrl = `${containerUrl}.acl`;\r\n    const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);\r\n    const aclDataset = createAcl(mockContainer);\r\n    const resourceWithFallbackAcl = internal_setAcl(internal_cloneResource(resource), {\r\n        resourceAcl: null,\r\n        fallbackAcl: aclDataset,\r\n    });\r\n    return resourceWithFallbackAcl;\r\n}\n\n//\r\nconst rdfJsDataset = rdfJsDatasetModule.dataset;\r\n/**\r\n * Convert an RDF/JS Dataset into a [[SolidDataset]]\r\n *\r\n * Parse an RDF/JS\r\n * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore},\r\n * into a [[SolidDataset]]. Note that, when saving the returned SolidDataset to\r\n * a Solid Pod, only Quads in the Default Graph will be stored.\r\n *\r\n * @param rdfJsDataset The source RDF/JS Dataset.\r\n * @returns A [[SolidDataset]] containing the same data as the given RDF/JS Dataset.\r\n * @since 1.9.0\r\n */\r\nfunction fromRdfJsDataset(rdfJsDataset) {\r\n    const dataset = {\r\n        graphs: { default: {} },\r\n        type: \"Dataset\",\r\n    };\r\n    const quads = Array.from(rdfJsDataset);\r\n    const chainBlankNodes = getChainBlankNodes(quads);\r\n    // Quads with chain Blank Nodes as their Subject will be parsed when those\r\n    // Blank Nodes are referred to in an Object. See `addRdfJsQuadToObjects`.\r\n    const quadsWithoutChainBlankNodeSubjects = quads.filter((quad) => chainBlankNodes.every((chainBlankNode) => !chainBlankNode.equals(quad.subject)));\r\n    return quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {\r\n        otherQuads: quads,\r\n        chainBlankNodes,\r\n    }), dataset);\r\n}\r\n/**\r\n * Convert a [[SolidDataset]] into an RDF/JS Dataset\r\n *\r\n * Export a [[SolidDataset]] into an RDF/JS\r\n * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore}.\r\n *\r\n * @param set A [[SolidDataset]] to export into an RDF/JS Dataset.\r\n * @param options Optional parameter that allows you to pass in your own RDF/JS DataFactory or DatasetCoreFactory.\r\n * @returns An RDF/JS Dataset containing the data from the given SolidDataset.\r\n * @since 1.9.0\r\n */\r\nfunction toRdfJsDataset(set, options = {}) {\r\n    var _a, _b;\r\n    const datasetFactory = (_b = (_a = options.datasetFactory) === null || _a === void 0 ? void 0 : _a.dataset) !== null && _b !== void 0 ? _b : rdfJsDataset;\r\n    return datasetFactory(toRdfJsQuads(set, options));\r\n}\n\n//\r\nfunction getProfileFromProfileDoc(profileDataset, webId) {\r\n    const profile = getThing(profileDataset, webId);\r\n    if (profile === null) {\r\n        throw new Error(`Profile document [${getSourceUrl(profileDataset)}] does not include WebID [${webId}]`);\r\n    }\r\n    return profile;\r\n}\r\n/**\r\n * Set a JWKS IRI associated with a WebID in a profile document.\r\n *\r\n * @param profileDocument The profile document dataset.\r\n * @param webId The WebID associated with the profile document.\r\n * @param jwksIri The JWKS IRI to be set.\r\n * @returns A modified copy of the profile document, with the JWKS IRI set.\r\n * @since 1.12.0\r\n */\r\nfunction setProfileJwks(profileDocument, webId, jwksIri) {\r\n    return setThing(profileDocument, setIri(getProfileFromProfileDoc(profileDocument, webId), security.publicKey, jwksIri));\r\n}\r\n/**\r\n * Look for a JWKS IRI optionally advertized from a profile document.\r\n *\r\n * @param profileDocument The profile document.\r\n * @param webId The WebID featured in the profile document.\r\n * @returns The JWKS IRI associated with the WebID, if any.\r\n * @since 1.12.0\r\n */\r\nfunction getProfileJwksIri(profileDocument, webId) {\r\n    return getUrl(getProfileFromProfileDoc(profileDocument, webId), security.publicKey);\r\n}\r\nconst isJwks = (jwksDocument) => {\r\n    return typeof jwksDocument.keys !== \"undefined\";\r\n};\r\n/**\r\n * Fetch a JWKS at a given IRI, and add the given JWK to the obtained key set.\r\n *\r\n * @param jwk The JWK to add to the set.\r\n * @param jwksIri The IRI where the key set should be looked up.\r\n * @param options @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a JWKS where the given key has been added.\r\n * @since 1.12.0\r\n */\r\nasync function addJwkToJwks(jwk, jwksIri, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const jwksResponse = await config.fetch(jwksIri);\r\n    if (!jwksResponse.ok) {\r\n        throw new Error(`Fetching [${jwksIri}] returned an error: ${jwksResponse.status} ${jwksResponse.statusText}`);\r\n    }\r\n    try {\r\n        const jwksDocument = await jwksResponse.json();\r\n        if (!isJwks(jwksDocument)) {\r\n            throw new Error(`[${jwksIri}] does not dereference to a valid JWKS: ${JSON.stringify(jwksDocument)}`);\r\n        }\r\n        return {\r\n            keys: [...jwksDocument.keys, jwk],\r\n        };\r\n    }\r\n    catch (e) {\r\n        throw new Error(`Parsing the document at [${jwksIri}] failed: ${e}`);\r\n    }\r\n}\r\n/**\r\n * Adds a public key to the JWKS listed in the profile associated to the given WebID.\r\n * Retrieves the profile document for the specified WebID and looks up the associated\r\n * JWKS. Having added the given key to the JWKS, this function overwrites the\r\n * previous JWKS so that the new version is saved. This assumes the JWKS is hosted\r\n * at a read-write IRI, such as in a Solid Pod.\r\n *\r\n * @param publicKey The public key value to set.\r\n * @param webId The WebID whose profile document references the key set to which we wish to add the specified public key.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 1.12.0\r\n */\r\nasync function addPublicKeyToProfileJwks(publicKey, webId, options = internal_defaultFetchOptions) {\r\n    const profileDataset = await getSolidDataset(webId, {\r\n        fetch: options.fetch,\r\n    });\r\n    if (profileDataset === null) {\r\n        throw new Error(`The profile document associated with WebID [${webId}] could not be retrieved.`);\r\n    }\r\n    const jwksIri = getProfileJwksIri(profileDataset, webId);\r\n    if (jwksIri === null) {\r\n        throw new Error(`No key set is declared for the property [${security.publicKey}] in the profile of [${webId}]`);\r\n    }\r\n    const updatedJwks = await addJwkToJwks(publicKey, jwksIri, options);\r\n    return overwriteFile(jwksIri, new Blob([JSON.stringify(updatedJwks)]), {\r\n        contentType: \"application/json\",\r\n        fetch: options.fetch,\r\n    });\r\n}\n\n//\r\n/**\r\n * List all the alternative profiles IRI found in a given WebID profile.\r\n *\r\n * Note that some of these profiles may be private, and you may not have access to\r\n * the resulting resource.\r\n *\r\n * @param webId The WebID of the user's whose alternative profiles you are discovering.\r\n * @param webIdProfile The WebID profile obtained dereferencing the provided WebID.\r\n * @returns A list of URLs of the user's alternative profiles.\r\n * @since 1.20.0\r\n */\r\nfunction getAltProfileUrlAllFrom(webId, webIdProfile) {\r\n    const webIdThing = getThing(webIdProfile, webId);\r\n    const altProfileUrlAll = getThingAll(webIdProfile)\r\n        .filter((thing) => getIriAll(thing, foaf.primaryTopic).length > 0)\r\n        .map(asIri)\r\n        .concat(webIdThing ? getIriAll(webIdThing, foaf.isPrimaryTopicOf) : [])\r\n        .filter((profileIri) => profileIri !== getSourceIri(webIdProfile));\r\n    // Deduplicate the results.\r\n    return Array.from(new Set(altProfileUrlAll));\r\n}\r\nasync function getProfileAll(webId, options = internal_defaultFetchOptions) {\r\n    var _a, _b;\r\n    const authFetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : fetch;\r\n    const webIdProfile = (_b = options.webIdProfile) !== null && _b !== void 0 ? _b : (await getSolidDataset(webId, { fetch: crossFetch.fetch }));\r\n    const altProfileAll = (await Promise.allSettled(getAltProfileUrlAllFrom(webId, webIdProfile).map((uniqueProfileIri) => getSolidDataset(uniqueProfileIri, { fetch: authFetch }))))\r\n        // Ignore the alternative profiles lookup which failed.\r\n        .filter((result) => result.status === \"fulfilled\")\r\n        .map((successfulResult) => successfulResult.value);\r\n    return {\r\n        webIdProfile,\r\n        altProfileAll,\r\n    };\r\n}\r\n/**\r\n * Discover the Pods an agent advertises for in their profile resources. Both the\r\n * agent's WebID and alternative profiles are fetched. Note that this function will\r\n * only return URLs of Pods linked to using the `pim:storage`, i.e. a triple\r\n * looking like <myWebid, pim:storage, myPodUrl> should appear in the profile\r\n * resources.\r\n *\r\n * @param webId The WebID of the agent whose Pods should be discovered\r\n * @param options Optional parameter\r\n * - `options.fetch`: An alternative `fetch` function to make the HTTP request,\r\n *    compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns a Promise resolving to an array containing the URLs of all the Pods\r\n * linked from the agent's profile resource using the `pim:storage` predicate.\r\n * @since 1.18.0\r\n */\r\nasync function getPodUrlAll(webId, options = internal_defaultFetchOptions) {\r\n    const profiles = await getProfileAll(webId, options);\r\n    return getPodUrlAllFrom(profiles, webId);\r\n}\r\n/**\r\n * Discover the Pods advertised for in the provided profile resources. Note that\r\n * this function will only return URLs of Pods linked to using the `pim:storage`\r\n * predicate, i.e. a triple looking like <myWebid, pim:storage, myPodUrl>\r\n * should appear in the profile resources.\r\n *\r\n * @param profiles The profile resources in which the Pods should be discovered\r\n * @param webId The WebID of the agent whose Pods should be discovered\r\n * @returns An array containing the URLs of all the Pods linked from the agent's\r\n * profile resource using the `pim:storage` predicate.\r\n * @since 1.18.0\r\n */\r\nfunction getPodUrlAllFrom(profiles, webId) {\r\n    const result = new Set();\r\n    [profiles.webIdProfile, ...profiles.altProfileAll].forEach((profileResource) => {\r\n        const webIdThing = getThing(profileResource, webId);\r\n        if (webIdThing !== null) {\r\n            getIriAll(webIdThing, pim.storage).forEach((podIri) => result.add(podIri));\r\n        }\r\n    });\r\n    return Array.from(result);\r\n}\r\n/**\r\n * Get the WebID Profile document dataset.\r\n *\r\n * @example\r\n * ```\r\n * const webId = \"https://example.org/people/me\";\r\n * const profile = await getWebIdDataset(webId);\r\n * const podRoot = getPodUrlAllFrom({ webIdProfile: profile, altProfileAll: [] }, webId);\r\n * const profileThing = getThing(profile, webId);\r\n * const name = getStringNoLocale(profileThing, FOAF.name);\r\n * ```\r\n *\r\n * @param webId The WebID of the agent whose WebID Profile dataset is to be fetched.\r\n * @returns a SolidDataset for the WebID Profile document.\r\n * @since 1.24.0\r\n */\r\nasync function getWebIdDataset(webId) {\r\n    return getSolidDataset(webId, { fetch: crossFetch.fetch });\r\n}\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\nconst prefixes = {\r\n    acl: \"http://www.w3.org/ns/auth/acl#\",\r\n    acp: \"http://www.w3.org/ns/solid/acp#\",\r\n    cc: \"http://creativecommons.org/ns#\",\r\n    cert: \"http://www.w3.org/ns/auth/cert#\",\r\n    csvw: \"http://www.w3.org/ns/csvw#\",\r\n    current: \"#\",\r\n    dc: \"http://purl.org/dc/terms/\",\r\n    dcam: \"http://purl.org/dc/dcam/\",\r\n    dcat: \"http://www.w3.org/ns/dcat#\",\r\n    dctype: \"http://purl.org/dc/dcmitype/\",\r\n    foaf: \"http://xmlns.com/foaf/0.1/\",\r\n    ldp: \"http://www.w3.org/ns/ldp#\",\r\n    owl: \"http://www.w3.org/2002/07/owl#\",\r\n    posixstat: \"http://www.w3.org/ns/posix/stat#\",\r\n    rdf: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\r\n    rdfs: \"http://www.w3.org/2000/01/rdf-schema#\",\r\n    schema: \"https://schema.org/\",\r\n    shacl: \"http://www.w3.org/ns/shacl#\",\r\n    skos: \"http://www.w3.org/2004/02/skos/core#\",\r\n    skosxl: \"http://www.w3.org/2008/05/skos-xl#\",\r\n    solid: \"http://www.w3.org/ns/solid/terms#\",\r\n    swapdoc: \"http://www.w3.org/2000/10/swap/pim/doc#\",\r\n    ui: \"http://www.w3.org/ns/ui#\",\r\n    vann: \"http://purl.org/vocab/vann/\",\r\n    vcard: \"http://www.w3.org/2006/vcard/ns#\",\r\n    ws: \"http://www.w3.org/ns/pim/space#\",\r\n    xsd: \"http://www.w3.org/2001/XMLSchema#\",\r\n};\n\n//\r\n/**\r\n * A function to serialise a Solid Dataset as Turtle\r\n *\r\n * @param dataset The Dataset to serialize as Turtle\r\n * @param options.prefixes The Prefixes to use for Turtle serialisation (defaulting to a set of well known prefixes)\r\n * @param options.thing Restricts serialisation to the part of a dataset related to the thing\r\n * @returns RDF serialised as Turtle\r\n * @since 1.20.0\r\n */\r\nasync function solidDatasetAsTurtle(dataset, options) {\r\n    const { prefixes: prefixes$1 = prefixes, thing } = Object.assign({}, options);\r\n    const writer = new n3.Writer({ format: \"application/turtle\", prefixes: prefixes$1 });\r\n    const subject = thing ? new n3.NamedNode(thing) : undefined;\r\n    // If the subject is undefined, all the triples match.\r\n    for (const quad of toRdfJsDataset(dataset).match(subject)) {\r\n        writer.addQuad(quad);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        writer.end((error, result) => {\r\n            /* istanbul ignore next */\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\n\n//\r\n/** @hidden */\r\nfunction internal_getAcr(resource) {\r\n    if (!hasAccessibleAcr(resource)) {\r\n        throw new Error(`An Access Control Resource for [${getSourceUrl(resource)}] is not available. This could be because the current user is not allowed to see it, or because their Pod Server does not support Access Control Resources.`);\r\n    }\r\n    return resource.internal_acp.acr;\r\n}\r\n/** @hidden */\r\nfunction internal_setAcr(resource, acr) {\r\n    return Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: Object.assign(Object.assign({}, resource.internal_acp), { acr }),\r\n    });\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new [[Control]].\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_createControl(options) {\r\n    let control = createThing(options);\r\n    control = setIri(control, rdf.type, acp.AccessControl);\r\n    return control;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Find an [[Control]] with a given URL in a given Resource with an Access Control Resource.\r\n *\r\n * @returns The requested Access Control, or `null` if it could not be found.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_getControl(withAccessControlResource, url, options) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const foundThing = getThing(acr, url, options);\r\n    if (foundThing === null ||\r\n        !getIriAll(foundThing, rdf.type).includes(acp.AccessControl)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Control]]s in the Access Control Resource of a given Resource.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_getControlAll(withAccessControlResource, options) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const foundThings = getThingAll(acr, options);\r\n    const explicitAccessControl = foundThings.filter((foundThing) => getIriAll(foundThing, rdf.type).includes(acp.AccessControl));\r\n    const implicitAccessControl = foundThings\r\n        .filter((foundThing) => getIriAll(foundThing, acp.accessControl).length > 0)\r\n        .map((thingWithAccessControl) => {\r\n        // The initial filter ensures that at least one AccessControl will be found.\r\n        const controlIri = getIriAll(thingWithAccessControl, acp.accessControl)[0];\r\n        // The found control is only an object in the current dataset, so we create the\r\n        // associated thing in order to possibly make it a subject.\r\n        return createThing({ url: controlIri });\r\n    });\r\n    return explicitAccessControl.concat(implicitAccessControl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert an [[Control]] into the [[AccessControlResource]] of a Resource, replacing previous\r\n * instances of that Access Control.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource into which to insert an Access Control.\r\n * @param control The Control to insert into the Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, but with the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_setControl(withAccessControlResource, control) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const updatedAcr = setThing(acr, control);\r\n    const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the Resource to which\r\n * the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_addPolicyUrl(accessControl, policyUrl) {\r\n    return addIri(accessControl, acp.apply, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_getPolicyUrlAll(accessControl) {\r\n    return getIriAll(accessControl, acp.apply);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the Resource to which the given [[Control]] is linked,\r\n * and which can be removed by anyone with Write access to the Access Control Resource that contains\r\n * the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @param policyUrl URL of the Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removePolicyUrl(accessControl, policyUrl) {\r\n    return removeIri(accessControl, acp.apply, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removePolicyUrlAll(accessControl) {\r\n    return removeAll(accessControl, acp.apply);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the children of the\r\n * Resource to which the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the children of the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it as a Member Policy.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_addMemberPolicyUrl(accessControl, policyUrl) {\r\n    return addIri(accessControl, acp.applyMembers, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the children of the Resource to which the given [[Control]] is\r\n * linked, and which can be removed by anyone with Write access to the Access Control Resource that\r\n * contains the [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the children of the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_getMemberPolicyUrlAll(accessControl) {\r\n    return getIriAll(accessControl, acp.applyMembers);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the children of the Resource to which the given Access\r\n * Control is linked, and which can be removed by anyone with Write access to the Access Control\r\n * Resource that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policy.\r\n * @param policyUrl URL of the Member Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Member Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removeMemberPolicyUrl(accessControl, policyUrl) {\r\n    return removeIri(accessControl, acp.applyMembers, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the children of the Resource to which the given Access Control\r\n * is linked, and which can be removed by anyone with Write access to the Access Control Resource\r\n * that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Member Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removeMemberPolicyUrlAll(accessControl) {\r\n    return removeAll(accessControl, acp.applyMembers);\r\n}\r\nfunction internal_getInitialisedControl(resourceWithAcr) {\r\n    const allControls = internal_getControlAll(resourceWithAcr);\r\n    return allControls.length === 0 ? internal_createControl() : allControls[0];\r\n}\n\n//\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a Resource, check whether it is governed by Access Policies.\r\n * (Specifically, a Resource that is governed by Access Policies will refer to exactly one Access\r\n * Control Resource, and expose that to users who are allowed to see or modify access to the given\r\n * Resource.)\r\n *\r\n * @param resource Resource which may or may not be governed by Access Policies.\r\n * @returns True if the Resource refers to an Access Control Resource and is hence governed by Access Policies, or false if it does not.\r\n * @since 1.6.0\r\n */\r\nfunction hasLinkedAcr(resource) {\r\n    return (hasServerResourceInfo(resource) &&\r\n        Array.isArray(resource.internal_resourceInfo.linkedResources[acp.accessControl]) &&\r\n        resource.internal_resourceInfo.linkedResources[acp.accessControl].length ===\r\n            1);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access\r\n * Control Resource itself, rather than the Resource it governs.\r\n *\r\n * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resource.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.\r\n * @since 1.6.0\r\n */\r\nfunction addAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    var _a;\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({ url: acrUrl });\r\n    acrThing = addIri(acrThing, acp.access, policyUrl);\r\n    const updatedAcr = setThing(acr, acrThing);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to a Resource's Access Control Resource such that that\r\n * Policy applies to the Access Control Resources of child Resources.\r\n *\r\n * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resources of children of the Resource.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.\r\n * @since 1.6.0\r\n */\r\nfunction addMemberAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    var _a;\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({ url: acrUrl });\r\n    acrThing = addIri(acrThing, acp.accessMembers, policyUrl);\r\n    const updatedAcr = setThing(acr, acrThing);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to an Access Control Resource itself, rather than\r\n * to the Resource it governs.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction getAcrPolicyUrlAll$1(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, acp.access);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the Access Control Resources of the given Resource's children.\r\n * @since 1.6.0\r\n */\r\nfunction getMemberAcrPolicyUrlAll$1(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, acp.accessMembers);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy removed from it.\r\n * @since 1.6.0\r\n */\r\nfunction removeAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeIri(acrThing, acp.access, policyUrl);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Access Control Resources of the\r\n * Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children's ACRs the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given member ACR Policy removed from it.\r\n * @since 1.6.0\r\n */\r\nfunction removeMemberAcrPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeIri(acrThing, acp.accessMembers, policyUrl);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which no more Policies should apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to it.\r\n * @since 1.6.0\r\n */\r\nfunction removeAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeAll(acrThing, acp.access);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children's ACRs.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to its children's ACRs.\r\n * @since 1.6.0\r\n */\r\nfunction removeMemberAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeAll(acrThing, acp.accessMembers);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy added to it.\r\n * @since 1.6.0\r\n */\r\nfunction addPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    const control = internal_getInitialisedControl(resourceWithAcr);\r\n    const updatedControl = internal_addPolicyUrl(control, policyUrl);\r\n    const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to a Resource's Access Control Resource such that that\r\n * Policy applies to that Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource to whose Access Control Resource the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource's children.\r\n * @returns A new Resource equal to the given Resource, but with the given Member Policy added to its Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction addMemberPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    const control = internal_getInitialisedControl(resourceWithAcr);\r\n    const updatedControl = internal_addMemberPolicyUrl(control, policyUrl);\r\n    const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Resource.\r\n * @since 1.6.0\r\n */\r\nfunction getPolicyUrlAll$1(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const policyUrlsByControl = controls.map((control) => internal_getPolicyUrlAll(control));\r\n    const uniquePolicyUrls = new Set();\r\n    policyUrlsByControl.forEach((policyUrls) => {\r\n        policyUrls.forEach((url) => uniquePolicyUrls.add(url));\r\n    });\r\n    return Array.from(uniquePolicyUrls);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the given Resource's children.\r\n * @since 1.6.0\r\n */\r\nfunction getMemberPolicyUrlAll$1(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const memberPolicyUrlsByControl = controls.map((control) => internal_getMemberPolicyUrlAll(control));\r\n    const uniquePolicyUrls = new Set();\r\n    memberPolicyUrlsByControl.forEach((policyUrls) => {\r\n        policyUrls.forEach((url) => uniquePolicyUrls.add(url));\r\n    });\r\n    return Array.from(uniquePolicyUrls);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy removed from it.\r\n * @since 1.6.0\r\n */\r\nfunction removePolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removePolicyUrl(control, policyUrl));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Member Policy removed from it.\r\n * @since 1.6.0\r\n */\r\nfunction removeMemberPolicyUrl$1(resourceWithAcr, policyUrl) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removeMemberPolicyUrl(control, policyUrl));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which no more Policies should apply.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource.\r\n * @since 1.6.0\r\n */\r\nfunction removePolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removePolicyUrlAll(control));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children.\r\n * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource's children.\r\n * @since 1.6.0\r\n */\r\nfunction removeMemberPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removeMemberPolicyUrlAll(control));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Control]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param resourceWithAcr The Resource with an attached Access Control Resource of which you want to get a human-readable representation.\r\n * @since 1.6.0\r\n * @deprecated\r\n */\r\nfunction acrAsMarkdown(resourceWithAcr) {\r\n    let markdown = `# Access controls for ${getSourceUrl(resourceWithAcr)}\\n`;\r\n    const policyUrls = getPolicyUrlAll$1(resourceWithAcr);\r\n    const memberPolicyUrls = getMemberPolicyUrlAll$1(resourceWithAcr);\r\n    const acrPolicyUrls = getAcrPolicyUrlAll$1(resourceWithAcr);\r\n    const memberAcrPolicyUrls = getMemberAcrPolicyUrlAll$1(resourceWithAcr);\r\n    if (policyUrls.length === 0 &&\r\n        memberPolicyUrls.length === 0 &&\r\n        acrPolicyUrls.length === 0 &&\r\n        memberAcrPolicyUrls.length === 0) {\r\n        markdown += \"\\n<no policies specified yet>\\n\";\r\n    }\r\n    if (policyUrls.length > 0) {\r\n        markdown += \"\\nThe following policies apply to this resource:\\n- \";\r\n        markdown += `${policyUrls.join(\"\\n- \")}\\n`;\r\n    }\r\n    if (acrPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the access control resource for this resource:\\n- \";\r\n        markdown += `${acrPolicyUrls.join(\"\\n- \")}\\n`;\r\n    }\r\n    if (memberPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the children of this resource:\\n- \";\r\n        markdown += `${memberPolicyUrls.join(\"\\n- \")}\\n`;\r\n    }\r\n    if (memberAcrPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the access control resources for children of this resource:\\n- \";\r\n        markdown += `${memberAcrPolicyUrls.join(\"\\n- \")}\\n`;\r\n    }\r\n    return markdown;\r\n}\n\n//\r\n// Copyright 2022 Inrupt Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n// Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n/** @hidden */\r\nconst ACP_NAMESPACE = \"http://www.w3.org/ns/solid/acp#\";\r\n/** @hidden */\r\nconst ACP = {\r\n    AccessControl: ACP_NAMESPACE.concat(\"AccessControl\"),\r\n    AccessControlResource: ACP_NAMESPACE.concat(\"AccessControlResource\"),\r\n    AuthenticatedAgent: ACP_NAMESPACE.concat(\"AuthenticatedAgent\"),\r\n    CreatorAgent: ACP_NAMESPACE.concat(\"CreatorAgent\"),\r\n    Matcher: ACP_NAMESPACE.concat(\"Matcher\"),\r\n    Policy: ACP_NAMESPACE.concat(\"Policy\"),\r\n    PublicAgent: ACP_NAMESPACE.concat(\"PublicAgent\"),\r\n    access: ACP_NAMESPACE.concat(\"access\"),\r\n    accessControl: ACP_NAMESPACE.concat(\"accessControl\"),\r\n    agent: ACP_NAMESPACE.concat(\"agent\"),\r\n    allOf: ACP_NAMESPACE.concat(\"allOf\"),\r\n    allow: ACP_NAMESPACE.concat(\"allow\"),\r\n    anyOf: ACP_NAMESPACE.concat(\"anyOf\"),\r\n    apply: ACP_NAMESPACE.concat(\"apply\"),\r\n    client: ACP_NAMESPACE.concat(\"client\"),\r\n    deny: ACP_NAMESPACE.concat(\"deny\"),\r\n    memberAccessControl: ACP_NAMESPACE.concat(\"memberAccessControl\"),\r\n    noneOf: ACP_NAMESPACE.concat(\"noneOf\"),\r\n    vc: ACP_NAMESPACE.concat(\"vc\"),\r\n};\r\n/** @hidden */\r\nconst ACL_NAMESPACE = \"http://www.w3.org/ns/auth/acl#\";\r\n/** @hidden */\r\nconst ACL = {\r\n    Append: ACL_NAMESPACE.concat(\"Append\"),\r\n    Control: ACL_NAMESPACE.concat(\"Control\"),\r\n    Read: ACL_NAMESPACE.concat(\"Read\"),\r\n    Write: ACL_NAMESPACE.concat(\"Write\"),\r\n};\r\n/** @hidden */\r\nconst VC_ACCESS_GRANT = \"http://www.w3.org/ns/solid/vc#SolidAccessGrant\";\n\n//\r\n/** @hidden */\r\nfunction getAccessControlResourceThing(resource) {\r\n    const acr = internal_getAcr(resource);\r\n    const acrUrl = getSourceUrl(acr);\r\n    return getThing(acr, acrUrl);\r\n}\n\n//\r\n/** @hidden */\r\nconst DEFAULT_ACCESS_CONTROL = \"defaultAccessControl\";\r\n/** @hidden */\r\nconst DEFAULT_ACR_ACCESS_CONTROL = \"defaultAcrAccessControl\";\r\n/** @hidden */\r\nconst DEFAULT_MEMBER_ACCESS_CONTROL = \"defaultMemberAccessControl\";\r\n/** @hidden */\r\nconst DEFAULT_MEMBER_ACR_ACCESS_CONTROL = \"defaultMemberAcrAccessControl\";\r\n/** @hidden */\r\nfunction getDefaultAccessControlUrl(resource, name) {\r\n    const acr = internal_getAcr(resource);\r\n    const acrUrl = getSourceUrl(acr);\r\n    return acrUrl.concat(\"#\").concat(name);\r\n}\n\n//\r\n/** @hidden */\r\nfunction getDefaultAccessControlThing(resource, name) {\r\n    const acr = internal_getAcr(resource);\r\n    const defaultAccessControlUrl = getDefaultAccessControlUrl(resource, name);\r\n    const accessControlThing = getThing(acr, defaultAccessControlUrl);\r\n    if (accessControlThing === null ||\r\n        typeof accessControlThing === \"undefined\") {\r\n        return createThing({ url: defaultAccessControlUrl });\r\n    }\r\n    return accessControlThing;\r\n}\n\n//\r\n/** @hidden */\r\nfunction getModes(policy, type) {\r\n    const modes = getIriAll(policy, type);\r\n    return {\r\n        read: modes.includes(ACL.Read),\r\n        append: modes.includes(ACL.Append),\r\n        write: modes.includes(ACL.Write),\r\n        controlRead: false,\r\n        controlWrite: false,\r\n    };\r\n}\n\n//\r\n/**\r\n * @hidden\r\n *\r\n * Internal function that attaches an ACR to a Resource. Prefer using this than\r\n * setting the internal values manually (easier to refactor when changing the internals).\r\n */\r\nfunction setAcr(resource, acr) {\r\n    return Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: {\r\n            acr,\r\n        },\r\n    });\r\n}\n\n//\r\n/** @hidden */\r\nfunction setModes(policy, modes, type) {\r\n    let newPolicy = removeAll(policy, type);\r\n    if (modes.read || modes.controlRead) {\r\n        newPolicy = addIri(newPolicy, type, ACL.Read);\r\n    }\r\n    if (modes.append) {\r\n        newPolicy = addIri(newPolicy, type, ACL.Append);\r\n    }\r\n    if (modes.write || modes.controlWrite) {\r\n        newPolicy = addIri(newPolicy, type, ACL.Write);\r\n    }\r\n    return newPolicy;\r\n}\n\n//\r\nconst DEFAULT_VC_POLICY_NAME = \"defaultVcPolicy\";\r\nconst DEFAULT_VC_MATCHER_NAME = \"defaultVcMatcher\";\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Set the maximum access modes that are allowed for a VC holder for a given resource.\r\n * If the resource owner issued an Access Grant for the resource, the agent that\r\n * has been granted access will have at most the permissions set by this function.\r\n * The Access Grant may be more restrictive.\r\n *\r\n * Note that additional access may have been set if the ACR has been manipulated\r\n * not using this library, which is currently out of scope. In this case, the access\r\n * set by this function may not apply.\r\n *\r\n * @param resourceWithAcr The resource for which the access modes are being set for VC holders.\r\n * @param access The access modes to set. Setting a mode to `true` will enable it, to `false`\r\n * will disable it, and to `undefined` will leave it unchanged compared to what was previously\r\n * set.\r\n * @returns A copy of the resource and its attached ACR, updated to the new access modes.\r\n * @since 1.17.0\r\n */\r\nfunction setVcAccess(resourceWithAcr, access) {\r\n    var _a, _b;\r\n    let acr = internal_getAcr(resourceWithAcr);\r\n    const defaultVcPolicyIri = `${getSourceIri(acr)}#${DEFAULT_VC_POLICY_NAME}`;\r\n    const defaultVcMatcherIri = `${getSourceIri(acr)}#${DEFAULT_VC_MATCHER_NAME}`;\r\n    let accessControl = getDefaultAccessControlThing(resourceWithAcr, \"defaultAccessControl\");\r\n    let acrThing = (_a = getAccessControlResourceThing(resourceWithAcr)) !== null && _a !== void 0 ? _a : buildThing({ url: getSourceIri(acr) })\r\n        .addIri(ACP.accessControl, accessControl)\r\n        .build();\r\n    if (!getIriAll(acrThing, ACP.accessControl).includes(asIri(accessControl))) {\r\n        // Case when the ACR Thing existed, but did not include a link to the default Access Control.\r\n        acrThing = addIri(acrThing, ACP.accessControl, accessControl);\r\n    }\r\n    let vcPolicy = getThing(acr, defaultVcPolicyIri);\r\n    if (vcPolicy === null) {\r\n        // If the policy does not exist, create it and link the default Access Control to it.\r\n        vcPolicy = buildThing({ url: defaultVcPolicyIri })\r\n            .addIri(rdf.type, ACP.Policy)\r\n            .addIri(ACP.anyOf, defaultVcMatcherIri)\r\n            .build();\r\n        accessControl = addIri(accessControl, ACP.apply, vcPolicy);\r\n    }\r\n    const vcMatcher = (_b = getThing(acr, defaultVcMatcherIri)) !== null && _b !== void 0 ? _b : buildThing({ url: defaultVcMatcherIri })\r\n        .addIri(rdf.type, ACP.Matcher)\r\n        .addIri(ACP.vc, VC_ACCESS_GRANT)\r\n        .build();\r\n    const currentModes = getModes(vcPolicy, ACP.allow);\r\n    // Only change the modes which are set in `access`, and preserve the others.\r\n    vcPolicy = setModes(vcPolicy, Object.assign(Object.assign({}, currentModes), access), ACP.allow);\r\n    // Write the changed access control, policy and matchers in the ACR\r\n    acr = [acrThing, accessControl, vcPolicy, vcMatcher].reduce(setThing, acr);\r\n    return setAcr(resourceWithAcr, acr);\r\n}\n\n//\r\nconst DEFAULT_NO_ACCESS = {\r\n    read: false,\r\n    append: false,\r\n    write: false,\r\n    controlRead: false,\r\n    controlWrite: false,\r\n};\r\nconst linkExists = (subject, predicate, object) => getIriAll(subject, predicate).includes(asIri(object));\r\n// TODO: It should be possible to write a `chainExists` function, taking in a chain\r\n// of Thing, predicate, Thing, predicate... and checks whether such chain exists\r\n// in a given dataset. It would make the following function much easier to read,\r\n// instead of checking at each link that it isn't null and it is connected to the\r\n// next link.\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the maximum access modes that are allowed for a VC holder for a given resource.\r\n * If the resource owner issued an Access Grant for the resource, the agent that\r\n * has been granted access will have at most the permissions returned by this function.\r\n * The Access Grant may be more restrictive.\r\n *\r\n * Note that only the modes set using [[setVcAccess]] will be returned by this function.\r\n * Additional access may have been set if the ACR has been manipulated not using this\r\n * library, which is currently out of scope.\r\n *\r\n * @param resourceWithAcr The resource for which the VC access modes are looked up.\r\n * @returns The access modes available to a VC holder.\r\n * @since 1.17.0\r\n */\r\nfunction getVcAccess(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const accessControl = getDefaultAccessControlThing(resourceWithAcr, \"defaultAccessControl\");\r\n    const acrThing = getAccessControlResourceThing(resourceWithAcr);\r\n    if (acrThing === null ||\r\n        !linkExists(acrThing, ACP.accessControl, accessControl)) {\r\n        return DEFAULT_NO_ACCESS;\r\n    }\r\n    const defaultVcPolicyIri = `${getSourceIri(acr)}#${DEFAULT_VC_POLICY_NAME}`;\r\n    const vcPolicy = getThing(acr, defaultVcPolicyIri);\r\n    if (vcPolicy === null || !linkExists(accessControl, ACP.apply, vcPolicy)) {\r\n        return DEFAULT_NO_ACCESS;\r\n    }\r\n    const defaultVcMatcherIri = `${getSourceIri(acr)}#${DEFAULT_VC_MATCHER_NAME}`;\r\n    const vcMatcher = getThing(acr, defaultVcMatcherIri);\r\n    if (vcMatcher === null || !linkExists(vcPolicy, ACP.anyOf, vcMatcher)) {\r\n        return DEFAULT_NO_ACCESS;\r\n    }\r\n    return getModes(vcPolicy, ACP.allow);\r\n}\n\n//\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACR that applies to it, if available to the authenticated user.\r\n * @since 1.6.0\r\n */\r\nasync function getSolidDatasetWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const solidDataset = await getSolidDataset(urlString, config);\r\n    const acp = await fetchAcr(solidDataset, config);\r\n    return Object.assign(Object.assign({}, solidDataset), acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a file and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the file to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A file and the ACR that applies to it, if available to the authenticated user.\r\n * @since 1.6.0\r\n */\r\nasync function getFileWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const file = await getFile(urlString, config);\r\n    const acp = await fetchAcr(file, config);\r\n    return Object.assign(file, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieve information about a Resource and its associated Access Control Resource (if available to\r\n * the current user), without fetching the Resource itself.\r\n *\r\n * @param url URL of the Resource about which to fetch its information.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Metadata describing a Resource, and the ACR that applies to it, if available to the authenticated user.\r\n * @since 1.6.0\r\n */\r\nasync function getResourceInfoWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    const acp = await fetchAcr(resourceInfo, config);\r\n    return Object.assign(Object.assign({}, resourceInfo), acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and either the ACL access data or the ACR access data, if available to the current user.\r\n * @since 1.6.0\r\n */\r\nasync function getSolidDatasetWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const solidDataset = await getSolidDataset(urlString, config);\r\n    if (hasAccessibleAcl(solidDataset)) {\r\n        const acl = await internal_fetchAcl(solidDataset, config);\r\n        return internal_setAcl(solidDataset, acl);\r\n    }\r\n    const acr = await fetchAcr(solidDataset, config);\r\n    return Object.assign(Object.assign({}, solidDataset), acr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a File, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the File to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A File and either the ACL access data or the ACR access data, if available to the current user.\r\n * @since 1.6.0\r\n */\r\nasync function getFileWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const file = await getFile(urlString, config);\r\n    if (hasAccessibleAcl(file)) {\r\n        const acl = await internal_fetchAcl(file, config);\r\n        return internal_setAcl(file, acl);\r\n    }\r\n    const acr = await fetchAcr(file, config);\r\n    return Object.assign(file, acr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch information about a Resource, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the Resource information about which to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Information about a Resource and either the ACL access data or the ACR access data, if available to the current user.\r\n * @since 1.6.0\r\n */\r\nasync function getResourceInfoWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        const acl = await internal_fetchAcl(resourceInfo, config);\r\n        return internal_setAcl(resourceInfo, acl);\r\n    }\r\n    const acr = await fetchAcr(resourceInfo, config);\r\n    return Object.assign(Object.assign({}, resourceInfo), acr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Save a Resource's Access Control Resource.\r\n *\r\n * @param resource Resource with an Access Control Resource that should be saved.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 1.6.0\r\n */\r\nasync function saveAcrFor(resource, options = internal_defaultFetchOptions) {\r\n    const acr = internal_getAcr(resource);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const savedAcr = await saveSolidDatasetAt(getSourceUrl(acr), acr, config);\r\n    return internal_setAcr(resource, savedAcr);\r\n}\r\n/**\r\n * @param resource Resource of which to check whether it has an Access Control Resource attached.\r\n * @returns Boolean representing whether the given Resource has an Access Control Resource attached for use in e.g. [[getPolicyUrlAll]].\r\n * @since 1.6.0\r\n */\r\nfunction hasAccessibleAcr(resource) {\r\n    return (typeof resource.internal_acp === \"object\" &&\r\n        resource.internal_acp !== null &&\r\n        typeof resource.internal_acp.acr === \"object\" &&\r\n        resource.internal_acp.acr !== null);\r\n}\r\nasync function fetchAcr(resource, options) {\r\n    let acrUrl;\r\n    if (hasLinkedAcr(resource)) {\r\n        // Whereas a Resource can generally have multiple linked Resources for the same relation,\r\n        // it can only have one Access Control Resource for that ACR to be valid.\r\n        // Hence the accessing of [0] directly:\r\n        const { linkedResources } = resource.internal_resourceInfo;\r\n        [acrUrl] = linkedResources[acp.accessControl];\r\n    }\r\n    else if (hasAccessibleAcl(resource)) {\r\n        // The ACP proposal will be updated to expose the Access Control Resource\r\n        // via a Link header with rel=\"acl\", just like WAC. That means that if\r\n        // an ACL is advertised, we can still fetch its metadata — if that indicates\r\n        // that it's actually an ACP Access Control Resource, then we can fetch that\r\n        // instead.\r\n        const aclResourceInfo = await getResourceInfo(resource.internal_resourceInfo.aclUrl, options);\r\n        if (isAcr(aclResourceInfo)) {\r\n            acrUrl = getSourceUrl(aclResourceInfo);\r\n        }\r\n    }\r\n    // If the Resource doesn't advertise an ACR via the old Link header,\r\n    // nor via a rel=\"acl\" header, then return, indicating that no ACR could be\r\n    // fetched:\r\n    if (typeof acrUrl !== \"string\") {\r\n        return {\r\n            internal_acp: {\r\n                acr: null,\r\n            },\r\n        };\r\n    }\r\n    let acr;\r\n    try {\r\n        acr = await getSolidDataset(acrUrl, options);\r\n    }\r\n    catch (e) {\r\n        return {\r\n            internal_acp: {\r\n                acr: null,\r\n            },\r\n        };\r\n    }\r\n    const acrDataset = Object.assign(Object.assign({}, acr), { accessTo: getSourceUrl(resource) });\r\n    const acpInfo = {\r\n        internal_acp: {\r\n            acr: acrDataset,\r\n        },\r\n    };\r\n    return acpInfo;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * To make it easy to fetch all the relevant Access Policy Resources,\r\n * this function returns all referenced Access Policy Resources referenced in an\r\n * Access Control Resource.\r\n * In other words, if Access Controls refer to different Policies in the same\r\n * Access Policy Resource, this function will only return that Access Policy\r\n * Resource's URL once.\r\n *\r\n * @param withAcr A Resource with an Access Control Resource attached.\r\n * @returns List of all unique Access Policy Resources that are referenced in the given Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction getReferencedPolicyUrlAll(withAcr) {\r\n    const policyUrls = getPolicyUrlAll$1(withAcr)\r\n        .map(normalizeServerSideIri)\r\n        .concat(getMemberPolicyUrlAll$1(withAcr).map(normalizeServerSideIri))\r\n        .concat(getAcrPolicyUrlAll$1(withAcr).map(normalizeServerSideIri))\r\n        .concat(getMemberAcrPolicyUrlAll$1(withAcr).map(normalizeServerSideIri));\r\n    const uniqueUrls = Array.from(new Set(policyUrls));\r\n    return uniqueUrls;\r\n}\r\n/**\r\n * Verify whether the access to the given resource is controlled using the ACP\r\n * system.\r\n * @param resource The target resource\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns True if the access to the resource is controlled using ACP, false otherwise.\r\n * @since 1.14.0.\r\n */\r\nasync function isAcpControlled(resource, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(resource);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    return hasAccessibleAcr(await fetchAcr(resourceInfo, config));\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a Resource, find out the URL of its governing Access Control Resource.\r\n *\r\n * @param resource Resource which should be governed by Access Policies.\r\n * @returns The URL of the Access Control Resource, or undefined if not ACR is found.\r\n * @since 1.15.0\r\n */\r\nfunction getLinkedAcrUrl(resource) {\r\n    if (!hasServerResourceInfo(resource)) {\r\n        return undefined;\r\n    }\r\n    // Two rels types are acceptable to indicate a link to an ACR.\r\n    const acrLinks = [acp.accessControl, \"acl\"].map((rel) => {\r\n        if (Array.isArray(resource.internal_resourceInfo.linkedResources[rel]) &&\r\n            resource.internal_resourceInfo.linkedResources[rel].length === 1) {\r\n            return resource.internal_resourceInfo.linkedResources[rel][0];\r\n        }\r\n        return undefined;\r\n    });\r\n    return acrLinks.find((x) => x !== undefined);\r\n}\n\n//\r\n/**\r\n * NOTE: Don't export for now (i.e. if exported, should this be `isAcpRule()` so\r\n * as not to clash with `isAclRule()`.\r\n *\r\n * @param thing the [[Thing]] to check to see if it's an ACP rule or not\r\n */\r\nfunction isRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acp.Rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" rules,\r\n * they will not be granted access.\r\n *\r\n * Also see [[addAnyOfRuleUrl]] and [[addNoneOfRuleUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since 1.6.0\r\n */\r\nfunction addAllOfRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since 1.6.0\r\n */\r\nfunction removeAllOfRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrites the rule refining the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy requires.\r\n * @returns A new [[Policy]] clone of the original one, with the \"All Of\" rules replaced.\r\n * @since 1.6.0\r\n */\r\nfunction setAllOfRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"All Of\" [[Rule]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the \"All Of\" [[Rule]]s\r\n * @since 1.6.0\r\n */\r\nfunction getAllOfRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.allOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" rules,\r\n * they will be granted access.\r\n *\r\n * Also see [[addAllOfRuleUrl]] and [[addNoneOfRuleUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since 1.6.0\r\n */\r\nfunction addAnyOfRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since 1.6.0\r\n */\r\nfunction removeAnyOfRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the rule extending the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the \"Any Of\" rules replaced.\r\n * @since 1.6.0\r\n */\r\nfunction setAnyOfRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"Any Of\" [[Rule]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the \"Any Of\" [[Rule]]s\r\n * @since 1.6.0\r\n */\r\nfunction getAnyOfRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.anyOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n *\r\n * Also see [[addAllOfRuleUrl]] and [[addAnyOfRuleUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since 1.6.0\r\n */\r\nfunction addNoneOfRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since 1.6.0\r\n */\r\nfunction removeNoneOfRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set the rules restrincting the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"None Of\" rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the \"Any Of\" rules replaced.\r\n * @since 1.6.0\r\n */\r\nfunction setNoneOfRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"None Of\" [[Rule]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the forbidden [[Rule]]s\r\n * @since 1.6.0\r\n */\r\nfunction getNoneOfRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.noneOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Rule]].\r\n *\r\n * @param url URL that identifies this [[Rule]].\r\n * @since 1.6.0\r\n */\r\nfunction createRule(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let ruleThing = createThing({ url: stringUrl });\r\n    ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);\r\n    return ruleThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[ResourceRule]] for the given Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the new Rule is to apply.\r\n * @param name Name that identifies this [[Rule]].\r\n * @since 1.6.0\r\n */\r\nfunction createResourceRuleFor(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const url = new URL(getSourceUrl(acr));\r\n    url.hash = `#${name}`;\r\n    let ruleThing = createThing({ url: url.href });\r\n    ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);\r\n    return ruleThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]] with the given URL from an [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains the given [[Rule]].\r\n * @param url URL that identifies this [[Rule]].\r\n * @returns The requested [[Rule]], if it exists, or `null` if it does not.\r\n * @since 1.6.0\r\n */\r\nfunction getRule(ruleResource, url) {\r\n    const foundThing = getThing(ruleResource, url);\r\n    if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Rule) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourceRule]] with the given name from an Resource's Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceRule]].\r\n * @param name Name that identifies this [[ResourceRule]].\r\n * @returns The requested [[ResourceRule]], if it exists, or `null` if it does not.\r\n * @since 1.6.0\r\n */\r\nfunction getResourceRule(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const url = new URL(acrUrl);\r\n    url.hash = `#${name}`;\r\n    const foundThing = getThing(acr, url.href);\r\n    if (foundThing === null || !isRule(foundThing)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[Rule]]s from a [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.\r\n * @returns The [[Rule]]s contained in this resource.\r\n * @since 1.6.0\r\n */\r\nfunction getRuleAll(ruleResource) {\r\n    const things = getThingAll(ruleResource);\r\n    return things.filter(isRule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[ResourceRule]]s from a Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.\r\n * @returns The [[ResourceRule]]s contained in this Resource's Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction getResourceRuleAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const things = getThingAll(acr);\r\n    return things.filter(isRule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[Rule]] from the given [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.\r\n * @returns A new SolidDataset equal to the given Rule Resource, but without the given Rule.\r\n * @since 1.6.0\r\n */\r\nfunction removeRule(ruleResource, rule) {\r\n    return removeThing(ruleResource, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[ResourceRule]] from the given Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.\r\n * @returns A new Resource equal to the given Resource, but without the given Rule in its ACR.\r\n * @since 1.6.0\r\n */\r\nfunction removeResourceRule(resourceWithAcr, rule) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    let ruleToRemove;\r\n    if (typeof rule === \"string\") {\r\n        if (internal_isValidUrl(rule)) {\r\n            ruleToRemove = rule;\r\n        }\r\n        else {\r\n            // If the given Rule to remove is the name of the Rule,\r\n            // resolve it to its full URL — developers usually refer to either the\r\n            // Rule itself, or by its name, as they do not have access to the ACR\r\n            // directly.\r\n            const ruleUrl = new URL(getSourceUrl(acr));\r\n            ruleUrl.hash = `#${rule}`;\r\n            ruleToRemove = ruleUrl.href;\r\n        }\r\n    }\r\n    else if (isNamedNode(rule)) {\r\n        ruleToRemove = internal_toIriString(rule);\r\n    }\r\n    else {\r\n        ruleToRemove = asUrl(rule);\r\n    }\r\n    // Check whether the actual Rule (i.e. with the Rule type) exists:\r\n    const matchingRule = getResourceRule(resourceWithAcr, new URL(ruleToRemove).hash.substring(1));\r\n    if (matchingRule === null) {\r\n        // No such Rule exists yet, so return the Resource+ACR unchanged:\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcr = removeThing(acr, matchingRule);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Rule]] into the given [[SolidDataset]], replacing previous\r\n * instances of that Rule.\r\n *\r\n * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.\r\n * @returns A new SolidDataset equal to the given Rule Resource, but with the given Rule.\r\n * @since 1.6.0\r\n */\r\nfunction setRule(ruleResource, rule) {\r\n    return setThing(ruleResource, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourceRule]] into the given Resource's Access Control Resource,\r\n * replacing previous instances of that Rule.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.\r\n * @returns A new Resource equal to the given Resource, but with the given Rule in its ACR.\r\n * @since 1.6.0\r\n */\r\nfunction setResourceRule(resourceWithAcr, rule) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const updatedAcr = setThing(acr, rule);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the agents a [[Rule]] applies **directly** to. This will not include agents\r\n * that are part of a group the [[Rule]] applies to, nor will it include specific agent\r\n * classes, such as authenticated or public agents.\r\n *\r\n * @param rule The rule from which agents are read.\r\n * @returns A list of the WebIDs of agents included in the rule.\r\n * @since 1.6.0\r\n */\r\nfunction getAgentAll$1(rule) {\r\n    return getIriAll(rule, acp.agent).filter((agent) => agent !== acp.PublicAgent &&\r\n        agent !== acp.AuthenticatedAgent &&\r\n        agent !== acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the agents the [[Rule]] applies to with the provided agents.\r\n *\r\n * @param rule The rule for which agents are set.\r\n * @param agent The agent the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of agents.\r\n * @since 1.6.0\r\n */\r\nfunction setAgent$1(rule, agent) {\r\n    // Preserve the special agent classes authenticated and public, which we\r\n    // don't want to overwrite with this function.\r\n    const isPublic = hasPublic$1(rule);\r\n    const isAuthenticated = hasAuthenticated$1(rule);\r\n    const isCreator = hasCreator$1(rule);\r\n    let result = setIri(rule, acp.agent, agent);\r\n    // Restore public and authenticated\r\n    if (isPublic) {\r\n        result = setPublic$1(result);\r\n    }\r\n    if (isAuthenticated) {\r\n        result = setAuthenticated$1(result);\r\n    }\r\n    if (isCreator) {\r\n        result = setCreator$1(result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional agent.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional agent.\r\n * @param agent The agent the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional agent.\r\n * @since 1.6.0\r\n */\r\nfunction addAgent$1(rule, agent) {\r\n    return addIri(rule, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given agent directly. This will not\r\n * remove the agent from any groups the rule applies to.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given agent.\r\n * @param agent The agent the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given agent.\r\n * @since 1.6.0\r\n */\r\nfunction removeAgent$1(rule, agent) {\r\n    return removeIri(rule, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Lists all the groups a [[Rule]] applies to.\r\n *\r\n * @param rule The rule from which groups are read.\r\n * @returns A list of the [[URL]]'s of groups included in the rule.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\r\nfunction getGroupAll(rule) {\r\n    return getIriAll(rule, acp.group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the groups the [[Rule]] applies to with the provided groups.\r\n *\r\n * @param rule The rule for which groups are set.\r\n * @param group The group the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of groups.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\r\nfunction setGroup(rule, group) {\r\n    return setIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional group.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional group.\r\n * @param agent The group the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional group.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\r\nfunction addGroup(rule, group) {\r\n    return addIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given group.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given group.\r\n * @param agent The group the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given group.\r\n * @since 1.6.0\r\n * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.\r\n */\r\nfunction removeGroup(rule, group) {\r\n    return removeIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any agent.\r\n *\r\n * @param rule The rule checked for public access.\r\n * @returns Whether the rule applies to any agent or not.\r\n * @since 1.6.0\r\n */\r\nfunction hasPublic$1(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.PublicAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to apply to any Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply to any agent.\r\n * @since 1.6.0\r\n */\r\nfunction setPublic$1(rule) {\r\n    // The second argument should not be part of the function signature,\r\n    // so it's not in the parameter list:\r\n    // eslint-disable-next-line prefer-rest-params\r\n    if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\r\n        throw new Error(\"The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.\");\r\n    }\r\n    return addIri(rule, acp.agent, acp.PublicAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to no longer apply to any Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to no longer apply to any agent.\r\n * @since 1.6.0\r\n */\r\nfunction removePublic$1(rule) {\r\n    return removeIri(rule, acp.agent, acp.PublicAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any authenticated agent.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to any authenticated agent or not.\r\n * @since 1.6.0\r\n */\r\nfunction hasAuthenticated$1(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.AuthenticatedAgent).length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to apply to any authenticated Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply to any authenticated Agent.\r\n * @since 1.6.0\r\n */\r\nfunction setAuthenticated$1(rule) {\r\n    // The second argument should not be part of the function signature,\r\n    // so it's not in the parameter list:\r\n    // eslint-disable-next-line prefer-rest-params\r\n    if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\r\n        throw new Error(\"The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.\");\r\n    }\r\n    return addIri(rule, acp.agent, acp.AuthenticatedAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to no longer apply to any authenticated Agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply/not apply to any authenticated agent.\r\n * @since 1.6.0\r\n */\r\nfunction removeAuthenticated$1(rule) {\r\n    return removeIri(rule, acp.agent, acp.AuthenticatedAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to the creator of the Resource.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to the creator of the Resource or not.\r\n * @since 1.6.0\r\n */\r\nfunction hasCreator$1(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.CreatorAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to apply to the creator of a Resource.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply to the creator of a Resource.\r\n * @since 1.6.0\r\n */\r\nfunction setCreator$1(rule) {\r\n    // The second argument should not be part of the function signature,\r\n    // so it's not in the parameter list:\r\n    // eslint-disable-next-line prefer-rest-params\r\n    if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\r\n        throw new Error(\"The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.\");\r\n    }\r\n    return addIri(rule, acp.agent, acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Rule to no longer apply to the creator of a Resource.\r\n *\r\n * @param rule The rule being modified.\r\n * @returns A copy of the rule, updated to apply/not apply to the creator of a Resource.\r\n * @since 1.6.0\r\n */\r\nfunction removeCreator$1(rule) {\r\n    return removeIri(rule, acp.agent, acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the clients a [[Rule]] applies **directly** to. This will not include\r\n * specific client classes, such as public clients.\r\n *\r\n * @param rule The rule from which clients are read.\r\n * @returns A list of the WebIDs of clients included in the rule.\r\n * @since 1.6.0\r\n */\r\nfunction getClientAll$1(rule) {\r\n    return getIriAll(rule, acp.client).filter((client) => client !== solid.PublicOidcClient);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the clients the [[Rule]] applies to with the provided Client.\r\n *\r\n * @param rule The rule for which clients are set.\r\n * @param client The Client the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of Clients.\r\n * @since 1.6.0\r\n */\r\nfunction setClient$1(rule, client) {\r\n    // Preserve the special \"any client\" class, which we\r\n    // don't want to overwrite with this function.\r\n    const anyClientEnabled = hasAnyClient$1(rule);\r\n    let result = setIri(rule, acp.client, client);\r\n    // Restore the \"any client\" class\r\n    if (anyClientEnabled) {\r\n        result = setAnyClient$1(result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional Client.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional Client.\r\n * @param client The Client the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional Client.\r\n * @since 1.6.0\r\n */\r\nfunction addClient$1(rule, client) {\r\n    return addIri(rule, acp.client, client);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given Client directly.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given Client.\r\n * @param client The Client the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given Client.\r\n * @since 1.6.0\r\n */\r\nfunction removeClient$1(rule, client) {\r\n    return removeIri(rule, acp.client, client);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any client, i.e. all the applications\r\n * regardless of their identifier.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to public clients.\r\n * @since 1.6.0\r\n */\r\nfunction hasAnyClient$1(rule) {\r\n    return (getIriAll(rule, acp.client).filter((client) => client === solid.PublicOidcClient).length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Rule]] apply to any client application.\r\n *\r\n * @param rule The rule for which clients are set.\r\n * @returns A copy of the rule, updated to apply to any client\r\n * @since 1.6.0\r\n */\r\nfunction setAnyClient$1(rule) {\r\n    return addIri(rule, acp.client, solid.PublicOidcClient);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Rule]] no longer apply to any client application.\r\n *\r\n * @param rule The rule for which clients are set.\r\n * @returns A copy of the rule, updated to no longer apply to any client\r\n * @since 1.6.0\r\n */\r\nfunction removeAnyClient$1(rule) {\r\n    return removeIri(rule, acp.client, solid.PublicOidcClient);\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Rule]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param rule The Rule to get a human-readable representation of.\r\n * @since 1.6.0\r\n */\r\nfunction ruleAsMarkdown(rule) {\r\n    let markdown = `## Rule: ${asUrl(rule)}\\n\\n`;\r\n    let targetEnumeration = \"\";\r\n    if (hasPublic$1(rule)) {\r\n        targetEnumeration += \"- Everyone\\n\";\r\n    }\r\n    if (hasAuthenticated$1(rule)) {\r\n        targetEnumeration += \"- All authenticated agents\\n\";\r\n    }\r\n    if (hasCreator$1(rule)) {\r\n        targetEnumeration += \"- The creator of this resource\\n\";\r\n    }\r\n    if (hasAnyClient$1(rule)) {\r\n        targetEnumeration += \"- Users of any client application\\n\";\r\n    }\r\n    const targetAgents = getAgentAll$1(rule);\r\n    if (targetAgents.length > 0) {\r\n        targetEnumeration += \"- The following agents:\\n  - \";\r\n        targetEnumeration += `${targetAgents.join(\"\\n  - \")}\\n`;\r\n    }\r\n    const targetGroups = getGroupAll(rule);\r\n    if (targetGroups.length > 0) {\r\n        targetEnumeration += \"- Members of the following groups:\\n  - \";\r\n        targetEnumeration += `${targetGroups.join(\"\\n  - \")}\\n`;\r\n    }\r\n    const targetClients = getClientAll$1(rule);\r\n    if (targetClients.length > 0) {\r\n        targetEnumeration += \"- Users of the following client applications:\\n  - \";\r\n        targetEnumeration += `${targetClients.join(\"\\n  - \")}\\n`;\r\n    }\r\n    markdown +=\r\n        targetEnumeration.length > 0\r\n            ? `This rule applies to:\\n${targetEnumeration}`\r\n            : \"<empty>\\n\";\r\n    return markdown;\r\n}\n\n//\r\n/**\r\n * @param thing the [[Thing]] to check to see if it's an ACP Policy or not\r\n */\r\nfunction isPolicy(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acp.Policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Policy]].\r\n *\r\n * @param url URL that identifies this Policy.\r\n * @since 1.6.0\r\n */\r\nfunction createPolicy(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let policyThing = createThing({ url: stringUrl });\r\n    policyThing = setUrl(policyThing, rdf.type, acp.Policy);\r\n    return policyThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Policy]] with the given URL from an [[SolidDataset]].\r\n *\r\n * @param policyResource The Resource that contains the given Policy.\r\n * @param url URL that identifies this Policy.\r\n * @returns The requested Policy, if it exists, or `null` if it does not.\r\n * @since 1.6.0\r\n */\r\nfunction getPolicy(policyResource, url) {\r\n    const foundThing = getThing(policyResource, url);\r\n    if (foundThing === null || !isPolicy(foundThing)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Policy]]'s in a given [[SolidDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @since 1.6.0\r\n */\r\nfunction getPolicyAll(policyResource) {\r\n    const foundThings = getThingAll(policyResource);\r\n    const foundPolicies = foundThings.filter((thing) => !isThingLocal(thing) && isPolicy(thing));\r\n    return foundPolicies;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[Policy]] from the given [[SolidDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to remove from the resource.\r\n * @since 1.6.0\r\n */\r\nfunction removePolicy(policyResource, policy) {\r\n    return removeThing(policyResource, policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Policy]] into the given [[SolidDataset]], replacing previous instances of that Policy.\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to insert into the Resource.\r\n * @returns A new dataset equal to the given resource, but with the given Policy.\r\n * @since 1.6.0\r\n */\r\nfunction setPolicy(policyResource, policy) {\r\n    return setThing(policyResource, policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes allowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to allow.\r\n * @param modes Modes to allow for this Policy.\r\n * @since Not released yet.\r\n */\r\nfunction setAllowModesV2(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.allow);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes allowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to allow.\r\n * @param modes Modes to allow for this Policy.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[setAllowModesV2]].\r\n */\r\nfunction setAllowModesV1(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.allow);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it allows.\r\n *\r\n * @param policy The Policy for which you want to know the Access Modes it allows.\r\n * @since Not released yet.\r\n */\r\nfunction getAllowModesV2(policy) {\r\n    const allowedModes = getIriAll(policy, acp.allow);\r\n    return {\r\n        read: allowedModes.includes(internal_accessModeIriStrings.read),\r\n        append: allowedModes.includes(internal_accessModeIriStrings.append),\r\n        write: allowedModes.includes(internal_accessModeIriStrings.write),\r\n    };\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it allows.\r\n *\r\n * @param policy The Policy for which you want to know the Access Modes it allows.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[getAllowModesV2]].\r\n */\r\nfunction getAllowModesV1(policy) {\r\n    const allowedModes = getIriAll(policy, acp.allow);\r\n    return {\r\n        read: allowedModes.includes(acp.Read),\r\n        append: allowedModes.includes(acp.Append),\r\n        write: allowedModes.includes(acp.Write),\r\n    };\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes disallowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to disallow.\r\n * @param modes Modes to disallow for this Policy.\r\n * @since Not released yet.\r\n */\r\nfunction setDenyModesV2(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.deny);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes disallowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to disallow.\r\n * @param modes Modes to disallow for this Policy.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[setDenyModesV2]].\r\n */\r\nfunction setDenyModesV1(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.deny);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it disallows.\r\n *\r\n * @param policy The Policy on which you want to know the Access Modes it disallows.\r\n * @since Not released yet.\r\n */\r\nfunction getDenyModesV2(policy) {\r\n    const deniedModes = getIriAll(policy, acp.deny);\r\n    return {\r\n        read: deniedModes.includes(internal_accessModeIriStrings.read),\r\n        append: deniedModes.includes(internal_accessModeIriStrings.append),\r\n        write: deniedModes.includes(internal_accessModeIriStrings.write),\r\n    };\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it disallows.\r\n *\r\n * @param policy The Policy on which you want to know the Access Modes it disallows.\r\n * @since 1.6.0\r\n * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[getDenyModesV2]].\r\n */\r\nfunction getDenyModesV1(policy) {\r\n    const deniedModes = getIriAll(policy, acp.deny);\r\n    return {\r\n        read: deniedModes.includes(acp.Read),\r\n        append: deniedModes.includes(acp.Append),\r\n        write: deniedModes.includes(acp.Write),\r\n    };\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[ResourcePolicy]] for the given Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the Policy is to apply.\r\n * @param name The name that identifies this Policy.\r\n * @since 1.6.0\r\n */\r\nfunction createResourcePolicyFor(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const url = new URL(getSourceUrl(acr));\r\n    url.hash = `#${name}`;\r\n    let policyThing = createThing({ url: url.href });\r\n    policyThing = setUrl(policyThing, rdf.type, acp.Policy);\r\n    return policyThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourcePolicy]] with the given name that applies to a Resource\r\n * from its Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose ACR contains the given Policy.\r\n * @param name The name that identifies this Policy.\r\n * @returns The requested Policy, if it exists and applies to the given Resource, or `null` if it does not.\r\n * @since 1.6.0\r\n */\r\nfunction getResourcePolicy(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const url = new URL(acrUrl);\r\n    url.hash = `#${name}`;\r\n    const foundThing = getThing(acr, url.href);\r\n    if (!getPolicyUrlAll$1(resourceWithAcr).includes(url.href) ||\r\n        foundThing === null ||\r\n        !isPolicy(foundThing)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourcePolicy]] with the given name that applies to a Resource's\r\n * Access Control Resource from that Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose ACR contains the given Policy.\r\n * @param name The name that identifies this Policy.\r\n * @returns The requested Policy, if it exists and applies to the Resource's ACR, or `null` if it does not.\r\n * @since 1.6.0\r\n */\r\nfunction getResourceAcrPolicy(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const url = new URL(acrUrl);\r\n    url.hash = `#${name}`;\r\n    const foundThing = getThing(acr, url.href);\r\n    if (!getAcrPolicyUrlAll$1(resourceWithAcr).includes(url.href) ||\r\n        foundThing === null ||\r\n        !isPolicy(foundThing)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[ResourcePolicy]]'s that apply to a Resource in its Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies applying to it.\r\n * @since 1.6.0\r\n */\r\nfunction getResourcePolicyAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const policyUrls = getPolicyUrlAll$1(resourceWithAcr);\r\n    const foundThings = policyUrls.map((policyUrl) => getThing(acr, policyUrl));\r\n    const foundPolicies = foundThings.filter((thing) => thing !== null && isPolicy(thing));\r\n    return foundPolicies;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[ResourcePolicy]]'s that apply to a given Resource's Access Control\r\n * Resource from that Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @since 1.6.0\r\n */\r\nfunction getResourceAcrPolicyAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const policyUrls = getAcrPolicyUrlAll$1(resourceWithAcr);\r\n    const foundThings = policyUrls.map((policyUrl) => getThing(acr, policyUrl));\r\n    const foundPolicies = foundThings.filter((thing) => thing !== null && isPolicy(thing));\r\n    return foundPolicies;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[ResourcePolicy]] from the given Resource's Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to remove from the Resource's Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction removeResourcePolicy(resourceWithAcr, policy) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    let policyToRemove = policy;\r\n    if (typeof policyToRemove === \"string\") {\r\n        if (internal_isValidUrl(policyToRemove) === false) {\r\n            // If the given Policy to remove is the name of the Policy,\r\n            // resolve it to its full URL — developers usually refer to either the\r\n            // Policy itself, or by its name, as they do not have access to the ACR\r\n            // directly.\r\n            const policyUrl = new URL(getSourceUrl(acr));\r\n            policyUrl.hash = `#${policy}`;\r\n            policyToRemove = policyUrl.href;\r\n        }\r\n    }\r\n    let policyUrlString;\r\n    if (typeof policyToRemove === \"string\") {\r\n        policyUrlString = policyToRemove;\r\n    }\r\n    else if (isNamedNode(policyToRemove)) {\r\n        policyUrlString = internal_toIriString(policyToRemove);\r\n    }\r\n    else {\r\n        policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));\r\n    }\r\n    // Check whether the actual Policy (i.e. with the Policy type) exists:\r\n    const matchingRule = getResourcePolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));\r\n    if (matchingRule === null) {\r\n        // No such Policy exists yet, so return the Resource+ACR unchanged:\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcr = removeThing(acr, policyToRemove);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return removePolicyUrl$1(updatedResource, policyUrlString);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[ResourcePolicy]] that applies to a given Resource's Access\r\n * Control Resource from that Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The ACR Policy to remove from the Resource's Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction removeResourceAcrPolicy(resourceWithAcr, policy) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    let policyToRemove = policy;\r\n    if (typeof policyToRemove === \"string\") {\r\n        if (internal_isValidUrl(policyToRemove) === false) {\r\n            // If the given Policy to remove is the name of the Policy,\r\n            // resolve it to its full URL — developers usually refer to either the\r\n            // Policy itself, or by its name, as they do not have access to the ACR\r\n            // directly.\r\n            const policyUrl = new URL(getSourceUrl(acr));\r\n            policyUrl.hash = `#${policy}`;\r\n            policyToRemove = policyUrl.href;\r\n        }\r\n    }\r\n    let policyUrlString;\r\n    if (typeof policyToRemove === \"string\") {\r\n        policyUrlString = policyToRemove;\r\n    }\r\n    else if (isNamedNode(policyToRemove)) {\r\n        policyUrlString = internal_toIriString(policyToRemove);\r\n    }\r\n    else {\r\n        policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));\r\n    }\r\n    // Check whether the actual Policy (i.e. with the Policy type) exists:\r\n    const matchingRule = getResourceAcrPolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));\r\n    if (matchingRule === null) {\r\n        // No such Policy exists yet, so return the Resource+ACR unchanged:\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcr = removeThing(acr, policyToRemove);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return removeAcrPolicyUrl$1(updatedResource, policyUrlString);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control\r\n * Resource, replacing previous instances of that Policy.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to insert into the Resource's Access Control Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction setResourcePolicy$1(resourceWithAcr, policy) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const updatedAcr = setThing(acr, policy);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    const policyUrl = asUrl(policy, getSourceUrl(acr));\r\n    return addPolicyUrl$1(updatedResource, policyUrl);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control\r\n * Resource, replacing previous instances of that Policy, to apply to the Access\r\n * Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to insert into the Resource's Access Control Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource, applying to that Access Control Resource.\r\n * @since 1.6.0\r\n */\r\nfunction setResourceAcrPolicy(resourceWithAcr, policy) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const updatedAcr = setThing(acr, policy);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    const policyUrl = asUrl(policy, getSourceUrl(acr));\r\n    return addAcrPolicyUrl$1(updatedResource, policyUrl);\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Policy]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param policy The Policy to get a human-readable representation of.\r\n * @since 1.6.0\r\n * @deprecated\r\n */\r\nfunction policyAsMarkdown(policy) {\r\n    function getStatus(allow, deny) {\r\n        if (deny) {\r\n            return \"denied\";\r\n        }\r\n        if (allow) {\r\n            return \"allowed\";\r\n        }\r\n        return \"unspecified\";\r\n    }\r\n    const allowModes = getAllowModesV1(policy);\r\n    const denyModes = getDenyModesV1(policy);\r\n    let markdown = `## Policy: ${asUrl(policy)}\\n\\n`;\r\n    markdown += `- Read: ${getStatus(allowModes.read, denyModes.read)}\\n`;\r\n    markdown += `- Append: ${getStatus(allowModes.append, denyModes.append)}\\n`;\r\n    markdown += `- Write: ${getStatus(allowModes.write, denyModes.write)}\\n`;\r\n    const allOfRules = getAllOfRuleUrlAll(policy);\r\n    const anyOfRules = getAnyOfRuleUrlAll(policy);\r\n    const noneOfRules = getNoneOfRuleUrlAll(policy);\r\n    if (allOfRules.length === 0 &&\r\n        anyOfRules.length === 0 &&\r\n        noneOfRules.length === 0) {\r\n        markdown += \"\\n<no rules specified yet>\\n\";\r\n    }\r\n    if (allOfRules.length > 0) {\r\n        markdown += \"\\nAll of these rules should match:\\n\";\r\n        markdown += `- ${allOfRules.join(\"\\n- \")}\\n`;\r\n    }\r\n    if (anyOfRules.length > 0) {\r\n        markdown += \"\\nAt least one of these rules should match:\\n\";\r\n        markdown += `- ${anyOfRules.join(\"\\n- \")}\\n`;\r\n    }\r\n    if (noneOfRules.length > 0) {\r\n        markdown += \"\\nNone of these rules should match:\\n\";\r\n        markdown += `- ${noneOfRules.join(\"\\n- \")}\\n`;\r\n    }\r\n    return markdown;\r\n}\n\n//\r\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[AccessControlResource]].\r\n * ```\r\n *\r\n * Initialises a new empty Access Control Resource for a given Resource for use\r\n * in **unit tests**.\r\n *\r\n * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.\r\n * @returns The mocked empty Access Control Resource for the given Resource.\r\n * @since 1.6.0\r\n */\r\nfunction mockAcrFor(resourceUrl) {\r\n    const acrUrl = new URL(\"access-control-resource\", resourceUrl).href;\r\n    const acr = Object.assign(Object.assign({}, mockSolidDatasetFrom(acrUrl)), { accessTo: resourceUrl });\r\n    return acr;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * Resource with an [[AccessControlResource]].\r\n * ```\r\n *\r\n * Attaches an Access Control Resource to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getPolicyUrlAll]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @param accessControlResource The Access Control Resource to attach to the given Resource.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n * @since 1.6.0\r\n */\r\nfunction addMockAcrTo(resource, accessControlResource = mockAcrFor(getSourceUrl(resource))) {\r\n    const resourceWithAcr = Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: {\r\n            acr: accessControlResource,\r\n            aprs: {},\r\n        },\r\n    });\r\n    return resourceWithAcr;\r\n}\n\n//\r\nconst v2AcpFunctions = {\r\n    getFileWithAccessDatasets,\r\n    getFileWithAcr,\r\n    getReferencedPolicyUrlAll,\r\n    getResourceInfoWithAccessDatasets,\r\n    getResourceInfoWithAcr,\r\n    getSolidDatasetWithAccessDatasets,\r\n    getSolidDatasetWithAcr,\r\n    hasAccessibleAcr,\r\n    saveAcrFor,\r\n};\r\nconst v2ControlFunctions = {\r\n    acrAsMarkdown,\r\n    addAcrPolicyUrl: addAcrPolicyUrl$1,\r\n    addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\r\n    addMemberPolicyUrl: addMemberPolicyUrl$1,\r\n    addPolicyUrl: addPolicyUrl$1,\r\n    getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\r\n    getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\r\n    getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,\r\n    getPolicyUrlAll: getPolicyUrlAll$1,\r\n    hasLinkedAcr,\r\n    removeAcrPolicyUrl: removeAcrPolicyUrl$1,\r\n    removeAcrPolicyUrlAll,\r\n    removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\r\n    removeMemberAcrPolicyUrlAll,\r\n    removeMemberPolicyUrl: removeMemberPolicyUrl$1,\r\n    removeMemberPolicyUrlAll,\r\n    removePolicyUrl: removePolicyUrl$1,\r\n    removePolicyUrlAll,\r\n};\r\nconst v2PolicyFunctions = {\r\n    createPolicy,\r\n    getAllowModes: getAllowModesV1,\r\n    getDenyModes: getDenyModesV1,\r\n    getPolicy,\r\n    getPolicyAll,\r\n    policyAsMarkdown,\r\n    removePolicy,\r\n    setAllowModes: setAllowModesV1,\r\n    setDenyModes: setDenyModesV1,\r\n    setPolicy,\r\n};\r\nconst v2RuleFunctions = {\r\n    addAgent: addAgent$1,\r\n    addForbiddenRuleUrl: addNoneOfRuleUrl,\r\n    addGroup,\r\n    addOptionalRuleUrl: addAnyOfRuleUrl,\r\n    addRequiredRuleUrl: addAllOfRuleUrl,\r\n    createRule,\r\n    getAgentAll: getAgentAll$1,\r\n    getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,\r\n    getGroupAll,\r\n    getOptionalRuleUrlAll: getAnyOfRuleUrlAll,\r\n    getRequiredRuleUrlAll: getAllOfRuleUrlAll,\r\n    getRule,\r\n    getRuleAll,\r\n    hasAuthenticated: hasAuthenticated$1,\r\n    hasCreator: hasCreator$1,\r\n    hasPublic: hasPublic$1,\r\n    removeAgent: removeAgent$1,\r\n    removeForbiddenRuleUrl: removeNoneOfRuleUrl,\r\n    removeGroup,\r\n    removeOptionalRuleUrl: removeAnyOfRuleUrl,\r\n    removeRequiredRuleUrl: removeAllOfRuleUrl,\r\n    removeRule,\r\n    ruleAsMarkdown,\r\n    setAgent: setAgent$1,\r\n    setForbiddenRuleUrl: setNoneOfRuleUrl,\r\n    setGroup,\r\n    setOptionalRuleUrl: setAnyOfRuleUrl,\r\n    setRequiredRuleUrl: setAllOfRuleUrl,\r\n    setRule,\r\n};\r\nconst v2MockFunctions = {\r\n    addMockAcrTo,\r\n    mockAcrFor,\r\n};\r\n/* istanbul ignore next Not a supported public API: */\r\n/** @deprecated Replaced by [[setPublic]] */\r\nfunction previousSetPublicSignature(rule, enable) {\r\n    return enable ? setPublic$1(rule) : removePublic$1(rule);\r\n}\r\n/* istanbul ignore next Not a supported public API: */\r\n/** @deprecated Replaced by [[setAuthenticated]] */\r\nfunction previousSetAuthenticatedSignature(rule, enable) {\r\n    return enable ? setAuthenticated$1(rule) : removeAuthenticated$1(rule);\r\n}\r\n/* istanbul ignore next Not a supported public API: */\r\n/** @deprecated Replaced by [[setCreator]] */\r\nfunction previousSetCreatorSignature(rule, enable) {\r\n    return enable ? setCreator$1(rule) : removeCreator$1(rule);\r\n}\r\nconst deprecatedFunctions$1 = {\r\n    /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */\r\n    getForbiddenRuleurlAll: getNoneOfRuleUrlAll,\r\n    setPublic: previousSetPublicSignature,\r\n    setAuthenticated: previousSetAuthenticatedSignature,\r\n    setCreator: previousSetCreatorSignature,\r\n};\r\n/**\r\n * @hidden\r\n * @deprecated Replaced by [[acp_v3]].\r\n */\r\nconst acp_v2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v2AcpFunctions), v2ControlFunctions), v2PolicyFunctions), v2RuleFunctions), v2MockFunctions), deprecatedFunctions$1);\n\n//\r\nconst v1AcpFunctions = {\r\n    getFileWithAccessDatasets,\r\n    getFileWithAcr,\r\n    getReferencedPolicyUrlAll,\r\n    getResourceInfoWithAccessDatasets,\r\n    getResourceInfoWithAcr,\r\n    getSolidDatasetWithAccessDatasets,\r\n    getSolidDatasetWithAcr,\r\n    hasAccessibleAcr,\r\n    saveAcrFor,\r\n};\r\nconst v1PolicyFunctions = {\r\n    createPolicy,\r\n    getAllowModes: getAllowModesV1,\r\n    getDenyModes: getDenyModesV1,\r\n    getPolicy,\r\n    getPolicyAll,\r\n    policyAsMarkdown,\r\n    removePolicy,\r\n    setAllowModes: setAllowModesV1,\r\n    setDenyModes: setDenyModesV1,\r\n    setPolicy,\r\n};\r\nconst v1RuleFunctions = {\r\n    addAgent: addAgent$1,\r\n    addForbiddenRuleUrl: addNoneOfRuleUrl,\r\n    addGroup,\r\n    addOptionalRuleUrl: addAnyOfRuleUrl,\r\n    addRequiredRuleUrl: addAllOfRuleUrl,\r\n    createRule,\r\n    getAgentAll: getAgentAll$1,\r\n    getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,\r\n    getGroupAll,\r\n    getOptionalRuleUrlAll: getAnyOfRuleUrlAll,\r\n    getRequiredRuleUrlAll: getAllOfRuleUrlAll,\r\n    getRule,\r\n    getRuleAll,\r\n    hasAuthenticated: hasAuthenticated$1,\r\n    hasCreator: hasCreator$1,\r\n    hasPublic: hasPublic$1,\r\n    removeAgent: removeAgent$1,\r\n    removeForbiddenRuleUrl: removeNoneOfRuleUrl,\r\n    removeGroup,\r\n    removeOptionalRuleUrl: removeAnyOfRuleUrl,\r\n    removeRequiredRuleUrl: removeAllOfRuleUrl,\r\n    removeRule,\r\n    ruleAsMarkdown,\r\n    setAgent: setAgent$1,\r\n    setForbiddenRuleUrl: setNoneOfRuleUrl,\r\n    setGroup,\r\n    setOptionalRuleUrl: setAnyOfRuleUrl,\r\n    setRequiredRuleUrl: setAllOfRuleUrl,\r\n    setRule,\r\n};\r\nconst v1MockFunctions = {\r\n    addMockAcrTo,\r\n    mockAcrFor,\r\n};\r\nconst v1ControlFunctions = {\r\n    hasLinkedAcr,\r\n    addAcrPolicyUrl: addAcrPolicyUrl$1,\r\n    addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\r\n    getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\r\n    getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\r\n    removeAcrPolicyUrl: removeAcrPolicyUrl$1,\r\n    removeAcrPolicyUrlAll,\r\n    removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\r\n    removeMemberAcrPolicyUrlAll,\r\n};\r\nconst deprecatedFunctions = {\r\n    createControl: internal_createControl,\r\n    getControl: internal_getControl,\r\n    getAllControl: internal_getControlAll,\r\n    getControlAll: internal_getControlAll,\r\n    setControl: internal_setControl,\r\n    removeControl,\r\n    addPolicyUrl: internal_addPolicyUrl,\r\n    getPolicyUrlAll: internal_getPolicyUrlAll,\r\n    removePolicyUrl: internal_removePolicyUrl,\r\n    removePolicyUrlAll: internal_removePolicyUrlAll,\r\n    addMemberPolicyUrl: internal_addMemberPolicyUrl,\r\n    getMemberPolicyUrlAll: internal_getMemberPolicyUrlAll,\r\n    removeMemberPolicyUrl: internal_getMemberPolicyUrlAll,\r\n    removeMemberPolicyUrlAll: internal_removeMemberPolicyUrlAll,\r\n    /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */\r\n    getForbiddenRuleurlAll: getNoneOfRuleUrlAll,\r\n    setPublic: previousSetPublicSignature,\r\n    setAuthenticated: previousSetAuthenticatedSignature,\r\n    setCreator: previousSetCreatorSignature,\r\n};\r\n/**\r\n * @hidden\r\n * @deprecated Replaced by [[acp_v2]].\r\n */\r\nconst acp_v1 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v1AcpFunctions), v1PolicyFunctions), v1RuleFunctions), v1MockFunctions), v1ControlFunctions), deprecatedFunctions);\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove an [[Control]] from the [[AccessControlResource]] of a Resource.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource from which to remove an Access Control.\r\n * @param control The [[Control]] to remove from the given Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, excluding the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction removeControl(withAccessControlResource, control) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const updatedAcr = removeThing(acr, control);\r\n    const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\r\n    return updatedResource;\r\n}\n\n//\r\nconst v3AcpFunctions = {\r\n    getFileWithAccessDatasets,\r\n    getFileWithAcr,\r\n    getLinkedAcrUrl,\r\n    getReferencedPolicyUrlAll,\r\n    getResourceInfoWithAccessDatasets,\r\n    getResourceInfoWithAcr,\r\n    getSolidDatasetWithAccessDatasets,\r\n    getSolidDatasetWithAcr,\r\n    hasAccessibleAcr,\r\n    saveAcrFor,\r\n    isAcpControlled,\r\n};\r\nconst v3ControlFunctions = {\r\n    acrAsMarkdown,\r\n    addAcrPolicyUrl: addAcrPolicyUrl$1,\r\n    addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\r\n    addMemberPolicyUrl: addMemberPolicyUrl$1,\r\n    addPolicyUrl: addPolicyUrl$1,\r\n    getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\r\n    getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\r\n    getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,\r\n    getPolicyUrlAll: getPolicyUrlAll$1,\r\n    hasLinkedAcr,\r\n    removeAcrPolicyUrl: removeAcrPolicyUrl$1,\r\n    removeAcrPolicyUrlAll,\r\n    removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\r\n    removeMemberAcrPolicyUrlAll,\r\n    removeMemberPolicyUrl: removeMemberPolicyUrl$1,\r\n    removeMemberPolicyUrlAll,\r\n    removePolicyUrl: removePolicyUrl$1,\r\n    removePolicyUrlAll,\r\n};\r\nconst v3PolicyFunctions = {\r\n    createPolicy,\r\n    getAllowModes: getAllowModesV1,\r\n    getDenyModes: getDenyModesV1,\r\n    getPolicy,\r\n    getPolicyAll,\r\n    policyAsMarkdown,\r\n    removePolicy,\r\n    setAllowModes: setAllowModesV1,\r\n    setDenyModes: setDenyModesV1,\r\n    setPolicy,\r\n    createResourcePolicyFor,\r\n    getResourceAcrPolicy,\r\n    getResourceAcrPolicyAll,\r\n    getResourcePolicy,\r\n    getResourcePolicyAll,\r\n    removeResourceAcrPolicy,\r\n    removeResourcePolicy,\r\n    setResourceAcrPolicy,\r\n    setResourcePolicy: setResourcePolicy$1,\r\n};\r\nconst v3RuleFunctions = {\r\n    addAgent: addAgent$1,\r\n    addGroup,\r\n    createRule,\r\n    getAgentAll: getAgentAll$1,\r\n    getGroupAll,\r\n    getRule,\r\n    getRuleAll,\r\n    removeAgent: removeAgent$1,\r\n    removeGroup,\r\n    removeRule,\r\n    ruleAsMarkdown,\r\n    setAgent: setAgent$1,\r\n    setGroup,\r\n    setRule,\r\n    addClient: addClient$1,\r\n    getClientAll: getClientAll$1,\r\n    hasAnyClient: hasAnyClient$1,\r\n    removeClient: removeClient$1,\r\n    setAnyClient: setAnyClient$1,\r\n    setClient: setClient$1,\r\n    removeAnyClient: removeAnyClient$1,\r\n    hasAuthenticated: hasAuthenticated$1,\r\n    hasCreator: hasCreator$1,\r\n    hasPublic: hasPublic$1,\r\n    setAuthenticated: setAuthenticated$1,\r\n    setCreator: setCreator$1,\r\n    setPublic: setPublic$1,\r\n    removeAuthenticated: removeAuthenticated$1,\r\n    removeCreator: removeCreator$1,\r\n    removePublic: removePublic$1,\r\n    getAnyOfRuleUrlAll,\r\n    addAnyOfRuleUrl,\r\n    removeAnyOfRuleUrl,\r\n    setAnyOfRuleUrl,\r\n    getAllOfRuleUrlAll,\r\n    addAllOfRuleUrl,\r\n    removeAllOfRuleUrl,\r\n    setAllOfRuleUrl,\r\n    getNoneOfRuleUrlAll,\r\n    addNoneOfRuleUrl,\r\n    removeNoneOfRuleUrl,\r\n    setNoneOfRuleUrl,\r\n    createResourceRuleFor,\r\n    getResourceRule,\r\n    getResourceRuleAll,\r\n    removeResourceRule,\r\n    setResourceRule,\r\n};\r\nconst v3MockFunctions = {\r\n    addMockAcrTo,\r\n    mockAcrFor,\r\n};\r\n/**\r\n * @hidden\r\n * @deprecated Please import \"acp_ess_1\" directly.\r\n */\r\nconst acp_v3 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v3AcpFunctions), v3ControlFunctions), v3PolicyFunctions), v3RuleFunctions), v3MockFunctions);\n\n//\r\n/** @hidden */\r\nfunction setAccessControlResourceThing(resource, thing) {\r\n    return Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: Object.assign(Object.assign({}, resource.internal_acp), { acr: setThing(resource.internal_acp.acr, thing) }),\r\n    });\r\n}\n\n//\r\nfunction getAccessControlTypeFromDefaultAccessControlName(name) {\r\n    if (name.includes(\"Member\")) {\r\n        return ACP.memberAccessControl;\r\n    }\r\n    return ACP.accessControl;\r\n}\r\n/** @hidden */\r\nfunction setDefaultAccessControlThingIfNotExist(resource, name) {\r\n    const defaultAccessControlThingUrl = getDefaultAccessControlUrl(resource, name);\r\n    const acr = internal_getAcr(resource);\r\n    // Get the Access Control Resource Thing or create it\r\n    let accessControlResourceThing = getAccessControlResourceThing(resource);\r\n    if (accessControlResourceThing === null ||\r\n        typeof accessControlResourceThing === \"undefined\") {\r\n        accessControlResourceThing = createThing({ url: getSourceUrl(acr) });\r\n    }\r\n    // Get the Default Access Control Thing or create it and return\r\n    const accessControlUrlAll = getIriAll(accessControlResourceThing, getAccessControlTypeFromDefaultAccessControlName(name));\r\n    if (!accessControlUrlAll.includes(defaultAccessControlThingUrl)) {\r\n        accessControlResourceThing = buildThing(accessControlResourceThing)\r\n            .addUrl(getAccessControlTypeFromDefaultAccessControlName(name), defaultAccessControlThingUrl)\r\n            .build();\r\n        return setAccessControlResourceThing(resource, accessControlResourceThing);\r\n    }\r\n    // Return the original resource if the ACR and Default AC exist\r\n    return resource;\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the ACR of the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to its access control resource.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction addAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_ACR_ACCESS_CONTROL);\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_ACR_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.access, policyUrl).build());\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the ACRs of the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to its children's access control resources.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction addMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.access, policyUrl).build());\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to its children.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction addMemberPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const resourceWithAcrContainingDefaultMemberAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_MEMBER_ACCESS_CONTROL);\r\n    const defaultMemberAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultMemberAccessControl, DEFAULT_MEMBER_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcrContainingDefaultMemberAccessControl, buildThing(defaultMemberAccessControlThing)\r\n        .addUrl(ACP.apply, policyUrl)\r\n        .build());\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Add a policy applying to the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to add the URL of a policy\r\n * applying to it.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction addPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_ACCESS_CONTROL);\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.apply, policyUrl).build());\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URL of all access controls linked to the given resource's ACR.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of access\r\n * controls applying to it.\r\n * @returns Access Control URL array\r\n * @since 1.6.0\r\n */\r\nfunction getAccessControlUrlAll(resourceWithAcr) {\r\n    const acrThing = getAccessControlResourceThing(resourceWithAcr);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, ACP.accessControl);\r\n}\n\n//\r\n/** @hidden */\r\nfunction getPolicyUrls(resource, accessControlUrls, type) {\r\n    const acr = internal_getAcr(resource);\r\n    return Array.from(new Set(accessControlUrls\r\n        .map((accessControlUrl) => {\r\n        const accessControlThing = getThing(acr, accessControlUrl);\r\n        // istanbul ignore next\r\n        if (accessControlThing !== null) {\r\n            return getIriAll(accessControlThing, type);\r\n        }\r\n        // istanbul ignore next\r\n        return [];\r\n    })\r\n        .reduce((previousValue, currentValue) => previousValue.concat(currentValue), [])));\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the ACR of the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of policies\r\n * applying to its access control resource.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\r\nfunction getAcrPolicyUrlAll(resourceWithAcr) {\r\n    return getPolicyUrls(resourceWithAcr, getAccessControlUrlAll(resourceWithAcr), ACP.access);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URL of all member access controls linked to the given resource's ACR.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of access\r\n * controls inherited by its children.\r\n * @returns Access Control URL array\r\n * @since 1.6.0\r\n */\r\nfunction getMemberAccessControlUrlAll(resourceWithAcr) {\r\n    const acrThing = getAccessControlResourceThing(resourceWithAcr);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, ACP.memberAccessControl);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the ACRs of the given resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of policies\r\n * applying to its children's access control resources.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\r\nfunction getMemberAcrPolicyUrlAll(resourceWithAcr) {\r\n    return getPolicyUrls(resourceWithAcr, getMemberAccessControlUrlAll(resourceWithAcr), ACP.access);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs policies\r\n * applying to its children.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\r\nfunction getMemberPolicyUrlAll(resourceWithAcr) {\r\n    return getPolicyUrls(resourceWithAcr, getMemberAccessControlUrlAll(resourceWithAcr), ACP.apply);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Get the URLs of policies applying to the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to retrieve URLs of policies\r\n * applying to it.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\r\nfunction getPolicyUrlAll(resourceWithAcr) {\r\n    return getPolicyUrls(resourceWithAcr, getAccessControlUrlAll(resourceWithAcr), ACP.apply);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the ACR of the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to its access control resource.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction removeAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_ACR_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.access, policyUrl));\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the ACRs of the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to its children's access control resources.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction removeMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.access, policyUrl));\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the given resource's children.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to its children.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction removeMemberPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_MEMBER_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.apply, policyUrl));\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Remove a policy applying to the given resource.\r\n *\r\n * @param resourceWithAcr The resource for which to remove the URL of a policy\r\n * applying to it.\r\n * @param policyUrl A Policy URL.\r\n * @returns The resource with its ammended access control resource.\r\n * @since 1.16.1\r\n */\r\nfunction removePolicyUrl(resourceWithAcr, policyUrl) {\r\n    const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_ACCESS_CONTROL);\r\n    return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.apply, policyUrl));\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control\r\n * Resource, replacing previous instances of that Policy.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.\r\n * @param policy The Policy to insert into the Resource's Access Control Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.\r\n * @since 1.18.0\r\n */\r\nfunction setResourcePolicy(resourceWithAcr, policy) {\r\n    return setAccessControlResourceThing(resourceWithAcr, policy);\r\n}\n\n//\r\n/**\r\n * @param thing the [[Thing]] to check to see if it's an ACP Matcher or not\r\n */\r\nfunction isMatcher(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acp.Matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a Matcher that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" Matchers,\r\n * they will not be granted access.\r\n *\r\n * Also see [[addAnyOfMatcherUrl]] and [[addNoneOfMatcherUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new Matcher added.\r\n * @since Not released yet.\r\n */\r\nfunction addAllOfMatcherUrl(policy, matcher) {\r\n    return addIri(policy, acp.allOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a Matcher that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" Matchers,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] from which the Matcher should be removed.\r\n * @param matcher The Matcher to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the Matcher removed.\r\n * @since Not released yet.\r\n */\r\nfunction removeAllOfMatcherUrl(policy, matcher) {\r\n    return removeIri(policy, acp.allOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrites the Matcher refining the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the \"All Of\" Matchers,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to set for the Policy.\r\n * @returns A new [[Policy]] clone of the original one, with the \"All Of\" Matchers replaced.\r\n * @since Not released yet.\r\n */\r\nfunction setAllOfMatcherUrl(policy, matcher) {\r\n    return setIri(policy, acp.allOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"All Of\" [[Matcher]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the Matchers should be read.\r\n * @returns A list of the \"All Of\" [[Matcher]]s\r\n * @since Not released yet.\r\n */\r\nfunction getAllOfMatcherUrlAll(policy) {\r\n    return getIriAll(policy, acp.allOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a Matcher that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" Matchers,\r\n * they will be granted access.\r\n *\r\n * Also see [[addAllOfMatcherUrl]] and [[addNoneOfMatcherUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new Matcher added.\r\n * @since Not released yet.\r\n */\r\nfunction addAnyOfMatcherUrl(policy, matcher) {\r\n    return addIri(policy, acp.anyOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a Matcher that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" Matchers,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] from which the Matcher should be removed.\r\n * @param matcher The Matcher to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the Matcher removed.\r\n * @since Not released yet.\r\n */\r\nfunction removeAnyOfMatcherUrl(policy, matcher) {\r\n    return removeIri(policy, acp.anyOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the Matcher extending the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the \"Any Of\" Matchers,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to set for the Policy.\r\n * @returns A new [[Policy]] clone of the original one, with the \"Any Of\" Matchers replaced.\r\n * @since Not released yet.\r\n */\r\nfunction setAnyOfMatcherUrl(policy, matcher) {\r\n    return setIri(policy, acp.anyOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"Any Of\" [[Matcher]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the Matchers should be read.\r\n * @returns A list of the \"Any Of\" [[Matcher]]s\r\n * @since Not released yet.\r\n */\r\nfunction getAnyOfMatcherUrlAll(policy) {\r\n    return getIriAll(policy, acp.anyOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a Matcher that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is matched by another Matcher, but **also**\r\n * by the given Matcher, they will **not** be granted access.\r\n *\r\n * Also see [[addAllOfMatcherUrl]] and [[addAnyOfMatcherUrl]].\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new Matcher added.\r\n * @since Not released yet.\r\n */\r\nfunction addNoneOfMatcherUrl(policy, matcher) {\r\n    return addIri(policy, acp.noneOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a Matcher that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is matched by another Matcher, but **also**\r\n * in any of the \"None Of\" Matchers, they will **not** be granted access.\r\n *\r\n * @param policy The [[Policy]] from which the Matcher should be removed.\r\n * @param matcher The Matcher to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the Matcher removed.\r\n * @since Not released yet.\r\n */\r\nfunction removeNoneOfMatcherUrl(policy, matcher) {\r\n    return removeIri(policy, acp.noneOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set the Matchers restricting the scope of a given [[Policy]]. If an agent\r\n * requesting access to a resource is matched by another Matcher, but **also**\r\n * by any of the \"None Of\" Matchers, they will not be granted access.\r\n *\r\n * @param policy The [[Policy]] to which the Matcher should be added.\r\n * @param matcher The Matcher to set for the Policy.\r\n * @returns A new [[Policy]] clone of the original one, with the \"None Of\" Matchers replaced.\r\n * @since Not released yet.\r\n */\r\nfunction setNoneOfMatcherUrl(policy, matcher) {\r\n    return setIri(policy, acp.noneOf, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the \"None Of\" [[Matcher]]s for the given [[Policy]]\r\n * @param policy The [[policy]] from which the Matchers should be read.\r\n * @returns A list of the forbidden [[Matcher]]s\r\n * @since Not released yet.\r\n */\r\nfunction getNoneOfMatcherUrlAll(policy) {\r\n    return getIriAll(policy, acp.noneOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Matcher]].\r\n *\r\n * @param url URL that identifies this [[Matcher]].\r\n * @since Not released yet.\r\n */\r\nfunction createMatcher(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let matcherThing = createThing({ url: stringUrl });\r\n    matcherThing = setUrl(matcherThing, rdf.type, acp.Matcher);\r\n    return matcherThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[ResourceMatcher]] for the given Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the new Matcher is to apply.\r\n * @param name Name that identifies this [[Matcher]].\r\n * @since Not released yet.\r\n */\r\nfunction createResourceMatcherFor(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const url = new URL(getSourceUrl(acr));\r\n    url.hash = `#${name}`;\r\n    let matcherThing = createThing({ url: url.href });\r\n    matcherThing = setUrl(matcherThing, rdf.type, acp.Matcher);\r\n    return matcherThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Matcher]] with the given URL from an [[SolidDataset]].\r\n *\r\n * @param matcherResource The Resource that contains the given [[Matcher]].\r\n * @param url URL that identifies this [[Matcher]].\r\n * @returns The requested [[Matcher]], if it exists, or `null` if it does not.\r\n * @since Not released yet.\r\n */\r\nfunction getMatcher(matcherResource, url) {\r\n    const foundThing = getThing(matcherResource, url);\r\n    if (foundThing === null || !isMatcher(foundThing)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[ResourceMatcher]] with the given name from an Resource's Access Control\r\n * Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceMatcher]].\r\n * @param name Name that identifies this [[ResourceMatcher]].\r\n * @returns The requested [[ResourceMatcher]], if it exists, or `null` if it does not.\r\n * @since Not released yet.\r\n */\r\nfunction getResourceMatcher(resourceWithAcr, name) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const url = new URL(acrUrl);\r\n    url.hash = `#${name}`;\r\n    const foundThing = getThing(acr, url.href);\r\n    if (foundThing === null || !isMatcher(foundThing)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[Matcher]]s from a [[SolidDataset]].\r\n *\r\n * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.\r\n * @returns The [[Matcher]]s contained in this resource.\r\n * @since Not released yet.\r\n */\r\nfunction getMatcherAll(matcherResource) {\r\n    const things = getThingAll(matcherResource);\r\n    return things.filter(isMatcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[ResourceMatcher]]s from a Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.\r\n * @returns The [[ResourceMatcher]]s contained in this Resource's Access Control Resource.\r\n * @since Not released yet.\r\n */\r\nfunction getResourceMatcherAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const things = getThingAll(acr);\r\n    return things.filter(isMatcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[Matcher]] from the given [[SolidDataset]].\r\n *\r\n * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.\r\n * @returns A new SolidDataset equal to the given Matcher Resource, but without the given Matcher.\r\n * @since Not released yet.\r\n */\r\nfunction removeMatcher(matcherResource, matcher) {\r\n    return removeThing(matcherResource, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[ResourceMatcher]] from the given Resource's Access Control Resource.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.\r\n * @returns A new Resource equal to the given Resource, but without the given Matcher in its ACR.\r\n * @since Not released yet.\r\n */\r\nfunction removeResourceMatcher(resourceWithAcr, matcher) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    let matcherToRemove;\r\n    if (typeof matcher === \"string\") {\r\n        if (internal_isValidUrl(matcher)) {\r\n            matcherToRemove = matcher;\r\n        }\r\n        else {\r\n            // If the given Matcher to remove is the name of the Matcher,\r\n            // resolve it to its full URL — developers usually refer to either the\r\n            // Matcher itself, or by its name, as they do not have access to the ACR\r\n            // directly.\r\n            const matcherUrl = new URL(getSourceUrl(acr));\r\n            matcherUrl.hash = `#${matcher}`;\r\n            matcherToRemove = matcherUrl.href;\r\n        }\r\n    }\r\n    else if (isNamedNode(matcher)) {\r\n        matcherToRemove = internal_toIriString(matcher);\r\n    }\r\n    else {\r\n        matcherToRemove = asUrl(matcher);\r\n    }\r\n    // Check whether the actual Matcher (i.e. with the Matcher type) exists:\r\n    const matchingMatcher = getResourceMatcher(resourceWithAcr, new URL(matcherToRemove).hash.substring(1));\r\n    if (matchingMatcher === null) {\r\n        // No such Matcher exists yet, so return the Resource+ACR unchanged:\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcr = removeThing(acr, matchingMatcher);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Matcher]] into the given [[SolidDataset]], replacing previous\r\n * instances of that Matcher.\r\n *\r\n * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.\r\n * @returns A new SolidDataset equal to the given Matcher Resource, but with the given Matcher.\r\n * @since Not released yet.\r\n */\r\nfunction setMatcher(matcherResource, matcher) {\r\n    return setThing(matcherResource, matcher);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[ResourceMatcher]] into the given Resource's Access Control Resource,\r\n * replacing previous instances of that Matcher.\r\n *\r\n * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.\r\n * @returns A new Resource equal to the given Resource, but with the given Matcher in its ACR.\r\n * @since Not released yet.\r\n */\r\nfunction setResourceMatcher(resourceWithAcr, matcher) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const updatedAcr = setThing(acr, matcher);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the agents a [[Matcher]] applies **directly** to. This will not include agents\r\n * that are matched on a property other than their WebID.\r\n *\r\n * @param matcher The matcher from which agents are read.\r\n * @returns A list of the WebIDs of agents included in the matcher.\r\n * @since Not released yet.\r\n */\r\nfunction getAgentAll(matcher) {\r\n    return getIriAll(matcher, acp.agent).filter((agent) => agent !== acp.PublicAgent &&\r\n        agent !== acp.AuthenticatedAgent &&\r\n        agent !== acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the agents the [[Matcher]] applies to with the provided agents.\r\n *\r\n * @param matcher The matcher for which agents are set.\r\n * @param agent The agent the matcher should apply to.\r\n * @returns A copy of the input matcher, applying to a different set of agents.\r\n * @since Not released yet.\r\n */\r\nfunction setAgent(matcher, agent) {\r\n    // Preserve the special agent classes authenticated and public, which we\r\n    // don't want to overwrite with this function.\r\n    const isPublic = hasPublic(matcher);\r\n    const isAuthenticated = hasAuthenticated(matcher);\r\n    const isCreator = hasCreator(matcher);\r\n    let result = setIri(matcher, acp.agent, agent);\r\n    // Restore public and authenticated\r\n    if (isPublic) {\r\n        result = setPublic(result);\r\n    }\r\n    if (isAuthenticated) {\r\n        result = setAuthenticated(result);\r\n    }\r\n    if (isCreator) {\r\n        result = setCreator(result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Matcher]] to an additional agent.\r\n *\r\n * @param matcher The [[Matcher]] to be applied to an additional agent.\r\n * @param agent The agent the [[Matcher]] should apply to.\r\n * @returns A copy of the [[Matcher]], applying to an additional agent.\r\n * @since Not released yet.\r\n */\r\nfunction addAgent(matcher, agent) {\r\n    return addIri(matcher, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Matcher]] from applying to a given agent directly. This will not\r\n * prevent the agent from matching on other properties than its WebID.\r\n *\r\n * @param matcher The [[Matcher]] that should no longer apply to a given agent.\r\n * @param agent The agent the Matcher should no longer apply to.\r\n * @returns A copy of the Matcher, not applying to the given agent.\r\n * @since Not released yet.\r\n */\r\nfunction removeAgent(matcher, agent) {\r\n    return removeIri(matcher, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to any agent.\r\n *\r\n * @param matcher The Matcher checked for public access.\r\n * @returns Whether the Matcher applies to any agent or not.\r\n * @since Not released yet.\r\n */\r\nfunction hasPublic(matcher) {\r\n    return (getIriAll(matcher, acp.agent).filter((agent) => agent === acp.PublicAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to apply to any Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply to any agent.\r\n * @since Not released yet.\r\n */\r\nfunction setPublic(matcher) {\r\n    // The second argument should not be part of the function signature,\r\n    // so it's not in the parameter list:\r\n    // eslint-disable-next-line prefer-rest-params\r\n    if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\r\n        throw new Error(\"The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.\");\r\n    }\r\n    return addIri(matcher, acp.agent, acp.PublicAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to no longer apply to any Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to no longer apply to any agent.\r\n * @since Not released yet.\r\n */\r\nfunction removePublic(matcher) {\r\n    return removeIri(matcher, acp.agent, acp.PublicAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to any authenticated agent.\r\n *\r\n * @param matcher The Matcher checked for authenticated access.\r\n * @returns Whether the Matcher applies to any authenticated agent or not.\r\n * @since Not released yet.\r\n */\r\nfunction hasAuthenticated(matcher) {\r\n    return (getIriAll(matcher, acp.agent).filter((agent) => agent === acp.AuthenticatedAgent).length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to apply to any authenticated Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply to any authenticated Agent.\r\n * @since Not released yet.\r\n */\r\nfunction setAuthenticated(matcher) {\r\n    // The second argument should not be part of the function signature,\r\n    // so it's not in the parameter list:\r\n    // eslint-disable-next-line prefer-rest-params\r\n    if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\r\n        throw new Error(\"The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.\");\r\n    }\r\n    return addIri(matcher, acp.agent, acp.AuthenticatedAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to no longer apply to any authenticated Agent.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply/not apply to any authenticated agent.\r\n * @since Not released yet.\r\n */\r\nfunction removeAuthenticated(matcher) {\r\n    return removeIri(matcher, acp.agent, acp.AuthenticatedAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to the creator of the Resource.\r\n *\r\n * @param matcher The Matcher checked for authenticated access.\r\n * @returns Whether the Matcher applies to the creator of the Resource or not.\r\n * @since Not released yet.\r\n */\r\nfunction hasCreator(matcher) {\r\n    return (getIriAll(matcher, acp.agent).filter((agent) => agent === acp.CreatorAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to apply to the creator of a Resource.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply to the creator of a Resource.\r\n * @since Not released yet.\r\n */\r\nfunction setCreator(matcher) {\r\n    // The second argument should not be part of the function signature,\r\n    // so it's not in the parameter list:\r\n    // eslint-disable-next-line prefer-rest-params\r\n    if (typeof arguments === \"object\" && typeof arguments[1] === \"boolean\") {\r\n        throw new Error(\"The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.\");\r\n    }\r\n    return addIri(matcher, acp.agent, acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set a Matcher to no longer apply to the creator of a Resource.\r\n *\r\n * @param matcher The Matcher being modified.\r\n * @returns A copy of the Matcher, updated to apply/not apply to the creator of a Resource.\r\n * @since Not released yet.\r\n */\r\nfunction removeCreator(matcher) {\r\n    return removeIri(matcher, acp.agent, acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the clients a [[Matcher]] applies **directly** to. This will not include\r\n * specific client classes, such as public clients.\r\n *\r\n * @param matcher The Matcher from which clients are read.\r\n * @returns A list of the WebIDs of clients included in the Matcher.\r\n * @since Not released yet.\r\n */\r\nfunction getClientAll(matcher) {\r\n    return getIriAll(matcher, acp.client)\r\n        .filter((client) => client !== solid.PublicOidcClient)\r\n        .concat(getStringNoLocaleAll(matcher, acp.client));\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the clients the [[Matcher]] applies to with the provided Client.\r\n *\r\n * @param matcher The Matcher for which clients are set.\r\n * @param client The Client the Matcher should apply to.\r\n * @returns A copy of the input Matcher, applying to a different set of Clients.\r\n */\r\nfunction setClient(matcher, client) {\r\n    // Preserve the special \"any client\" class, which we\r\n    // don't want to overwrite with this function.\r\n    const anyClientEnabled = hasAnyClient(matcher);\r\n    let result = setIri(matcher, acp.client, client);\r\n    // Restore the \"any client\" class\r\n    if (anyClientEnabled) {\r\n        result = setAnyClient(result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Matcher]] to an additional Client.\r\n *\r\n * @param matcher The [[Matcher]] to be applied to an additional Client.\r\n * @param client The Client the [[Matcher]] should apply to.\r\n * @returns A copy of the [[Matcher]], applying to an additional Client.\r\n * @since Not released yet.\r\n */\r\nfunction addClient(matcher, client) {\r\n    if (!internal_isValidUrl(client)) {\r\n        return addStringNoLocale(matcher, acp.client, client);\r\n    }\r\n    return addIri(matcher, acp.client, client);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Matcher]] from applying to a given Client directly.\r\n *\r\n * @param matcher The [[Matcher]] that should no longer apply to a given Client.\r\n * @param client The Client the Matcher should no longer apply to.\r\n * @returns A copy of the Matcher, not applying to the given Client.\r\n * @since Not released yet.\r\n */\r\nfunction removeClient(matcher, client) {\r\n    if (!internal_isValidUrl(client)) {\r\n        return removeStringNoLocale(matcher, acp.client, client);\r\n    }\r\n    return removeIri(matcher, acp.client, client);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the Matcher applies to any client, i.e. all the applications\r\n * regardless of their identifier.\r\n *\r\n * @param matcher The Matcher checked for authenticated access.\r\n * @returns Whether the Matcher applies to public clients.\r\n * @since Not released yet.\r\n * @deprecated\r\n */\r\nfunction hasAnyClient(matcher) {\r\n    return (getIriAll(matcher, acp.client).filter((client) => client === solid.PublicOidcClient).length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Matcher]] apply to any client application.\r\n *\r\n * @param matcher The Matcher for which clients are set.\r\n * @returns A copy of the Matcher, updated to apply to any client\r\n * @since Not released yet.\r\n * @deprecated\r\n */\r\nfunction setAnyClient(matcher) {\r\n    return addIri(matcher, acp.client, solid.PublicOidcClient);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Make the [[Matcher]] no longer apply to any client application.\r\n *\r\n * @param matcher The Matcher for which clients are set.\r\n * @returns A copy of the Matcher, updated to no longer apply to any client\r\n * @since Not released yet.\r\n * @deprecated\r\n */\r\nfunction removeAnyClient(matcher) {\r\n    return removeIri(matcher, acp.client, solid.PublicOidcClient);\r\n}\n\n//\r\nconst v4AcpFunctions = {\r\n    getFileWithAccessDatasets,\r\n    getFileWithAcr,\r\n    getReferencedPolicyUrlAll,\r\n    getResourceInfoWithAccessDatasets,\r\n    getResourceInfoWithAcr,\r\n    getSolidDatasetWithAccessDatasets,\r\n    getSolidDatasetWithAcr,\r\n    hasAccessibleAcr,\r\n    saveAcrFor,\r\n    isAcpControlled,\r\n    getVcAccess,\r\n    setVcAccess,\r\n};\r\nconst v4ControlFunctions = {\r\n    addAcrPolicyUrl,\r\n    addMemberAcrPolicyUrl,\r\n    addMemberPolicyUrl,\r\n    addPolicyUrl,\r\n    getAcrPolicyUrlAll,\r\n    getMemberAcrPolicyUrlAll,\r\n    getMemberPolicyUrlAll,\r\n    getPolicyUrlAll,\r\n    hasLinkedAcr,\r\n    removeAcrPolicyUrl,\r\n    removeAcrPolicyUrlAll,\r\n    removeMemberAcrPolicyUrl,\r\n    removeMemberAcrPolicyUrlAll,\r\n    removeMemberPolicyUrl,\r\n    removeMemberPolicyUrlAll,\r\n    removePolicyUrl,\r\n    removePolicyUrlAll,\r\n};\r\nconst v4PolicyFunctions = {\r\n    createPolicy,\r\n    getAllowModes: getAllowModesV2,\r\n    getDenyModes: getDenyModesV2,\r\n    getPolicy,\r\n    getPolicyAll,\r\n    removePolicy,\r\n    setAllowModes: setAllowModesV2,\r\n    setDenyModes: setDenyModesV2,\r\n    setPolicy,\r\n    createResourcePolicyFor,\r\n    getResourceAcrPolicy,\r\n    getResourceAcrPolicyAll,\r\n    getResourcePolicy,\r\n    getResourcePolicyAll,\r\n    removeResourceAcrPolicy,\r\n    removeResourcePolicy,\r\n    setResourcePolicy,\r\n};\r\nconst v4MatcherFunctions = {\r\n    addAgent,\r\n    createMatcher,\r\n    getAgentAll,\r\n    getMatcher,\r\n    getMatcherAll,\r\n    removeAgent,\r\n    removeMatcher,\r\n    setAgent,\r\n    setMatcher,\r\n    addClient,\r\n    getClientAll,\r\n    hasAnyClient,\r\n    removeClient,\r\n    setAnyClient,\r\n    setClient,\r\n    removeAnyClient,\r\n    hasAuthenticated,\r\n    hasCreator,\r\n    hasPublic,\r\n    setAuthenticated,\r\n    setCreator,\r\n    setPublic,\r\n    removeAuthenticated,\r\n    removeCreator,\r\n    removePublic,\r\n    getAnyOfMatcherUrlAll,\r\n    addAnyOfMatcherUrl,\r\n    removeAnyOfMatcherUrl,\r\n    setAnyOfMatcherUrl,\r\n    getAllOfMatcherUrlAll,\r\n    addAllOfMatcherUrl,\r\n    removeAllOfMatcherUrl,\r\n    setAllOfMatcherUrl,\r\n    getNoneOfMatcherUrlAll,\r\n    addNoneOfMatcherUrl,\r\n    removeNoneOfMatcherUrl,\r\n    setNoneOfMatcherUrl,\r\n    createResourceMatcherFor,\r\n    getResourceMatcher,\r\n    getResourceMatcherAll,\r\n    removeResourceMatcher,\r\n    setResourceMatcher,\r\n};\r\nconst v4MockFunctions = {\r\n    addMockAcrTo,\r\n    mockAcrFor,\r\n};\r\n/**\r\n * @hidden\r\n * @deprecated Please import \"acp_ess_2\" directly.\r\n */\r\nconst acp_v4 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v4AcpFunctions), v4ControlFunctions), v4PolicyFunctions), v4MatcherFunctions), v4MockFunctions);\n\n//\r\nconst knownActorRelations$1 = [acp.agent, acp.group];\r\n/**\r\n * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this actor.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setActorAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to get the access for.\r\n * @param actor Which instance of the given actor type you want to get the access for.\r\n * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getActorAccess$1(acpData, actorRelation, actor) {\r\n    if (acpData.inaccessibleUrls.length > 0) {\r\n        // If we can't see all access data,\r\n        // we can't reliably determine what access the given actor has:\r\n        return null;\r\n    }\r\n    const applicableAcrPolicies = acpData.acrPolicies.filter((policy) => policyAppliesTo$1(policy, actorRelation, actor, acpData));\r\n    const applicablePolicies = acpData.policies.filter((policy) => policyAppliesTo$1(policy, actorRelation, actor, acpData));\r\n    const initialAccess = {\r\n        read: false,\r\n        append: false,\r\n        write: false,\r\n        controlRead: false,\r\n        controlWrite: false,\r\n    };\r\n    // All allowed reading and writing defined in ACR policies\r\n    // determines whether the `controlRead` and `controlWrite` statuses are `true`.\r\n    const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {\r\n        const allAllowedAccess = Object.assign({}, acc);\r\n        const allowModes = getAllowModesV1(policy);\r\n        if (allowModes.read) {\r\n            allAllowedAccess.controlRead = true;\r\n        }\r\n        if (allowModes.write) {\r\n            allAllowedAccess.controlWrite = true;\r\n        }\r\n        return allAllowedAccess;\r\n    }, initialAccess);\r\n    // Then allowed reading, appending and writing in regular policies\r\n    // determines whether the respective status is `true`.\r\n    const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {\r\n        const allAllowedAccess = Object.assign({}, acc);\r\n        const allowModes = getAllowModesV1(policy);\r\n        if (allowModes.read) {\r\n            allAllowedAccess.read = true;\r\n        }\r\n        if (allowModes.append) {\r\n            allAllowedAccess.append = true;\r\n        }\r\n        if (allowModes.write) {\r\n            allAllowedAccess.write = true;\r\n        }\r\n        return allAllowedAccess;\r\n    }, allowedAcrAccess);\r\n    // At this point, everything that has been explicitly allowed is true.\r\n    // However, it could still be overridden by access that is explicitly denied.\r\n    // Starting with `controlRead` and `controlWrite`,\r\n    // by inspecting denied reading and writing defined in the ACR policies.\r\n    const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {\r\n        const allDeniedAccess = Object.assign({}, acc);\r\n        const denyModes = getDenyModesV1(policy);\r\n        if (denyModes.read === true) {\r\n            allDeniedAccess.controlRead = false;\r\n        }\r\n        if (denyModes.write === true) {\r\n            allDeniedAccess.controlWrite = false;\r\n        }\r\n        return allDeniedAccess;\r\n    }, withAllowedAccess);\r\n    // And finally, we set to `false` those access modes that are explicitly denied\r\n    // in the regular policies:\r\n    const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {\r\n        const allDeniedAccess = Object.assign({}, acc);\r\n        const denyModes = getDenyModesV1(policy);\r\n        if (denyModes.read === true) {\r\n            allDeniedAccess.read = false;\r\n        }\r\n        if (denyModes.append === true) {\r\n            allDeniedAccess.append = false;\r\n        }\r\n        if (denyModes.write === true) {\r\n            allDeniedAccess.write = false;\r\n        }\r\n        return allDeniedAccess;\r\n    }, withAcrDeniedAccess);\r\n    return withDeniedAccess;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Agent.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getAgentAccess$1(acpData, webId) {\r\n    return internal_getActorAccess$1(acpData, acp.agent, webId);\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Group in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Group.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Group, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setGroupAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param groupUrl URL of the Group you want to get the access for.\r\n * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getGroupAccess(acpData, groupUrl) {\r\n    return internal_getActorAccess$1(acpData, acp.group, groupUrl);\r\n}\r\n/**\r\n * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to everybody.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to everybody, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setPublicAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getPublicAccess$1(acpData) {\r\n    return internal_getActorAccess$1(acpData, acp.agent, acp.PublicAgent);\r\n}\r\nfunction policyAppliesTo$1(policy, actorRelation, actor, acpData) {\r\n    const allowModes = getIriAll(policy, acp.allow);\r\n    const denyModes = getIriAll(policy, acp.deny);\r\n    if (allowModes.length + denyModes.length === 0) {\r\n        // A Policy that does not specify access modes does not do anything:\r\n        return false;\r\n    }\r\n    // Note: the non-null assertions (`!`) here should be valid because\r\n    //       the caller of `policyAppliesTo` should already have validated that\r\n    //       the return value of internal_getPoliciesAndRules() did not have any\r\n    //       inaccessible URLs, so we should be able to find every Rule.\r\n    const allOfRules = getAllOfRuleUrlAll(policy).map((ruleUrl) => acpData.rules.find((rule) => asIri(rule) === ruleUrl));\r\n    const anyOfRules = getAnyOfRuleUrlAll(policy).map((ruleUrl) => acpData.rules.find((rule) => asIri(rule) === ruleUrl));\r\n    const noneOfRules = getNoneOfRuleUrlAll(policy).map((ruleUrl) => acpData.rules.find((rule) => asIri(rule) === ruleUrl));\r\n    // We assume that this Policy applies if this specific actor is mentioned\r\n    // and no further restrictions are in place.\r\n    // (In other words, the Policy may apply to others *in addition to* this\r\n    // actor, but if it applies to this actor *unless* some other condition holds,\r\n    // we cannot be sure whether it will apply to this actor.)\r\n    // This means that:\r\n    return (\r\n    // Every existing allOf Rule explicitly applies explicitly to this given actor:\r\n    allOfRules.every((rule) => ruleAppliesTo(rule, actorRelation, actor)) &&\r\n        // If there are anyOf Rules, at least one applies explicitly to this actor:\r\n        (anyOfRules.length === 0 ||\r\n            anyOfRules.some((rule) => ruleAppliesTo(rule, actorRelation, actor))) &&\r\n        // No further restrictions are in place that make this sometimes not apply\r\n        // to the given actor:\r\n        noneOfRules.length === 0);\r\n}\r\nfunction policyConflictsWith$1(policy, otherAccess) {\r\n    const allowModes = getIriAll(policy, acp.allow);\r\n    const denyModes = getIriAll(policy, acp.deny);\r\n    return ((otherAccess.read === true && denyModes.includes(acp.Read)) ||\r\n        (otherAccess.read === false &&\r\n            allowModes.includes(acp.Read) &&\r\n            !denyModes.includes(acp.Read)) ||\r\n        (otherAccess.append === true && denyModes.includes(acp.Append)) ||\r\n        (otherAccess.append === false &&\r\n            allowModes.includes(acp.Append) &&\r\n            !denyModes.includes(acp.Append)) ||\r\n        (otherAccess.write === true && denyModes.includes(acp.Write)) ||\r\n        (otherAccess.write === false &&\r\n            allowModes.includes(acp.Write) &&\r\n            !denyModes.includes(acp.Write)));\r\n}\r\nfunction ruleAppliesTo(rule, actorRelation, actor) {\r\n    // A Rule that does not list *any* actor matches for everyone:\r\n    let isEmpty = true;\r\n    knownActorRelations$1.forEach((knownActorRelation) => {\r\n        isEmpty && (isEmpty = getIri(rule, knownActorRelation) === null);\r\n    });\r\n    return isEmpty || getIriAll(rule, actorRelation).includes(actor);\r\n}\r\n/**\r\n * Get a set of all actors mentioned in an ACR by active Rules (i.e. that are\r\n * referenced by Policies referenced by the ACR Control, and therefore that\r\n * effectively apply).\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation\r\n */\r\nfunction internal_findActorAll$1(acpData, actorRelation) {\r\n    const actors = new Set();\r\n    // This code could be prettier using flat(), which isn't supported by nodeJS 10.\r\n    // If you read this comment after April 2021, feel free to refactor.\r\n    acpData.rules.forEach((rule) => {\r\n        getIriAll(rule, actorRelation)\r\n            .filter((iri) => ![\r\n            acp.PublicAgent,\r\n            acp.CreatorAgent,\r\n            acp.AuthenticatedAgent,\r\n        ].includes(iri) || actorRelation !== acp.agent)\r\n            .forEach((iri) => actors.add(iri));\r\n    });\r\n    return actors;\r\n}\r\n/**\r\n * Iterate through all the actors active for an ACR, and list all of their access.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation The type of actor we want to list access for\r\n * @returns A map with each actor access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getActorAccessAll$1(acpData, actorRelation) {\r\n    if (acpData.inaccessibleUrls.length > 0) {\r\n        // If we can't see all access data,\r\n        // we can't reliably determine what access actors of the given type have:\r\n        return null;\r\n    }\r\n    const result = {};\r\n    const actors = internal_findActorAll$1(acpData, actorRelation);\r\n    actors.forEach((iri) => {\r\n        // The type assertion holds, because if internal_getActorAccess were null,\r\n        // we would have returned {} already.\r\n        const access = internal_getActorAccess$1(acpData, actorRelation, iri);\r\n        result[iri] = access;\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Get an overview of what access are defined for all Groups in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Groups.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Groups, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @returns A map with each Group's access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getGroupAccessAll(acpData) {\r\n    return internal_getActorAccessAll$1(acpData, acp.group);\r\n}\r\n/**\r\n * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Agents.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @returns A map with each Agent's access indexed by their WebID, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getAgentAccessAll$1(acpData) {\r\n    return internal_getActorAccessAll$1(acpData, acp.agent);\r\n}\r\n/**\r\n * Set access to a Resource for a specific actor.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * actor specifically. In other words, it can, for example, add Policies that\r\n * give a particular Group Read access to the Resource. However, if other\r\n * Policies specify that everyone in that Group is *denied* Read access *except*\r\n * for a particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for an agent matching the given actor.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to set the access for.\r\n * @param actor Which instance of the given actor type you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setActorAccess$1(resource, acpData, actorRelation, actor, access) {\r\n    var _a, _b, _c, _d, _e;\r\n    if (!hasAccessibleAcr(resource) || acpData.inaccessibleUrls.length > 0) {\r\n        return null;\r\n    }\r\n    // Get the access that currently applies to the given actor\r\n    const existingAccess = internal_getActorAccess$1(acpData, actorRelation, actor);\r\n    /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */\r\n    if (existingAccess === null) {\r\n        return null;\r\n    }\r\n    // Get all Policies that apply specifically to the given actor\r\n    const applicableAcrPolicies = acpData.acrPolicies.filter((policy) => policyAppliesTo$1(policy, actorRelation, actor, acpData));\r\n    const applicablePolicies = acpData.policies.filter((policy) => policyAppliesTo$1(policy, actorRelation, actor, acpData));\r\n    // We only need to override Policies that define access other than what we want:\r\n    const conflictingAcrPolicies = applicableAcrPolicies.filter((policy) => policyConflictsWith$1(policy, {\r\n        read: access.controlRead,\r\n        write: access.controlWrite,\r\n    }));\r\n    const conflictingPolicies = applicablePolicies.filter((policy) => policyConflictsWith$1(policy, {\r\n        read: access.read,\r\n        append: access.append,\r\n        write: access.write,\r\n    }));\r\n    // For every Policy that applies specifically to the given Actor, but _also_\r\n    // to another actor (i.e. that applies using an anyOf Rule, or a Rule that\r\n    // mentions both the given and another actor)...\r\n    const otherActorAcrPolicies = conflictingAcrPolicies.filter((acrPolicy) => policyHasOtherActors$1(acrPolicy, actorRelation, actor, acpData));\r\n    const otherActorPolicies = conflictingPolicies.filter((policy) => policyHasOtherActors$1(policy, actorRelation, actor, acpData));\r\n    // ...check what access the current actor would have if we removed them...\r\n    const acpDataWithPoliciesExcluded = Object.assign(Object.assign({}, acpData), { acrPolicies: acpData.acrPolicies.filter((acrPolicy) => !otherActorAcrPolicies.includes(acrPolicy)), policies: acpData.policies.filter((policy) => !otherActorPolicies.includes(policy)) });\r\n    const remainingAccess = internal_getActorAccess$1(acpDataWithPoliciesExcluded, actorRelation, actor);\r\n    /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */\r\n    if (remainingAccess === null) {\r\n        return null;\r\n    }\r\n    // ...add copies of those Policies and their Rules, but excluding the given actor...\r\n    let updatedResource = resource;\r\n    otherActorAcrPolicies.forEach((acrPolicy) => {\r\n        const [policyCopy, ruleCopies] = copyPolicyExcludingActor$1(acrPolicy, resource, acpData, actorRelation, actor);\r\n        updatedResource = setResourceAcrPolicy(updatedResource, policyCopy);\r\n        updatedResource = ruleCopies.reduce(setResourceRule, updatedResource);\r\n    });\r\n    otherActorPolicies.forEach((policy) => {\r\n        const [policyCopy, ruleCopies] = copyPolicyExcludingActor$1(policy, resource, acpData, actorRelation, actor);\r\n        updatedResource = setResourcePolicy$1(updatedResource, policyCopy);\r\n        updatedResource = ruleCopies.reduce(setResourceRule, updatedResource);\r\n    });\r\n    // ...add a new Policy that applies the given access,\r\n    // and the previously applying access for access modes that were undefined...\r\n    const newRuleName = `rule_${encodeURIComponent(`${actorRelation}_${actor}`)}`;\r\n    let newRule = createResourceRuleFor(resource, newRuleName);\r\n    newRule = setIri(newRule, actorRelation, actor);\r\n    const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;\r\n    const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;\r\n    let acrPoliciesToUnapply = otherActorAcrPolicies;\r\n    // Only replace existing Policies if the defined access actually changes:\r\n    if (newControlReadAccess !== remainingAccess.controlRead ||\r\n        newControlWriteAccess !== remainingAccess.controlWrite) {\r\n        const newAcrPolicyName = `acr_policy` +\r\n            `_${encodeURIComponent(`${actorRelation}_${actor}`)}` +\r\n            `_${Date.now()}_${Math.random()}`;\r\n        let newAcrPolicy = createResourcePolicyFor(resource, newAcrPolicyName);\r\n        newAcrPolicy = setAllowModesV1(newAcrPolicy, {\r\n            read: newControlReadAccess === true,\r\n            append: false,\r\n            write: newControlWriteAccess === true,\r\n        });\r\n        newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newRule);\r\n        updatedResource = setResourceAcrPolicy(updatedResource, newAcrPolicy);\r\n        updatedResource = setResourceRule(updatedResource, newRule);\r\n        // If we don't have to set new access, we only need to unapply the\r\n        // ACR Policies that applied to both the given actor and other actors\r\n        // (because they have been replaced by clones not mentioning the given\r\n        // actor). Hence `policiesToUnApply` is initialised to `otherActorPolicies`.\r\n        // However, if we're in this if branch, that means we also had to replace\r\n        // Policies that defined access for just this actor, so we'll have to remove\r\n        // all Policies mentioning this actor:\r\n        acrPoliciesToUnapply = conflictingAcrPolicies;\r\n    }\r\n    const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;\r\n    const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;\r\n    const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;\r\n    let policiesToUnapply = otherActorPolicies;\r\n    // Only replace existing Policies if the defined access actually changes:\r\n    if (newReadAccess !== remainingAccess.read ||\r\n        newAppendAccess !== remainingAccess.append ||\r\n        newWriteAccess !== remainingAccess.write) {\r\n        const newPolicyName = `policy` +\r\n            `_${encodeURIComponent(`${actorRelation}_${actor}`)}` +\r\n            `_${Date.now()}_${Math.random()}`;\r\n        let newPolicy = createResourcePolicyFor(resource, newPolicyName);\r\n        newPolicy = setAllowModesV1(newPolicy, {\r\n            read: newReadAccess === true,\r\n            append: newAppendAccess === true,\r\n            write: newWriteAccess === true,\r\n        });\r\n        newPolicy = addIri(newPolicy, acp.allOf, newRule);\r\n        updatedResource = setResourcePolicy$1(updatedResource, newPolicy);\r\n        updatedResource = setResourceRule(updatedResource, newRule);\r\n        // If we don't have to set new access, we only need to unapply the\r\n        // Policies that applied to both the given actor and other actors (because\r\n        // they have been replaced by clones not mentioning the given actor). Hence\r\n        // `policiesToUnApply` is initialised to `otherActorPolicies`.\r\n        // However, if we're in this if branch, that means we also had to replace\r\n        // Policies that defined access for just this actor, so we'll have to remove\r\n        // all Policies mentioning this actor:\r\n        policiesToUnapply = conflictingPolicies;\r\n    }\r\n    // ...then remove existing Policy URLs that mentioned both the given actor\r\n    // and other actors from the given Resource and apply the new ones (but do not\r\n    // remove the actual old Policies - they might still apply to other Resources!).\r\n    acrPoliciesToUnapply.forEach((previouslyApplicableAcrPolicy) => {\r\n        updatedResource = removeAcrPolicyUrl$1(updatedResource, asIri(previouslyApplicableAcrPolicy));\r\n    });\r\n    policiesToUnapply.forEach((previouslyApplicablePolicy) => {\r\n        updatedResource = removePolicyUrl$1(updatedResource, asIri(previouslyApplicablePolicy));\r\n    });\r\n    return updatedResource;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Agent specifically. In other words, it can, for example, add Policies that\r\n * give a particular Agent Read access to the Resource. However, if other\r\n * Policies specify that that Agent is *denied* Read access *except* if they're\r\n * in a particular Group, then that will be left intact.\r\n * This means that, unless *only* this function is used to manipulate access to\r\n * this Resource, the set access might not be equal to the effective access for\r\n * the given Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param webId Which Agent you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setAgentAccess$1(resource, acpData, webId, access) {\r\n    return internal_setActorAccess$1(resource, acpData, acp.agent, webId, access);\r\n}\r\n/**\r\n * Set access to a Resource for a specific Group.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Group specifically. In other words, it can, for example, add Policies that\r\n * give a particular Group Read access to the Resource. However, if other\r\n * Policies specify that it is *denied* Read access *except* if they're a\r\n * particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for Agents in the given Group.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param groupUrl Which Group you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Group. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setGroupAccess(resource, acpData, groupUrl, access) {\r\n    return internal_setActorAccess$1(resource, acpData, acp.group, groupUrl, access);\r\n}\r\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for everybody\r\n * specifically. In other words, it can, for example, add Policies that\r\n * give everybody Read access to the Resource. However, if other\r\n * Policies specify that everybody is *denied* Read access *except* if they're\r\n * in a particular Group, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for a particular Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Rules that apply to a particular Resource.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setPublicAccess$1(resource, acpData, access) {\r\n    return internal_setActorAccess$1(resource, acpData, acp.agent, acp.PublicAgent, access);\r\n}\r\nfunction policyHasOtherActors$1(policy, actorRelation, actor, acpData) {\r\n    // Note: the non-null assertions (`!`) here should be valid because\r\n    //       the caller of `policyHasOtherActors` should already have validated\r\n    //       that the return value of internal_getPoliciesAndRules() did not have\r\n    //       any inaccessible URLs, so we should be able to find every Rule.\r\n    const allOfRules = getIriAll(policy, acp.allOf).map((ruleUrl) => acpData.rules.find((rule) => asIri(rule) === ruleUrl));\r\n    const allOfRulesHaveOtherActors = allOfRules.some((rule) => {\r\n        return ruleHasOtherActors(rule, actorRelation, actor);\r\n    });\r\n    const anyOfRules = getIriAll(policy, acp.anyOf).map((ruleUrl) => acpData.rules.find((rule) => asIri(rule) === ruleUrl));\r\n    const anyOfRulesHaveOtherActors = anyOfRules.some((rule) => {\r\n        return ruleHasOtherActors(rule, actorRelation, actor);\r\n    });\r\n    /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */\r\n    const noneOfRules = getIriAll(policy, acp.noneOf).map((ruleUrl) => acpData.rules.find((rule) => asIri(rule) === ruleUrl));\r\n    /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */\r\n    const noneOfRulesHaveOtherActors = noneOfRules.some((rule) => {\r\n        return ruleHasOtherActors(rule, actorRelation, actor);\r\n    });\r\n    return (allOfRulesHaveOtherActors ||\r\n        anyOfRulesHaveOtherActors ||\r\n        noneOfRulesHaveOtherActors);\r\n}\r\nfunction ruleHasOtherActors(rule, actorRelation, actor) {\r\n    const otherActors = [];\r\n    knownActorRelations$1.forEach((knownActorRelation) => {\r\n        const otherActorsWithThisRelation = getIriAll(rule, knownActorRelation).filter((applicableActor) => applicableActor !== actor || knownActorRelation !== actorRelation);\r\n        // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:\r\n        otherActors.push(...otherActorsWithThisRelation);\r\n    });\r\n    return otherActors.length > 0;\r\n}\r\nfunction copyPolicyExcludingActor$1(inputPolicy, resourceWithAcr, acpData, actorRelationToExclude, actorToExclude) {\r\n    const newIriSuffix = \"_copy_without\" +\r\n        `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` +\r\n        `_${Date.now()}_${Math.random()}`;\r\n    // Create new Rules for the Policy, excluding the given Actor\r\n    const newAllOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.allOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    const newAnyOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.anyOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    const newNoneOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.noneOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    // Create a new Policy with the new Rules\r\n    let newPolicy = createResourcePolicyFor(resourceWithAcr, encodeURI(asIri(inputPolicy)) + newIriSuffix);\r\n    getIriAll(inputPolicy, acp.allow).forEach((allowMode) => {\r\n        newPolicy = addIri(newPolicy, acp.allow, allowMode);\r\n    });\r\n    getIriAll(inputPolicy, acp.deny).forEach((denyMode) => {\r\n        newPolicy = addIri(newPolicy, acp.deny, denyMode);\r\n    });\r\n    newAllOfRules.forEach((newRule) => {\r\n        newPolicy = addIri(newPolicy, acp.allOf, newRule);\r\n    });\r\n    newAnyOfRules.forEach((newRule) => {\r\n        newPolicy = addIri(newPolicy, acp.anyOf, newRule);\r\n    });\r\n    /* istanbul ignore next Policies listing noneOf Rules are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Rules to copy. */\r\n    newNoneOfRules.forEach((newRule) => {\r\n        newPolicy = addIri(newPolicy, acp.noneOf, newRule);\r\n    });\r\n    return [\r\n        newPolicy,\r\n        newAllOfRules.concat(newAnyOfRules).concat(newNoneOfRules),\r\n    ];\r\n}\r\n/** Creates clones of all the Rules identified by `ruleIris` in `acpData`, excluding the given Actor */\r\nfunction copyRulesExcludingActor(ruleIris, resourceWithAcr, acpData, iriSuffix, actorRelationToExclude, actorToExclude) {\r\n    return ruleIris\r\n        .map((ruleIri) => {\r\n        const rule = acpData.rules.find((rule) => asIri(rule) === ruleIri);\r\n        /* istanbul ignore if: getPoliciesAndRules should already have fetched all referenced Rules, so this should never be true: */\r\n        if (typeof rule === \"undefined\") {\r\n            return null;\r\n        }\r\n        let newRule = createResourceRuleFor(resourceWithAcr, encodeURI(asIri(rule)) + iriSuffix);\r\n        let listsOtherActors = false;\r\n        knownActorRelations$1.forEach((knownActorRelation) => {\r\n            getIriAll(rule, knownActorRelation).forEach((targetActor) => {\r\n                if (knownActorRelation === actorRelationToExclude &&\r\n                    targetActor === actorToExclude) {\r\n                    return;\r\n                }\r\n                listsOtherActors = true;\r\n                newRule = addIri(newRule, knownActorRelation, targetActor);\r\n            });\r\n        });\r\n        return listsOtherActors ? newRule : null;\r\n    })\r\n        .filter(isNotNull$1);\r\n}\r\nfunction isNotNull$1(value) {\r\n    return value !== null;\r\n}\r\nasync function internal_getPoliciesAndRules(resource, options = internal_defaultFetchOptions) {\r\n    const acrPolicyUrls = getAcrPolicyUrlAll$1(resource);\r\n    const policyUrls = getPolicyUrlAll$1(resource);\r\n    const allPolicyResourceUrls = getResourceUrls$1(acrPolicyUrls).concat(getResourceUrls$1(policyUrls));\r\n    const policyResources = await getResources$1(allPolicyResourceUrls, options);\r\n    const acrPolicies = getThingsFromResources$1(acrPolicyUrls, policyResources).filter(isNotNull$1);\r\n    const policies = getThingsFromResources$1(policyUrls, policyResources).filter(isNotNull$1);\r\n    const ruleUrlSet = new Set();\r\n    acrPolicies.forEach((acrPolicy) => {\r\n        const referencedRuleUrls = getReferencedRuleUrls(acrPolicy);\r\n        referencedRuleUrls.forEach((ruleUrl) => {\r\n            ruleUrlSet.add(ruleUrl);\r\n        });\r\n    });\r\n    policies.forEach((policy) => {\r\n        const referencedRuleUrls = getReferencedRuleUrls(policy);\r\n        referencedRuleUrls.forEach((ruleUrl) => {\r\n            ruleUrlSet.add(ruleUrl);\r\n        });\r\n    });\r\n    const ruleUrls = Array.from(ruleUrlSet);\r\n    const ruleResourceUrls = ruleUrls.map((ruleUrl) => getResourceUrl$1(ruleUrl));\r\n    const unfetchedRuleResourceUrls = ruleResourceUrls.filter((ruleResourceUrl) => !allPolicyResourceUrls.includes(ruleResourceUrl));\r\n    const ruleResources = await getResources$1(unfetchedRuleResourceUrls, options);\r\n    const allResources = Object.assign(Object.assign({}, policyResources), ruleResources);\r\n    const rules = getThingsFromResources$1(ruleUrls, allResources).filter(isNotNull$1);\r\n    const inaccessibleUrls = Object.keys(allResources).filter((resourceUrl) => allResources[resourceUrl] === null);\r\n    return {\r\n        inaccessibleUrls,\r\n        acrPolicies,\r\n        policies,\r\n        rules,\r\n    };\r\n}\r\nfunction getResourceUrl$1(thingUrl) {\r\n    const thingUrlObject = new URL(thingUrl);\r\n    thingUrlObject.hash = \"\";\r\n    return thingUrlObject.href;\r\n}\r\nfunction getResourceUrls$1(thingUrls) {\r\n    const resourceUrls = [];\r\n    thingUrls.forEach((thingUrl) => {\r\n        const resourceUrl = getResourceUrl$1(thingUrl);\r\n        if (!resourceUrls.includes(resourceUrl)) {\r\n            resourceUrls.push(resourceUrl);\r\n        }\r\n    });\r\n    return resourceUrls;\r\n}\r\nasync function getResources$1(resourceUrls, options) {\r\n    const uniqueResourceUrls = Array.from(new Set(resourceUrls));\r\n    const resources = {};\r\n    await Promise.all(uniqueResourceUrls.map(async (resourceUrl) => {\r\n        try {\r\n            const resource = await getSolidDataset(resourceUrl, options);\r\n            resources[resourceUrl] = resource;\r\n        }\r\n        catch (e) {\r\n            resources[resourceUrl] = null;\r\n        }\r\n    }));\r\n    return resources;\r\n}\r\nfunction getThingsFromResources$1(thingUrls, resources) {\r\n    return thingUrls.map((thingUrl) => {\r\n        const resourceUrl = getResourceUrl$1(thingUrl);\r\n        const resource = resources[resourceUrl];\r\n        if (!resource) {\r\n            return null;\r\n        }\r\n        return getThing(resource, thingUrl);\r\n    });\r\n}\r\nfunction getReferencedRuleUrls(policy) {\r\n    return getAllOfRuleUrlAll(policy)\r\n        .concat(getAnyOfRuleUrlAll(policy))\r\n        .concat(getNoneOfRuleUrlAll(policy));\r\n}\n\n//\r\nfunction universalAccessToAcl(newAccess, previousAccess) {\r\n    var _a, _b, _c, _d;\r\n    // Universal access is aligned on ACP, which means there is a distinction between\r\n    // controlRead and controlWrite. This split doesn't exist in WAC, which is why\r\n    // the type for the input variable of this function is a restriction on the\r\n    // universal Access type.\r\n    if (newAccess.controlRead !== newAccess.controlWrite) {\r\n        throw new Error(\"For Pods using Web Access Control, controlRead and controlWrite must be equal.\");\r\n    }\r\n    return {\r\n        read: (_a = newAccess.read) !== null && _a !== void 0 ? _a : previousAccess.read,\r\n        append: (_b = newAccess.append) !== null && _b !== void 0 ? _b : previousAccess.append,\r\n        write: (_c = newAccess.write) !== null && _c !== void 0 ? _c : previousAccess.write,\r\n        control: (_d = newAccess.controlRead) !== null && _d !== void 0 ? _d : previousAccess.control,\r\n    };\r\n}\r\nfunction aclAccessToUniversal(access) {\r\n    // In ACL, denying access to an actor is a notion that doesn't exist, so an\r\n    // access is either granted or not for a given mode.\r\n    // This creates a misalignment with the ACP notion of an access being granted,\r\n    // denied, or simply not mentioned. Here, we convert the boolean vision of\r\n    // ACL into the boolean or undefined vision of ACP.\r\n    return {\r\n        read: access.read,\r\n        write: access.write,\r\n        append: access.append,\r\n        controlRead: access.control,\r\n        controlWrite: access.control,\r\n    };\r\n}\r\nasync function getActorAccess(resource, actor, accessEvaluationCallback, options) {\r\n    const resourceAcl = await internal_fetchAcl(resource, options);\r\n    const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl), actor);\r\n    if (wacAccess === null) {\r\n        return null;\r\n    }\r\n    return aclAccessToUniversal(wacAccess);\r\n}\r\nasync function getActorClassAccess(resource, accessEvaluationCallback, options) {\r\n    const resourceAcl = await internal_fetchAcl(resource, options);\r\n    const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));\r\n    if (wacAccess === null) {\r\n        return null;\r\n    }\r\n    return aclAccessToUniversal(wacAccess);\r\n}\r\nasync function getActorAccessAll(resource, accessEvaluationCallback, options) {\r\n    const resourceAcl = await internal_fetchAcl(resource, options);\r\n    const wacAgentAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));\r\n    if (wacAgentAccess === null) {\r\n        return null;\r\n    }\r\n    const result = {};\r\n    for (const [webId, wacAccess] of Object.entries(wacAgentAccess)) {\r\n        result[webId] = aclAccessToUniversal(wacAccess);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to the given Agent.\r\n *\r\n * Note that this only lists permissions granted to the given Agent individually,\r\n * and will not exhaustively list modes the given Agent may have access to because\r\n * they apply to everyone, or because they apply to the Agent through a group for\r\n * instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Access\r\n * @param agent The Agent for which the Access is granted\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\r\nfunction getAgentAccess$4(resource, agent, options = internal_defaultFetchOptions) {\r\n    return getActorAccess(resource, agent, getAgentAccess$5, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to the given Group.\r\n *\r\n * Note that this only lists permissions granted to the given Group individually,\r\n * and will not exhaustively list modes the given Group may have access to because\r\n * they apply to everyone, or because they apply to the Group through another\r\n * Group that may contain it for instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Access\r\n * @param group The Group for which the Access is granted\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.\r\n */\r\nfunction getGroupAccess$1(resource, group, options = internal_defaultFetchOptions) {\r\n    return getActorAccess(resource, group, getGroupAccess$2, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to everyone.\r\n *\r\n * Note that this only lists permissions explicitly granted to everyone as a whole,\r\n * and will not exhaustively list modes any individual Agent or Group may have\r\n * access to because they specifically apply to them only.\r\n *\r\n * @param resource The URL of the Resource for which we want to list public Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the everyone explicitly, or null if it could not be determined.\r\n */\r\nfunction getPublicAccess$4(resource, options = internal_defaultFetchOptions) {\r\n    return getActorClassAccess(resource, getPublicAccess$5, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted explicitly to each individual Agent.\r\n *\r\n * Note that this only lists permissions granted to each Agent individually,\r\n * and will not exhaustively list modes any Agent may have access to because\r\n * they apply to everyone, or because they apply to an Agent through a group for\r\n * instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Agents Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A map of Agent WebIDs and the access granted to them, or null if it could not be determined.\r\n */\r\nfunction getAgentAccessAll$4(resource, options = internal_defaultFetchOptions) {\r\n    return getActorAccessAll(resource, getAgentAccessAll$5, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted explicitly to each individual Group.\r\n *\r\n * Note that this only lists permissions granted to each Group individually,\r\n * and will not exhaustively list modes any Group may have access to because\r\n * they apply individually to all of the Agents in the Group, or to everyone\r\n * for instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Agents Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A map of Group URLs and the access granted to them, or null if it could not be determined.\r\n */\r\nfunction getGroupAccessAll$1(resource, options = internal_defaultFetchOptions) {\r\n    return getActorAccessAll(resource, getGroupAccessAll$2, options);\r\n}\r\nasync function prepareResourceAcl(resource, options) {\r\n    if (!hasAccessibleAcl(resource)) {\r\n        return null;\r\n    }\r\n    const acl = await internal_fetchAcl(resource, options);\r\n    const resourceWithAcl = internal_setAcl(resource, acl);\r\n    let resourceAcl;\r\n    if (hasResourceAcl(resourceWithAcl)) {\r\n        // This is the simple case, where the Resource ACL we need to update already\r\n        // exists.\r\n        resourceAcl = internal_getResourceAcl(resourceWithAcl);\r\n    }\r\n    else if (hasFallbackAcl(resourceWithAcl)) {\r\n        // In this case, the Resource ACL needs to be created first, and then updated.\r\n        resourceAcl = createAclFromFallbackAcl(resourceWithAcl);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    return internal_setResourceAcl(resourceWithAcl, resourceAcl);\r\n}\r\nasync function saveUpdatedAcl(resource, acl, options) {\r\n    let savedAcl = null;\r\n    try {\r\n        savedAcl = await saveAclFor(resource, acl, options);\r\n        return internal_setResourceAcl(resource, savedAcl);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\r\nasync function setActorClassAccess(resource, access, getAccess, setAccess, options) {\r\n    const resourceWithOldAcl = await prepareResourceAcl(resource, options);\r\n    if (resourceWithOldAcl === null) {\r\n        return null;\r\n    }\r\n    const resourceAcl = getResourceAcl(resourceWithOldAcl);\r\n    const currentAccess = getAccess(resourceWithOldAcl);\r\n    const wacAccess = universalAccessToAcl(access, currentAccess);\r\n    const updatedResourceAcl = setAccess(resourceAcl, wacAccess);\r\n    return saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);\r\n}\r\nasync function setActorAccess(resource, actor, access, getAccess, setAccess, options) {\r\n    const resourceWithOldAcl = await prepareResourceAcl(resource, options);\r\n    if (resourceWithOldAcl === null) {\r\n        return null;\r\n    }\r\n    const currentAccess = getAccess(resourceWithOldAcl, actor);\r\n    const resourceAcl = getResourceAcl(resourceWithOldAcl);\r\n    const wacAccess = universalAccessToAcl(access, currentAccess);\r\n    const updatedResourceAcl = setAccess(resourceAcl, actor, wacAccess);\r\n    return saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);\r\n}\r\n/**\r\n * Set the Access modes for a given Agent to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param agent The Agent for whom Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\r\nasync function setAgentResourceAccess(resource, agent, access, options = internal_defaultFetchOptions) {\r\n    return setActorAccess(resource, agent, access, getAgentAccess$5, setAgentResourceAccess$1, options);\r\n}\r\n/**\r\n * Set the Access modes for a given Group to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param agent The Group for which Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\r\nasync function setGroupResourceAccess(resource, group, access, options = internal_defaultFetchOptions) {\r\n    return setActorAccess(resource, group, access, getGroupAccess$2, setGroupResourceAccess$1, options);\r\n}\r\n/**\r\n * Set the Access modes for everyone to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\r\nasync function setPublicResourceAccess(resource, access, options = internal_defaultFetchOptions) {\r\n    return setActorClassAccess(resource, access, getPublicAccess$5, setPublicResourceAccess$1, options);\r\n}\n\n//\n\nvar universal = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor,\n  getAgentAccess: getAgentAccess$3,\n  setAgentAccess: setAgentAccess$3,\n  getAgentAccessAll: getAgentAccessAll$3,\n  getGroupAccess: getGroupAccess,\n  getGroupAccessAll: getGroupAccessAll,\n  setGroupAccess: setGroupAccess,\n  getPublicAccess: getPublicAccess$3,\n  setPublicAccess: setPublicAccess$3\n});\n\n//\r\nasync function getAccessFor(resourceUrl, actorType, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {\r\n    if (actorType === \"agent\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When reading Agent-specific access, the given agent cannot be left undefined.\");\r\n        }\r\n        return getAgentAccess$3(resourceUrl, actor, options);\r\n    }\r\n    if (actorType === \"group\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When reading Group-specific access, the given group cannot be left undefined.\");\r\n        }\r\n        return getGroupAccess(resourceUrl, actor, options);\r\n    }\r\n    if (actorType === \"public\") {\r\n        if (typeof actor === \"string\") {\r\n            throw new Error(`When reading public access, no actor type should be specified (here [${actor}]).`);\r\n        }\r\n        return getPublicAccess$3(resourceUrl, actor);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given set of actors: all Agents\r\n * or all Groups.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given actor (Agent\r\n *   or Group). If additional restrictions are set up to apply to the given Agent\r\n *   in a particular situation, those will not be reflected in the return value\r\n *   of this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param actorType type of actor whose access is being read.\r\n * @returns What access is set for the given resource, grouped by resp. Agent or Group.\r\n * @since 1.5.0\r\n *\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\r\nasync function getAccessForAll(resourceUrl, actorType, options = internal_defaultFetchOptions) {\r\n    if (actorType === \"agent\") {\r\n        return getAgentAccessAll$3(resourceUrl, options);\r\n    }\r\n    if (actorType === \"group\") {\r\n        return getGroupAccessAll(resourceUrl, options);\r\n    }\r\n    return null;\r\n}\r\nasync function setAccessFor(resourceUrl, actorType, access, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {\r\n    if (actorType === \"agent\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When writing Agent-specific access, the given agent cannot be left undefined.\");\r\n        }\r\n        return setAgentAccess$3(resourceUrl, actor, access, options);\r\n    }\r\n    if (actorType === \"group\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When writing Group-specific access, the given group cannot be left undefined.\");\r\n        }\r\n        return setGroupAccess(resourceUrl, actor, access, options);\r\n    }\r\n    if (actorType === \"public\") {\r\n        if (typeof actor === \"string\") {\r\n            throw new Error(`When writing public access, no actor type should be specified (here [${actor}]).`);\r\n        }\r\n        return setPublicAccess$3(resourceUrl, access, actor);\r\n    }\r\n    return null;\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Agent. If\r\n *   additional restrictions are set up to apply to the given Agent in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function getAgentAccess$3(resourceUrl, webId, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        return internal_getAgentAccess$1(acpData, webId);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getAgentAccess$4(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Agent's access to.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Agent explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function setAgentAccess$3(resourceUrl, webId, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        const updatedResource = internal_setAgentAccess$1(resourceInfo, acpData, webId, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return await getAgentAccess$3(resourceUrl, webId, options);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead !== access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\r\n        }\r\n        const wacAccess = access;\r\n        await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);\r\n        return getAgentAccess$4(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for all Agents with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Agents. If\r\n *   additional restrictions are set up to apply to the listed Agents in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, grouped by Agent.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function getAgentAccessAll$3(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        return internal_getAgentAccessAll$1(acpData);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getAgentAccessAll$4(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Group.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Group. If\r\n *   additional restrictions are set up to apply to the given Group in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Group you want to get the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\r\nasync function getGroupAccess(resourceUrl, webId, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        return internal_getGroupAccess(acpData, webId);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getGroupAccess$1(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for all Groups with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Groups. If\r\n *   additional restrictions are set up to apply to the listed Groups in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, sorted by Group.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\r\nasync function getGroupAccessAll(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        return internal_getGroupAccessAll(acpData);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getGroupAccessAll$1(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Group.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Group. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Group has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Group's access to.\r\n * @param groupUrl URL of the Group you want to set access for.\r\n * @param access What access permissions you want to set for the given Group to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Group explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.\r\n */\r\nasync function setGroupAccess(resourceUrl, groupUrl, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        const updatedResource = internal_setGroupAccess(resourceInfo, acpData, groupUrl, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return await getGroupAccess(resourceUrl, groupUrl, options);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead !== access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\r\n        }\r\n        const wacAccess = access;\r\n        await setGroupResourceAccess(resourceInfo, groupUrl, wacAccess, options);\r\n        return getGroupAccess$1(resourceInfo, groupUrl, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for everyone.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for everyone. If\r\n *   additional restrictions are set up to apply to users in a particular\r\n *   situation, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @since 1.5.0\r\n *\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function getPublicAccess$3(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        return internal_getPublicAccess$1(acpData);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getPublicAccess$4(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for everybody. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access a user has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change public access to.\r\n * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for everybody explicitly.\r\n * @since 1.5.0\r\n *\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function setPublicAccess$3(resourceUrl, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndRules(resourceInfo, options);\r\n        const updatedResource = internal_setPublicAccess$1(resourceInfo, acpData, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return await getPublicAccess$3(resourceUrl, options);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead !== access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\r\n        }\r\n        const wacAccess = access;\r\n        await setPublicResourceAccess(resourceInfo, wacAccess, options);\r\n        return getPublicAccess$4(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\n\nvar universal_v1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAgentAccess: getAgentAccess$3,\n  setAgentAccess: setAgentAccess$3,\n  getAgentAccessAll: getAgentAccessAll$3,\n  getGroupAccess: getGroupAccess,\n  getGroupAccessAll: getGroupAccessAll,\n  setGroupAccess: setGroupAccess,\n  getPublicAccess: getPublicAccess$3,\n  setPublicAccess: setPublicAccess$3,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor\n});\n\n//\r\nconst knownActorRelations = [acp.agent];\r\n/**\r\n * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this actor.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setActorAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent) you want to get the access for.\r\n * @param actor Which instance of the given actor type you want to get the access for.\r\n * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getActorAccess(acpData, actorRelation, actor) {\r\n    if (acpData.inaccessibleUrls.length > 0) {\r\n        // If we can't see all access data,\r\n        // we can't reliably determine what access the given actor has:\r\n        return null;\r\n    }\r\n    const applicableAcrPolicies = acpData.acrPolicies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acpData));\r\n    const applicablePolicies = acpData.policies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acpData));\r\n    const initialAccess = {\r\n        read: false,\r\n        append: false,\r\n        write: false,\r\n        controlRead: false,\r\n        controlWrite: false,\r\n    };\r\n    // All allowed reading and writing defined in ACR policies\r\n    // determines whether the `controlRead` and `controlWrite` statuses are `true`.\r\n    const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {\r\n        const allAllowedAccess = Object.assign({}, acc);\r\n        const allowModes = getAllowModesV2(policy);\r\n        if (allowModes.read) {\r\n            allAllowedAccess.controlRead = true;\r\n        }\r\n        if (allowModes.write) {\r\n            allAllowedAccess.controlWrite = true;\r\n        }\r\n        return allAllowedAccess;\r\n    }, initialAccess);\r\n    // Then allowed reading, appending and writing in regular policies\r\n    // determines whether the respective status is `true`.\r\n    const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {\r\n        const allAllowedAccess = Object.assign({}, acc);\r\n        const allowModes = getAllowModesV2(policy);\r\n        if (allowModes.read) {\r\n            allAllowedAccess.read = true;\r\n        }\r\n        if (allowModes.append) {\r\n            allAllowedAccess.append = true;\r\n        }\r\n        if (allowModes.write) {\r\n            allAllowedAccess.write = true;\r\n        }\r\n        return allAllowedAccess;\r\n    }, allowedAcrAccess);\r\n    // At this point, everything that has been explicitly allowed is true.\r\n    // However, it could still be overridden by access that is explicitly denied.\r\n    // Starting with `controlRead` and `controlWrite`,\r\n    // by inspecting denied reading and writing defined in the ACR policies.\r\n    const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {\r\n        const allDeniedAccess = Object.assign({}, acc);\r\n        const denyModes = getDenyModesV2(policy);\r\n        if (denyModes.read === true) {\r\n            allDeniedAccess.controlRead = false;\r\n        }\r\n        if (denyModes.write === true) {\r\n            allDeniedAccess.controlWrite = false;\r\n        }\r\n        return allDeniedAccess;\r\n    }, withAllowedAccess);\r\n    // And finally, we set to `false` those access modes that are explicitly denied\r\n    // in the regular policies:\r\n    const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {\r\n        const allDeniedAccess = Object.assign({}, acc);\r\n        const denyModes = getDenyModesV2(policy);\r\n        if (denyModes.read === true) {\r\n            allDeniedAccess.read = false;\r\n        }\r\n        if (denyModes.append === true) {\r\n            allDeniedAccess.append = false;\r\n        }\r\n        if (denyModes.write === true) {\r\n            allDeniedAccess.write = false;\r\n        }\r\n        return allDeniedAccess;\r\n    }, withAcrDeniedAccess);\r\n    return withDeniedAccess;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Agent.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getAgentAccess(acpData, webId) {\r\n    return internal_getActorAccess(acpData, acp.agent, webId);\r\n}\r\n/**\r\n * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to everybody.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to everybody, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setPublicAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getPublicAccess(acpData) {\r\n    return internal_getActorAccess(acpData, acp.agent, acp.PublicAgent);\r\n}\r\nfunction policyAppliesTo(policy, actorRelation, actor, acpData) {\r\n    const allowModes = getIriAll(policy, acp.allow);\r\n    const denyModes = getIriAll(policy, acp.deny);\r\n    if (allowModes.length + denyModes.length === 0) {\r\n        // A Policy that does not specify access modes does not do anything:\r\n        return false;\r\n    }\r\n    // Note: the non-null assertions (`!`) here should be valid because\r\n    //       the caller of `policyAppliesTo` should already have validated that\r\n    //       the return value of internal_getPoliciesAndMatchers() did not have any\r\n    //       inaccessible URLs, so we should be able to find every Matcher.\r\n    const allOfMatchers = getAllOfMatcherUrlAll(policy).map((matcherUrl) => acpData.matchers.find((matcher) => asIri(matcher) === matcherUrl));\r\n    const anyOfMatchers = getAnyOfMatcherUrlAll(policy).map((matcherUrl) => acpData.matchers.find((matcher) => asIri(matcher) === matcherUrl));\r\n    const noneOfMatchers = getNoneOfMatcherUrlAll(policy).map((matcherUrl) => acpData.matchers.find((matcher) => asIri(matcher) === matcherUrl));\r\n    // We assume that this Policy applies if this specific actor is mentioned\r\n    // and no further restrictions are in place.\r\n    // (In other words, the Policy may apply to others *in addition to* this\r\n    // actor, but if it applies to this actor *unless* some other condition holds,\r\n    // we cannot be sure whether it will apply to this actor.)\r\n    // This means that:\r\n    return (\r\n    // Every existing allOf Matcher explicitly applies explicitly to this given actor:\r\n    allOfMatchers.every((matcher) => matcherAppliesTo(matcher, actorRelation, actor)) &&\r\n        // If there are anyOf Matchers, at least one applies explicitly to this actor:\r\n        (anyOfMatchers.length === 0 ||\r\n            anyOfMatchers.some((matcher) => matcherAppliesTo(matcher, actorRelation, actor))) &&\r\n        // There is at least one allOf or anyOf Matcher:\r\n        allOfMatchers.length + anyOfMatchers.length > 0 &&\r\n        // No further restrictions are in place that make this sometimes not apply\r\n        // to the given actor:\r\n        noneOfMatchers.length === 0);\r\n}\r\nfunction policyConflictsWith(policy, otherAccess) {\r\n    const allowModes = getIriAll(policy, acp.allow);\r\n    const denyModes = getIriAll(policy, acp.deny);\r\n    return ((otherAccess.read === true &&\r\n        denyModes.includes(internal_accessModeIriStrings.read)) ||\r\n        (otherAccess.read === false &&\r\n            allowModes.includes(internal_accessModeIriStrings.read) &&\r\n            !denyModes.includes(internal_accessModeIriStrings.read)) ||\r\n        (otherAccess.append === true &&\r\n            denyModes.includes(internal_accessModeIriStrings.append)) ||\r\n        (otherAccess.append === false &&\r\n            allowModes.includes(internal_accessModeIriStrings.append) &&\r\n            !denyModes.includes(internal_accessModeIriStrings.append)) ||\r\n        (otherAccess.write === true &&\r\n            denyModes.includes(internal_accessModeIriStrings.write)) ||\r\n        (otherAccess.write === false &&\r\n            allowModes.includes(internal_accessModeIriStrings.write) &&\r\n            !denyModes.includes(internal_accessModeIriStrings.write)));\r\n}\r\nfunction matcherAppliesTo(matcher, actorRelation, actor) {\r\n    return getIriAll(matcher, actorRelation).includes(actor);\r\n}\r\n/**\r\n * Get a set of all actors mentioned in an ACR by active Matchers (i.e. that are\r\n * referenced by Policies referenced by the ACR Control, and therefore that\r\n * effectively apply).\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation\r\n */\r\nfunction internal_findActorAll(acpData, actorRelation) {\r\n    const actors = new Set();\r\n    // This code could be prettier using flat(), which isn't supported by nodeJS 10.\r\n    // If you read this comment after April 2021, feel free to refactor.\r\n    acpData.matchers.forEach((matcher) => {\r\n        getIriAll(matcher, actorRelation)\r\n            .filter((iri) => ![\r\n            acp.PublicAgent,\r\n            acp.CreatorAgent,\r\n            acp.AuthenticatedAgent,\r\n        ].includes(iri) || actorRelation !== acp.agent)\r\n            .forEach((iri) => actors.add(iri));\r\n    });\r\n    return actors;\r\n}\r\n/**\r\n * Iterate through all the actors active for an ACR, and list all of their access.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation The type of actor we want to list access for\r\n * @returns A map with each actor access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getActorAccessAll(acpData, actorRelation) {\r\n    if (acpData.inaccessibleUrls.length > 0) {\r\n        // If we can't see all access data,\r\n        // we can't reliably determine what access actors of the given type have:\r\n        return null;\r\n    }\r\n    const result = {};\r\n    const actors = internal_findActorAll(acpData, actorRelation);\r\n    actors.forEach((iri) => {\r\n        // The type assertion holds, because if internal_getActorAccess were null,\r\n        // we would have returned {} already.\r\n        const access = internal_getActorAccess(acpData, actorRelation, iri);\r\n        result[iri] = access;\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Agents.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @returns A map with each Agent's access indexed by their WebID, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getAgentAccessAll(acpData) {\r\n    return internal_getActorAccessAll(acpData, acp.agent);\r\n}\r\n/**\r\n * Set access to a Resource for a specific actor.\r\n *\r\n * This function adds the relevant Access Control Policies and Matchers to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * actor specifically. In other words, it can, for example, add Policies that\r\n * give the general Public Read access to the Resource. However, if other\r\n * Policies specify that everyone is *denied* Read access *except* for a\r\n * particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for an agent matching the given actor.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Matchers\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent) you want to set the access for.\r\n * @param actor Which instance of the given actor type you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setActorAccess(resource, acpData, actorRelation, actor, access) {\r\n    var _a, _b, _c, _d, _e;\r\n    if (!hasAccessibleAcr(resource) || acpData.inaccessibleUrls.length > 0) {\r\n        return null;\r\n    }\r\n    // Get the access that currently applies to the given actor\r\n    const existingAccess = internal_getActorAccess(acpData, actorRelation, actor);\r\n    /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */\r\n    if (existingAccess === null) {\r\n        return null;\r\n    }\r\n    // Get all Policies that apply specifically to the given actor\r\n    const applicableAcrPolicies = acpData.acrPolicies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acpData));\r\n    const applicablePolicies = acpData.policies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acpData));\r\n    // We only need to override Policies that define access other than what we want:\r\n    const conflictingAcrPolicies = applicableAcrPolicies.filter((policy) => policyConflictsWith(policy, {\r\n        read: access.controlRead,\r\n        write: access.controlWrite,\r\n    }));\r\n    const conflictingPolicies = applicablePolicies.filter((policy) => policyConflictsWith(policy, {\r\n        read: access.read,\r\n        append: access.append,\r\n        write: access.write,\r\n    }));\r\n    // For every Policy that applies specifically to the given Actor, but _also_\r\n    // to another actor (i.e. that applies using an anyOf Matcher, or a Matcher that\r\n    // mentions both the given and another actor)...\r\n    const otherActorAcrPolicies = conflictingAcrPolicies.filter((acrPolicy) => policyHasOtherActors(acrPolicy, actorRelation, actor, acpData));\r\n    const otherActorPolicies = conflictingPolicies.filter((policy) => policyHasOtherActors(policy, actorRelation, actor, acpData));\r\n    // ...check what access the current actor would have if we removed them...\r\n    const acpDataWithPoliciesExcluded = Object.assign(Object.assign({}, acpData), { acrPolicies: acpData.acrPolicies.filter((acrPolicy) => !otherActorAcrPolicies.includes(acrPolicy)), policies: acpData.policies.filter((policy) => !otherActorPolicies.includes(policy)) });\r\n    const remainingAccess = internal_getActorAccess(acpDataWithPoliciesExcluded, actorRelation, actor);\r\n    /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */\r\n    if (remainingAccess === null) {\r\n        return null;\r\n    }\r\n    // ...add copies of those Policies and their Matchers, but excluding the given actor...\r\n    let updatedResource = resource;\r\n    otherActorAcrPolicies.forEach((acrPolicy) => {\r\n        const [policyCopy, matcherCopies] = copyPolicyExcludingActor(acrPolicy, resource, acpData, actorRelation, actor);\r\n        updatedResource = setResourceAcrPolicy(updatedResource, policyCopy);\r\n        updatedResource = matcherCopies.reduce(setResourceMatcher, updatedResource);\r\n    });\r\n    otherActorPolicies.forEach((policy) => {\r\n        const [policyCopy, matcherCopies] = copyPolicyExcludingActor(policy, resource, acpData, actorRelation, actor);\r\n        updatedResource = setResourcePolicy$1(updatedResource, policyCopy);\r\n        updatedResource = matcherCopies.reduce(setResourceMatcher, updatedResource);\r\n    });\r\n    // ...add a new Policy that applies the given access,\r\n    // and the previously applying access for access modes that were undefined...\r\n    const newMatcherName = `matcher_${encodeURIComponent(`${actorRelation}_${actor}`)}`;\r\n    let newMatcher = createResourceMatcherFor(resource, newMatcherName);\r\n    newMatcher = setIri(newMatcher, actorRelation, actor);\r\n    const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;\r\n    const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;\r\n    let acrPoliciesToUnapply = otherActorAcrPolicies;\r\n    // Only replace existing Policies if the defined access actually changes:\r\n    if (newControlReadAccess !== remainingAccess.controlRead ||\r\n        newControlWriteAccess !== remainingAccess.controlWrite) {\r\n        const newAcrPolicyName = `acr_policy` +\r\n            `_${encodeURIComponent(`${actorRelation}_${actor}`)}` +\r\n            `_${Date.now()}_${Math.random()}`;\r\n        let newAcrPolicy = createResourcePolicyFor(resource, newAcrPolicyName);\r\n        newAcrPolicy = setAllowModesV2(newAcrPolicy, {\r\n            read: newControlReadAccess === true,\r\n            append: false,\r\n            write: newControlWriteAccess === true,\r\n        });\r\n        newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newMatcher);\r\n        updatedResource = setResourceAcrPolicy(updatedResource, newAcrPolicy);\r\n        updatedResource = setResourceMatcher(updatedResource, newMatcher);\r\n        // If we don't have to set new access, we only need to unapply the\r\n        // ACR Policies that applied to both the given actor and other actors\r\n        // (because they have been replaced by clones not mentioning the given\r\n        // actor). Hence `policiesToUnApply` is initialised to `otherActorPolicies`.\r\n        // However, if we're in this if branch, that means we also had to replace\r\n        // Policies that defined access for just this actor, so we'll have to remove\r\n        // all Policies mentioning this actor:\r\n        acrPoliciesToUnapply = conflictingAcrPolicies;\r\n    }\r\n    const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;\r\n    const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;\r\n    const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;\r\n    let policiesToUnapply = otherActorPolicies;\r\n    // Only replace existing Policies if the defined access actually changes:\r\n    if (newReadAccess !== remainingAccess.read ||\r\n        newAppendAccess !== remainingAccess.append ||\r\n        newWriteAccess !== remainingAccess.write) {\r\n        const newPolicyName = `policy` +\r\n            `_${encodeURIComponent(`${actorRelation}_${actor}`)}` +\r\n            `_${Date.now()}_${Math.random()}`;\r\n        let newPolicy = createResourcePolicyFor(resource, newPolicyName);\r\n        newPolicy = setAllowModesV2(newPolicy, {\r\n            read: newReadAccess === true,\r\n            append: newAppendAccess === true,\r\n            write: newWriteAccess === true,\r\n        });\r\n        newPolicy = addIri(newPolicy, acp.allOf, newMatcher);\r\n        updatedResource = setResourcePolicy$1(updatedResource, newPolicy);\r\n        updatedResource = setResourceMatcher(updatedResource, newMatcher);\r\n        // If we don't have to set new access, we only need to unapply the\r\n        // Policies that applied to both the given actor and other actors (because\r\n        // they have been replaced by clones not mentioning the given actor). Hence\r\n        // `policiesToUnApply` is initialised to `otherActorPolicies`.\r\n        // However, if we're in this if branch, that means we also had to replace\r\n        // Policies that defined access for just this actor, so we'll have to remove\r\n        // all Policies mentioning this actor:\r\n        policiesToUnapply = conflictingPolicies;\r\n    }\r\n    // ...then remove existing Policy URLs that mentioned both the given actor\r\n    // and other actors from the given Resource and apply the new ones (but do not\r\n    // remove the actual old Policies - they might still apply to other Resources!).\r\n    acrPoliciesToUnapply.forEach((previouslyApplicableAcrPolicy) => {\r\n        updatedResource = removeAcrPolicyUrl$1(updatedResource, asIri(previouslyApplicableAcrPolicy));\r\n    });\r\n    policiesToUnapply.forEach((previouslyApplicablePolicy) => {\r\n        updatedResource = removePolicyUrl$1(updatedResource, asIri(previouslyApplicablePolicy));\r\n    });\r\n    return updatedResource;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function adds the relevant Access Control Policies and Matchers to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Agent specifically. In other words, it can, for example, add Policies that\r\n * give a particular Agent Read access to the Resource. However, if other\r\n * Policies specify that that Agent is *denied* Read access *except* if they\r\n * match on some other characteristic, then that will be left intact.\r\n * This means that, unless *only* this function is used to manipulate access to\r\n * this Resource, the set access might not be equal to the effective access for\r\n * the given Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Matchers\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param webId Which Agent you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setAgentAccess(resource, acpData, webId, access) {\r\n    return internal_setActorAccess(resource, acpData, acp.agent, webId, access);\r\n}\r\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function adds the relevant Access Control Policies and Matchers to a\r\n * Resource's Access Control Resource to define the given access for everybody\r\n * specifically. In other words, it can, for example, add Policies that\r\n * give everybody Read access to the Resource. However, if other\r\n * Policies specify that everybody is *denied* Read access *except* if they're\r\n * a particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for a particular Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Matchers\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setPublicAccess(resource, acpData, access) {\r\n    return internal_setActorAccess(resource, acpData, acp.agent, acp.PublicAgent, access);\r\n}\r\nfunction policyHasOtherActors(policy, actorRelation, actor, acpData) {\r\n    // Note: the non-null assertions (`!`) here should be valid because\r\n    //       the caller of `policyHasOtherActors` should already have validated\r\n    //       that the return value of internal_getPoliciesAndMatchers() did not have\r\n    //       any inaccessible URLs, so we should be able to find every Matcher.\r\n    const allOfMatchers = getIriAll(policy, acp.allOf).map((matcherUrl) => acpData.matchers.find((matcher) => asIri(matcher) === matcherUrl));\r\n    const allOfMatchersHaveOtherActors = allOfMatchers.some((matcher) => {\r\n        return matcherHasOtherActors(matcher, actorRelation, actor);\r\n    });\r\n    const anyOfMatchers = getIriAll(policy, acp.anyOf).map((matcherUrl) => acpData.matchers.find((matcher) => asIri(matcher) === matcherUrl));\r\n    const anyOfMatchersHaveOtherActors = anyOfMatchers.some((matcher) => {\r\n        return matcherHasOtherActors(matcher, actorRelation, actor);\r\n    });\r\n    /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Matchers */\r\n    const noneOfMatchers = getIriAll(policy, acp.noneOf).map((matcherUrl) => acpData.matchers.find((matcher) => asIri(matcher) === matcherUrl));\r\n    /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Matchers */\r\n    const noneOfMatchersHaveOtherActors = noneOfMatchers.some((matcher) => {\r\n        return matcherHasOtherActors(matcher, actorRelation, actor);\r\n    });\r\n    return (allOfMatchersHaveOtherActors ||\r\n        anyOfMatchersHaveOtherActors ||\r\n        noneOfMatchersHaveOtherActors);\r\n}\r\nfunction matcherHasOtherActors(matcher, actorRelation, actor) {\r\n    const otherActors = [];\r\n    knownActorRelations.forEach((knownActorRelation) => {\r\n        const otherActorsWithThisRelation = getIriAll(matcher, knownActorRelation).filter((applicableActor) => applicableActor !== actor || knownActorRelation !== actorRelation);\r\n        // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:\r\n        otherActors.push(...otherActorsWithThisRelation);\r\n    });\r\n    return otherActors.length > 0;\r\n}\r\nfunction copyPolicyExcludingActor(inputPolicy, resourceWithAcr, acpData, actorRelationToExclude, actorToExclude) {\r\n    const newIriSuffix = \"_copy_without\" +\r\n        `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` +\r\n        `_${Date.now()}_${Math.random()}`;\r\n    // Create new Matchers for the Policy, excluding the given Actor\r\n    const newAllOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.allOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    const newAnyOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.anyOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    const newNoneOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.noneOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    // Create a new Policy with the new Matchers\r\n    let newPolicy = createResourcePolicyFor(resourceWithAcr, encodeURI(asIri(inputPolicy)) + newIriSuffix);\r\n    getIriAll(inputPolicy, acp.allow).forEach((allowMode) => {\r\n        newPolicy = addIri(newPolicy, acp.allow, allowMode);\r\n    });\r\n    getIriAll(inputPolicy, acp.deny).forEach((denyMode) => {\r\n        newPolicy = addIri(newPolicy, acp.deny, denyMode);\r\n    });\r\n    newAllOfMatchers.forEach((newMatcher) => {\r\n        newPolicy = addIri(newPolicy, acp.allOf, newMatcher);\r\n    });\r\n    newAnyOfMatchers.forEach((newMatcher) => {\r\n        newPolicy = addIri(newPolicy, acp.anyOf, newMatcher);\r\n    });\r\n    /* istanbul ignore next Policies listing noneOf Matchers are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Matchers to copy. */\r\n    newNoneOfMatchers.forEach((newMatcher) => {\r\n        newPolicy = addIri(newPolicy, acp.noneOf, newMatcher);\r\n    });\r\n    return [\r\n        newPolicy,\r\n        newAllOfMatchers.concat(newAnyOfMatchers).concat(newNoneOfMatchers),\r\n    ];\r\n}\r\n/** Creates clones of all the Matchers identified by `matcherIris` in `acpData`, excluding the given Actor */\r\nfunction copyMatchersExcludingActor(matcherIris, resourceWithAcr, acpData, iriSuffix, actorRelationToExclude, actorToExclude) {\r\n    return matcherIris\r\n        .map((matcherIri) => {\r\n        const matcher = acpData.matchers.find((matcher) => asIri(matcher) === matcherIri);\r\n        /* istanbul ignore if: getPoliciesAndMatchers should already have fetched all referenced Matchers, so this should never be true: */\r\n        if (typeof matcher === \"undefined\") {\r\n            return null;\r\n        }\r\n        let newMatcher = createResourceMatcherFor(resourceWithAcr, encodeURI(asIri(matcher)) + iriSuffix);\r\n        let listsOtherActors = false;\r\n        knownActorRelations.forEach((knownActorRelation) => {\r\n            getIriAll(matcher, knownActorRelation).forEach((targetActor) => {\r\n                if (knownActorRelation === actorRelationToExclude &&\r\n                    targetActor === actorToExclude) {\r\n                    return;\r\n                }\r\n                listsOtherActors = true;\r\n                newMatcher = addIri(newMatcher, knownActorRelation, targetActor);\r\n            });\r\n        });\r\n        return listsOtherActors ? newMatcher : null;\r\n    })\r\n        .filter(isNotNull);\r\n}\r\nfunction isNotNull(value) {\r\n    return value !== null;\r\n}\r\nasync function internal_getPoliciesAndMatchers(resource, options = internal_defaultFetchOptions) {\r\n    const acrPolicyUrls = getAcrPolicyUrlAll$1(resource);\r\n    const policyUrls = getPolicyUrlAll$1(resource);\r\n    const allPolicyResourceUrls = getResourceUrls(acrPolicyUrls).concat(getResourceUrls(policyUrls));\r\n    const policyResources = await getResources(allPolicyResourceUrls, options);\r\n    const acrPolicies = getThingsFromResources(acrPolicyUrls, policyResources).filter(isNotNull);\r\n    const policies = getThingsFromResources(policyUrls, policyResources).filter(isNotNull);\r\n    const matcherUrlSet = new Set();\r\n    acrPolicies.forEach((acrPolicy) => {\r\n        const referencedMatcherUrls = getReferencedMatcherUrls(acrPolicy);\r\n        referencedMatcherUrls.forEach((matcherUrl) => {\r\n            matcherUrlSet.add(matcherUrl);\r\n        });\r\n    });\r\n    policies.forEach((policy) => {\r\n        const referencedMatcherUrls = getReferencedMatcherUrls(policy);\r\n        referencedMatcherUrls.forEach((matcherUrl) => {\r\n            matcherUrlSet.add(matcherUrl);\r\n        });\r\n    });\r\n    const matcherUrls = Array.from(matcherUrlSet);\r\n    const matcherResourceUrls = matcherUrls.map((matcherUrl) => getResourceUrl(matcherUrl));\r\n    const unfetchedMatcherResourceUrls = matcherResourceUrls.filter((matcherResourceUrl) => !allPolicyResourceUrls.includes(matcherResourceUrl));\r\n    const matcherResources = await getResources(unfetchedMatcherResourceUrls, options);\r\n    const allResources = Object.assign(Object.assign({}, policyResources), matcherResources);\r\n    const matchers = getThingsFromResources(matcherUrls, allResources).filter(isNotNull);\r\n    const inaccessibleUrls = Object.keys(allResources).filter((resourceUrl) => allResources[resourceUrl] === null);\r\n    return {\r\n        inaccessibleUrls,\r\n        acrPolicies,\r\n        policies,\r\n        matchers,\r\n    };\r\n}\r\nfunction getResourceUrl(thingUrl) {\r\n    const thingUrlObject = new URL(thingUrl);\r\n    thingUrlObject.hash = \"\";\r\n    return thingUrlObject.href;\r\n}\r\nfunction getResourceUrls(thingUrls) {\r\n    const resourceUrls = [];\r\n    thingUrls.forEach((thingUrl) => {\r\n        const resourceUrl = getResourceUrl(thingUrl);\r\n        if (!resourceUrls.includes(resourceUrl)) {\r\n            resourceUrls.push(resourceUrl);\r\n        }\r\n    });\r\n    return resourceUrls;\r\n}\r\nasync function getResources(resourceUrls, options) {\r\n    const uniqueResourceUrls = Array.from(new Set(resourceUrls));\r\n    const resources = {};\r\n    await Promise.all(uniqueResourceUrls.map(async (resourceUrl) => {\r\n        try {\r\n            const resource = await getSolidDataset(resourceUrl, options);\r\n            resources[resourceUrl] = resource;\r\n        }\r\n        catch (e) {\r\n            resources[resourceUrl] = null;\r\n        }\r\n    }));\r\n    return resources;\r\n}\r\nfunction getThingsFromResources(thingUrls, resources) {\r\n    return thingUrls.map((thingUrl) => {\r\n        const resourceUrl = getResourceUrl(thingUrl);\r\n        const resource = resources[resourceUrl];\r\n        if (!resource) {\r\n            return null;\r\n        }\r\n        return getThing(resource, thingUrl);\r\n    });\r\n}\r\nfunction getReferencedMatcherUrls(policy) {\r\n    return getAllOfMatcherUrlAll(policy)\r\n        .concat(getAnyOfMatcherUrlAll(policy))\r\n        .concat(getNoneOfMatcherUrlAll(policy));\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Agent. If\r\n *   additional restrictions are set up to apply to the given Agent in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function getAgentAccess$2(resourceUrl, webId, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\r\n        return internal_getAgentAccess(acpData, webId);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getAgentAccess$4(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Agent's access to.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Agent explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function setAgentAccess$2(resourceUrl, webId, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\r\n        const updatedResource = internal_setAgentAccess(resourceInfo, acpData, webId, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return await getAgentAccess$2(resourceUrl, webId, options);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead !== access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\r\n        }\r\n        const wacAccess = access;\r\n        await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);\r\n        return getAgentAccess$4(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for all Agents with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Agents. If\r\n *   additional restrictions are set up to apply to the listed Agents in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, grouped by Agent.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function getAgentAccessAll$2(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\r\n        return internal_getAgentAccessAll(acpData);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getAgentAccessAll$4(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for everyone.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for everyone. If\r\n *   additional restrictions are set up to apply to users in a particular\r\n *   situation, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function getPublicAccess$2(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\r\n        return internal_getPublicAccess(acpData);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return getPublicAccess$4(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for everybody. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access a user has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change public access to.\r\n * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for everybody explicitly.\r\n * @since 1.5.0\r\n * @hidden\r\n * @deprecated Please import from the \"universal\" modules.\r\n */\r\nasync function setPublicAccess$2(resourceUrl, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);\r\n        const updatedResource = internal_setPublicAccess(resourceInfo, acpData, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return await getPublicAccess$2(resourceUrl, options);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead !== access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), \\`controlRead\\` and \\`controlWrite\\` should have the same value.`);\r\n        }\r\n        const wacAccess = access;\r\n        await setPublicResourceAccess(resourceInfo, wacAccess, options);\r\n        return getPublicAccess$4(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\n\nvar universal_v2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAgentAccess: getAgentAccess$2,\n  setAgentAccess: setAgentAccess$2,\n  getAgentAccessAll: getAgentAccessAll$2,\n  getPublicAccess: getPublicAccess$2,\n  setPublicAccess: setPublicAccess$2,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor\n});\n\n//\r\n/**\r\n * Retrieve the Server Resource Info of Resource expressing access control over\r\n * another resource it is linked to. It applies in both ACP and WAC contexts:\r\n * the Access Control Resource is discovered consistently using a Link header\r\n * with `rel=acl`.\r\n *\r\n * @param {WithServerResourceInfo} resource The Resource for which ACL we want\r\n * to retrieve the Server Resource Info.\r\n * @param {DefaultOptions} options\r\n * @returns The Server Resource Info if available, null otherwise.\r\n * @since 1.19.0\r\n */\r\nasync function getAclServerResourceInfo(resource, options) {\r\n    if (typeof resource.internal_resourceInfo.aclUrl === \"string\") {\r\n        return getResourceInfo(resource.internal_resourceInfo.aclUrl, options);\r\n    }\r\n    return null;\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Policies allow or deny access modes over resources and their associated\r\n * access control resource.\r\n *\r\n * @param policy The Policy Thing which allows retrieved access modes.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\r\nfunction getAllowModes(policy) {\r\n    return getModes(policy, ACP.allow);\r\n}\n\n//\r\n/**\r\n * ```{note}\r\n * The ACP specification is a draft. As such, this function is experimental and\r\n * subject to change, even in a non-major release.\r\n * See also: https://solid.github.io/authorization-panel/acp-specification/\r\n * ```\r\n *\r\n * Policies allow or deny access modes over resources and their associated\r\n * access control resource.\r\n *\r\n * @param policy The Policy Thing which denies retrieved access modes.\r\n * @returns Policy URL array.\r\n * @since 1.16.1\r\n */\r\nfunction getDenyModes(policy) {\r\n    return getModes(policy, ACP.deny);\r\n}\n\n//\r\n/** @hidden */\r\nfunction isAgentMatched(acr, policy, webId) {\r\n    // TODO: Proper solution\r\n    // Finalise, release and use the TypeScript ACP Solid library\r\n    // internal_getActorAccess in acp_v2:96 doesn't reduce the policies properly\r\n    // policyAppliesTo in acp_v2:256 assumes that every matcher is an agent matcher\r\n    //\r\n    // TODO: Stopgap solution\r\n    // Implement a simplistic reduce function that\r\n    // matches policies where the agent is present in the matchers\r\n    const allOfMatchers = getUrlAll(policy, ACP.allOf)\r\n        .map((url) => getThing(internal_getAcr(acr), url))\r\n        .filter((thing) => thing !== null);\r\n    const allOfMatched = allOfMatchers.every((thing) => {\r\n        return getUrlAll(thing, ACP.agent).includes(webId);\r\n    });\r\n    const anyOfMatchers = getUrlAll(policy, ACP.anyOf)\r\n        .map((url) => getThing(internal_getAcr(acr), url))\r\n        .filter((thing) => thing !== null);\r\n    const anyOfMatched = anyOfMatchers.some((thing) => {\r\n        return getUrlAll(thing, ACP.agent).includes(webId);\r\n    });\r\n    const noneOfMatchers = getUrlAll(policy, ACP.noneOf)\r\n        .map((url) => getThing(internal_getAcr(acr), url))\r\n        .filter((thing) => thing !== null);\r\n    const noneOfMatched = noneOfMatchers.some((thing) => {\r\n        return getUrlAll(thing, ACP.agent).includes(webId);\r\n    });\r\n    return (allOfMatchers.length + anyOfMatchers.length > 0 &&\r\n        (allOfMatchers.length === 0 || allOfMatched) &&\r\n        (anyOfMatchers.length === 0 || anyOfMatched) &&\r\n        (noneOfMatchers.length === 0 || !noneOfMatched));\r\n}\r\n/** @hidden */\r\nfunction reduceModes(policy, modes, type) {\r\n    const allowed = getAllowModes(policy);\r\n    const denied = getDenyModes(policy);\r\n    if (type === \"control\") {\r\n        return {\r\n            read: modes.read,\r\n            append: modes.append,\r\n            write: modes.write,\r\n            controlRead: (modes.controlRead || allowed.read) && !denied.read,\r\n            controlWrite: (modes.controlWrite || allowed.write) && !denied.write,\r\n        };\r\n    }\r\n    return {\r\n        read: (modes.read || allowed.read) && !denied.read,\r\n        append: (modes.append || allowed.append) && !denied.append,\r\n        write: (modes.write || allowed.write) && !denied.write,\r\n        controlRead: modes.controlRead,\r\n        controlWrite: modes.controlWrite,\r\n    };\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.16.0\r\n */\r\nasync function getAgentAccess$1(resourceWithAcr, webId) {\r\n    // TODO: add support for external resources\r\n    let resourceAccess = {\r\n        read: false,\r\n        append: false,\r\n        write: false,\r\n        controlRead: false,\r\n        controlWrite: false,\r\n    };\r\n    const policyAll = getPolicyUrlAll(resourceWithAcr)\r\n        .map((url) => getThing(internal_getAcr(resourceWithAcr), url))\r\n        .filter((policy) => policy !== null);\r\n    policyAll.forEach((policy) => {\r\n        if (isAgentMatched(resourceWithAcr, policy, webId)) {\r\n            resourceAccess = reduceModes(policy, resourceAccess, \"resource\");\r\n        }\r\n    });\r\n    const acrPolicyAll = getAcrPolicyUrlAll(resourceWithAcr)\r\n        .map((url) => getThing(internal_getAcr(resourceWithAcr), url))\r\n        .filter((policy) => policy !== null);\r\n    acrPolicyAll.forEach((policy) => {\r\n        if (isAgentMatched(resourceWithAcr, policy, webId)) {\r\n            resourceAccess = reduceModes(policy, resourceAccess, \"control\");\r\n        }\r\n    });\r\n    return resourceAccess;\r\n}\n\n//\r\n/**\r\n * Retrieve the URL of an Access Control Resource as per pre-draft versions of\r\n * the ACP specification.\r\n *\r\n * @param resource The Resource for which to retrieve the URL of the Access\r\n * Control Resource if it is accessible.\r\n * @returns The URL of the ACR or null.\r\n * @deprecated\r\n */\r\nfunction getAcrUrl$1(resource) {\r\n    const linkedAccessControlResource = resource.internal_resourceInfo.linkedResources[ACP.accessControl];\r\n    if (Array.isArray(linkedAccessControlResource) &&\r\n        linkedAccessControlResource.length === 1) {\r\n        return linkedAccessControlResource[0];\r\n    }\r\n    return null;\r\n}\n\n//\r\n/**\r\n * Retrieve the URL of an Access Control Resource as per the ACP Draft\r\n * specification.\r\n *\r\n * @param resource The Resource for which to retrieve the URL of the Access\r\n * Control Resource if it is accessible.\r\n * @returns The URL of the ACR or null.\r\n */\r\nasync function getAcrUrl(resource, options) {\r\n    // TODO: Remove as soon as ESS 1.1 is phased out\r\n    const legacyAcrUrl = getAcrUrl$1(resource);\r\n    if (legacyAcrUrl !== null) {\r\n        return legacyAcrUrl;\r\n    }\r\n    // The ACP Draft mandates a link rel=\"type\" header identifies Access Control Resources\r\n    const aclServerResourceInfo = await getAclServerResourceInfo(resource, options);\r\n    if (aclServerResourceInfo === null) {\r\n        return null;\r\n    }\r\n    const relTypeLinks = getLinkedResourceUrlAll(aclServerResourceInfo).type;\r\n    if (Array.isArray(relTypeLinks) &&\r\n        relTypeLinks.includes(ACP.AccessControlResource)) {\r\n        return getSourceUrl(aclServerResourceInfo);\r\n    }\r\n    return null;\r\n}\n\n//\r\n/**\r\n * Retrieve the Access Control Resource of a Resource as per the ACP Draft\r\n * specification.\r\n *\r\n * @param resource The Resource for which to retrieve the URL of the Access\r\n * Control Resource if it is accessible.\r\n * @param options Default Options such as a fetch function.\r\n * @returns The URL of the ACR or null.\r\n */\r\nasync function getResourceAcr(resource, options) {\r\n    const acrUrl = await getAcrUrl(resource, options);\r\n    if (acrUrl === null) {\r\n        return null;\r\n    }\r\n    let acr;\r\n    try {\r\n        acr = await getSolidDataset(acrUrl, options);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    return Object.assign(Object.assign({}, resource), { internal_acp: {\r\n            acr: Object.assign(Object.assign({}, acr), { accessTo: getSourceUrl(resource) }),\r\n        } });\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\r\nasync function getAgentAccess(resourceUrl, webId, options) {\r\n    const resourceInfo = await getResourceInfo(resourceUrl, options);\r\n    const acr = await getResourceAcr(resourceInfo, options);\r\n    if (acr === null) {\r\n        return getAgentAccess$4(resourceInfo, webId, options);\r\n    }\r\n    return getAgentAccess$1(acr, webId);\r\n}\n\n//\r\n/** @hidden */\r\nfunction getAgentUrlAll(acr) {\r\n    return Array.from(new Set(getThingAll(internal_getAcr(acr))\r\n        .map((thing) => {\r\n        return getUrlAll(thing, ACP.agent);\r\n    })\r\n        .reduce((flatArray, agentArray) => {\r\n        return flatArray.concat(agentArray);\r\n    }, [])));\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is defined for agents.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.21.0\r\n */\r\nasync function getAgentAccessAll$1(resourceWithAcr) {\r\n    return (await Promise.all(getAgentUrlAll(resourceWithAcr).map(async (agent) => ({\r\n        [agent]: await getAgentAccess$1(resourceWithAcr, agent),\r\n    })))).reduce((agentAccessAll, currentAgentAccess) => (Object.assign(Object.assign({}, agentAccessAll), currentAgentAccess)), {});\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is defined for agents.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.21.0\r\n */\r\nasync function getAgentAccessAll(resourceUrl, options) {\r\n    const resourceInfo = await getResourceInfo(resourceUrl, options);\r\n    const acr = await getResourceAcr(resourceInfo, options);\r\n    if (acr === null) {\r\n        return getAgentAccessAll$4(resourceInfo, options);\r\n    }\r\n    return getAgentAccessAll$1(acr);\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is given to the public.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to read the access for.\r\n * @since 1.16.0\r\n */\r\nasync function getPublicAccess$1(resourceWithAcr) {\r\n    return getAgentAccess$1(resourceWithAcr, ACP.PublicAgent);\r\n}\n\n//\r\n/**\r\n * Get an overview of what access is defined for the Public.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access.\r\n * - It will only return access specified explicitly for the given Agent within\r\n *   the ACL linked to the resource. If additional restrictions or external\r\n *   resources are used, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\r\nasync function getPublicAccess(resourceUrl, options) {\r\n    const resourceInfo = await getResourceInfo(resourceUrl, options);\r\n    const acr = await getResourceAcr(resourceInfo, options);\r\n    if (acr === null) {\r\n        return getPublicAccess$4(resourceInfo, options);\r\n    }\r\n    return getPublicAccess$1(acr);\r\n}\n\n//\r\n/** @hidden */\r\nfunction getDefaultAgentMatcherPolicyUrl(resource, name, mode) {\r\n    return getDefaultAccessControlUrl(resource, name)\r\n        .concat(\"AgentMatcher\")\r\n        .concat(mode.charAt(0).toUpperCase() + mode.slice(1))\r\n        .concat(\"Policy\");\r\n}\n\n//\r\n/** @hidden */\r\nfunction setDefaultAgentMatcherPolicyThingIfNotExist(resource, name, mode) {\r\n    const policyUrl = getDefaultAgentMatcherPolicyUrl(resource, name, mode);\r\n    // TODO: Re-enable when we support setting agent access on member resources\r\n    // if (policyUrl.includes(\"Member\") && policyUrl.includes(\"Acr\")) {\r\n    //   return addMemberAcrPolicyUrl(resource, policyUrl);\r\n    // }\r\n    // if (policyUrl.includes(\"Member\")) {\r\n    //   return addMemberPolicyUrl(resource, policyUrl);\r\n    // }\r\n    if (policyUrl.includes(\"Acr\")) {\r\n        return addAcrPolicyUrl(resource, policyUrl);\r\n    }\r\n    return addPolicyUrl(resource, policyUrl);\r\n}\n\n//\r\n/** @hidden */\r\nfunction getDefaultAgentMatcherPolicyMatcherUrl(resource, name, mode) {\r\n    return getDefaultAgentMatcherPolicyUrl(resource, name, mode).concat(\"Matcher\");\r\n}\n\n//\r\n/** @hidden */\r\nconst DEFAULT_POLICY_MATCHER_PREDICATE = ACP.anyOf;\r\n/**\r\n * This functions scaffolds the default elements required for giving access to\r\n * an agent:\r\n * 1. If the Access Control Resource is empty, create the AccessControlResource\r\n *    element;\r\n * 2. If the current default Access Control doesn't exist (the one applying to\r\n *    one of: the Resource, the ACR, the Member Resources or the ACR of members)\r\n *    create it;\r\n * 3. If the default Policy for allowing the Access Modes for the current\r\n *    default Access Control doesn't exist, create it;\r\n * 4. If the default \"anyOf\" Agent Matcher for the current Policy creates it;\r\n * 5. Returns an ACR with a Matcher ready to add to.\r\n * @hidden\r\n * */\r\nfunction setDefaultAgentMatcherPolicyMatcherThingIfNotExist(resource, name, mode) {\r\n    const policyUrl = getDefaultAgentMatcherPolicyUrl(resource, name, mode);\r\n    const matcherUrl = getDefaultAgentMatcherPolicyMatcherUrl(resource, name, mode);\r\n    let defaultAgentMatcherPolicyThing = getThing(internal_getAcr(resource), policyUrl);\r\n    if (!defaultAgentMatcherPolicyThing) {\r\n        resource = setDefaultAgentMatcherPolicyThingIfNotExist(resource, name, mode);\r\n        defaultAgentMatcherPolicyThing = createThing({ url: policyUrl });\r\n        defaultAgentMatcherPolicyThing = setModes(defaultAgentMatcherPolicyThing, { [mode]: true }, ACP.allow);\r\n    }\r\n    // Get the Default Access Control Agent Matcher Policy Matcher Thing or create it and return\r\n    const agentMatcherPolicyUrlAll = getIriAll(defaultAgentMatcherPolicyThing, DEFAULT_POLICY_MATCHER_PREDICATE);\r\n    if (!agentMatcherPolicyUrlAll.includes(matcherUrl)) {\r\n        defaultAgentMatcherPolicyThing = buildThing(defaultAgentMatcherPolicyThing)\r\n            .addUrl(DEFAULT_POLICY_MATCHER_PREDICATE, matcherUrl)\r\n            .build();\r\n        return setAccessControlResourceThing(resource, defaultAgentMatcherPolicyThing);\r\n    }\r\n    return resource;\r\n}\n\n//\r\n/** @hidden */\r\nfunction setAgentAccessMode(resourceWithAcr, webId, name, mode, operation) {\r\n    var _a;\r\n    const matcherUrl = getDefaultAgentMatcherPolicyMatcherUrl(resourceWithAcr, name, mode);\r\n    // Set default Matcher if not exists\r\n    const resourceWithDefaultAgentMatcher = setDefaultAgentMatcherPolicyMatcherThingIfNotExist(resourceWithAcr, name, mode);\r\n    const defaultAgentMatcherThing = (_a = getThing(internal_getAcr(resourceWithDefaultAgentMatcher), matcherUrl)) !== null && _a !== void 0 ? _a : createThing({ url: matcherUrl });\r\n    return setAccessControlResourceThing(resourceWithDefaultAgentMatcher, operation === \"add\"\r\n        ? addAgent(defaultAgentMatcherThing, webId)\r\n        : removeAgent(defaultAgentMatcherThing, webId));\r\n}\r\n/**\r\n * Set access for a given Agent.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to set the access for.\r\n * @param webId WebID of the Agent you want to set the access for.\r\n * @param access Access Modes you want to set for the agent.\r\n * @since 1.16.0\r\n */\r\nasync function setAgentAccess$1(resourceWithAcr, webId, access) {\r\n    const agentAccessModes = await getAgentAccess$1(resourceWithAcr, webId);\r\n    // Add Agent to Default Matchers (including member) if access mode is different from what exists\r\n    if (typeof access.read === \"boolean\" &&\r\n        agentAccessModes.read !== access.read) {\r\n        resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, \"read\", access.read ? \"add\" : \"remove\");\r\n    }\r\n    if (typeof access.append === \"boolean\" &&\r\n        agentAccessModes.append !== access.append) {\r\n        resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, \"append\", access.append ? \"add\" : \"remove\");\r\n    }\r\n    if (typeof access.write === \"boolean\" &&\r\n        agentAccessModes.write !== access.write) {\r\n        resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, \"write\", access.write ? \"add\" : \"remove\");\r\n    }\r\n    if (typeof access.controlRead === \"boolean\" &&\r\n        agentAccessModes.controlRead !== access.controlRead) {\r\n        resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACR_ACCESS_CONTROL, \"controlRead\", access.controlRead ? \"add\" : \"remove\");\r\n    }\r\n    if (typeof access.controlWrite === \"boolean\" &&\r\n        agentAccessModes.controlWrite !== access.controlWrite) {\r\n        resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACR_ACCESS_CONTROL, \"controlWrite\", access.controlWrite ? \"add\" : \"remove\");\r\n    }\r\n    return resourceWithAcr;\r\n}\n\n//\r\n/**\r\n * Set access to a resource for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access will not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to set access for.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access The Access Modes to add (true) or remove (false).\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\r\nasync function setAgentAccess(resourceUrl, webId, access, options) {\r\n    // TODO: Change the standard getAgentAccess signatures to all take a  T extends WithAcl\r\n    const resourceInfo = await getResourceInfo(resourceUrl, options);\r\n    const acr = await getResourceAcr(resourceInfo, options);\r\n    if (acr === null) {\r\n        await setAgentResourceAccess(resourceInfo, webId, access, options);\r\n        return getAgentAccess$4(resourceInfo, webId, options);\r\n    }\r\n    // TODO: Make sure both setAgentAccessWac and setAgentAccessAcp don't save within the function, expose one standard saveAclFor function that is universal.\r\n    try {\r\n        await saveAcrFor(await setAgentAccess$1(acr, webId, access), options);\r\n        return await getAgentAccess(resourceUrl, webId, options);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\n\n//\r\n/**\r\n * Set access for the public.\r\n *\r\n * @param resourceWithAcr URL of the Resource you want to read the access for.\r\n * @param access Access Modes you want to set for the agent.\r\n * @since 1.16.0\r\n */\r\nasync function setPublicAccess$1(resourceWithAcr, access) {\r\n    return setAgentAccess$1(resourceWithAcr, ACP.PublicAgent, access);\r\n}\n\n//\r\n/**\r\n * Set access to a resource for the public.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access will not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to set access for.\r\n * @param access The Access Modes to add (true) or remove (false).\r\n * @param options Default Options such as a fetch function.\r\n * @since 1.19.0\r\n */\r\nasync function setPublicAccess(resourceUrl, access, options) {\r\n    const resourceInfo = await getResourceInfo(resourceUrl, options);\r\n    const acr = await getResourceAcr(resourceInfo, options);\r\n    if (acr === null) {\r\n        await setPublicResourceAccess(resourceInfo, access, options);\r\n        return getPublicAccess$4(resourceInfo, options);\r\n    }\r\n    try {\r\n        await saveAcrFor(await setPublicAccess$1(acr, access), options);\r\n        return await getPublicAccess(resourceUrl, options);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\n\n//\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAclServerResourceInfo: getAclServerResourceInfo,\n  getAgentAccess: getAgentAccess,\n  getAgentAccessAll: getAgentAccessAll,\n  getPublicAccess: getPublicAccess,\n  setAgentAccess: setAgentAccess,\n  setPublicAccess: setPublicAccess\n});\n\n//\n\nvar ess1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getFileWithAccessDatasets: getFileWithAccessDatasets,\n  getFileWithAcr: getFileWithAcr,\n  getLinkedAcrUrl: getLinkedAcrUrl,\n  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr: getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr: getSolidDatasetWithAcr,\n  hasAccessibleAcr: hasAccessibleAcr,\n  saveAcrFor: saveAcrFor,\n  isAcpControlled: isAcpControlled,\n  acrAsMarkdown: acrAsMarkdown,\n  addAcrPolicyUrl: addAcrPolicyUrl$1,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,\n  addMemberPolicyUrl: addMemberPolicyUrl$1,\n  addPolicyUrl: addPolicyUrl$1,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,\n  getPolicyUrlAll: getPolicyUrlAll$1,\n  hasLinkedAcr: hasLinkedAcr,\n  removeAcrPolicyUrl: removeAcrPolicyUrl$1,\n  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,\n  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrl: removeMemberPolicyUrl$1,\n  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,\n  removePolicyUrl: removePolicyUrl$1,\n  removePolicyUrlAll: removePolicyUrlAll,\n  createPolicy: createPolicy,\n  getAllowModes: getAllowModesV1,\n  getDenyModes: getDenyModesV1,\n  getPolicy: getPolicy,\n  getPolicyAll: getPolicyAll,\n  policyAsMarkdown: policyAsMarkdown,\n  removePolicy: removePolicy,\n  setAllowModes: setAllowModesV1,\n  setDenyModes: setDenyModesV1,\n  setPolicy: setPolicy,\n  createResourcePolicyFor: createResourcePolicyFor,\n  getResourceAcrPolicy: getResourceAcrPolicy,\n  getResourceAcrPolicyAll: getResourceAcrPolicyAll,\n  getResourcePolicy: getResourcePolicy,\n  getResourcePolicyAll: getResourcePolicyAll,\n  removeResourceAcrPolicy: removeResourceAcrPolicy,\n  removeResourcePolicy: removeResourcePolicy,\n  setResourceAcrPolicy: setResourceAcrPolicy,\n  setResourcePolicy: setResourcePolicy$1,\n  addAgent: addAgent$1,\n  addNoneOfRuleUrl: addNoneOfRuleUrl,\n  addGroup: addGroup,\n  addAnyOfRuleUrl: addAnyOfRuleUrl,\n  addAllOfRuleUrl: addAllOfRuleUrl,\n  createRule: createRule,\n  getAgentAll: getAgentAll$1,\n  getNoneOfRuleUrlAll: getNoneOfRuleUrlAll,\n  getGroupAll: getGroupAll,\n  getAnyOfRuleUrlAll: getAnyOfRuleUrlAll,\n  getAllOfRuleUrlAll: getAllOfRuleUrlAll,\n  getRule: getRule,\n  getRuleAll: getRuleAll,\n  hasAuthenticated: hasAuthenticated$1,\n  hasCreator: hasCreator$1,\n  hasPublic: hasPublic$1,\n  removeAgent: removeAgent$1,\n  removeNoneOfRuleUrl: removeNoneOfRuleUrl,\n  removeGroup: removeGroup,\n  removeAnyOfRuleUrl: removeAnyOfRuleUrl,\n  removeAllOfRuleUrl: removeAllOfRuleUrl,\n  removeRule: removeRule,\n  ruleAsMarkdown: ruleAsMarkdown,\n  setAgent: setAgent$1,\n  setAuthenticated: setAuthenticated$1,\n  setCreator: setCreator$1,\n  setNoneOfRuleUrl: setNoneOfRuleUrl,\n  setGroup: setGroup,\n  setAnyOfRuleUrl: setAnyOfRuleUrl,\n  setPublic: setPublic$1,\n  setAllOfRuleUrl: setAllOfRuleUrl,\n  setRule: setRule,\n  addClient: addClient$1,\n  getClientAll: getClientAll$1,\n  hasAnyClient: hasAnyClient$1,\n  removeClient: removeClient$1,\n  setAnyClient: setAnyClient$1,\n  setClient: setClient$1,\n  removeAnyClient: removeAnyClient$1,\n  removeAuthenticated: removeAuthenticated$1,\n  removeCreator: removeCreator$1,\n  removePublic: removePublic$1,\n  createResourceRuleFor: createResourceRuleFor,\n  getResourceRule: getResourceRule,\n  getResourceRuleAll: getResourceRuleAll,\n  removeResourceRule: removeResourceRule,\n  setResourceRule: setResourceRule,\n  addMockAcrTo: addMockAcrTo,\n  mockAcrFor: mockAcrFor\n});\n\n//\n\nvar ess2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getFileWithAccessDatasets: getFileWithAccessDatasets,\n  getFileWithAcr: getFileWithAcr,\n  getLinkedAcrUrl: getLinkedAcrUrl,\n  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll,\n  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,\n  getResourceInfoWithAcr: getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,\n  getSolidDatasetWithAcr: getSolidDatasetWithAcr,\n  hasAccessibleAcr: hasAccessibleAcr,\n  saveAcrFor: saveAcrFor,\n  isAcpControlled: isAcpControlled,\n  hasLinkedAcr: hasLinkedAcr,\n  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,\n  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,\n  removePolicyUrlAll: removePolicyUrlAll,\n  addAcrPolicyUrl: addAcrPolicyUrl,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl,\n  addMemberPolicyUrl: addMemberPolicyUrl,\n  addPolicyUrl: addPolicyUrl,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll,\n  getPolicyUrlAll: getPolicyUrlAll,\n  removeAcrPolicyUrl: removeAcrPolicyUrl,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl,\n  removeMemberPolicyUrl: removeMemberPolicyUrl,\n  removePolicyUrl: removePolicyUrl,\n  setResourcePolicy: setResourcePolicy,\n  createPolicy: createPolicy,\n  getPolicy: getPolicy,\n  getPolicyAll: getPolicyAll,\n  removePolicy: removePolicy,\n  setPolicy: setPolicy,\n  createResourcePolicyFor: createResourcePolicyFor,\n  getResourceAcrPolicy: getResourceAcrPolicy,\n  getResourceAcrPolicyAll: getResourceAcrPolicyAll,\n  getResourcePolicy: getResourcePolicy,\n  getResourcePolicyAll: getResourcePolicyAll,\n  removeResourceAcrPolicy: removeResourceAcrPolicy,\n  removeResourcePolicy: removeResourcePolicy,\n  getAllowModes: getAllowModesV2,\n  getDenyModes: getDenyModesV2,\n  setAllowModes: setAllowModesV2,\n  setDenyModes: setDenyModesV2,\n  addAgent: addAgent,\n  addNoneOfMatcherUrl: addNoneOfMatcherUrl,\n  addAnyOfMatcherUrl: addAnyOfMatcherUrl,\n  addAllOfMatcherUrl: addAllOfMatcherUrl,\n  createMatcher: createMatcher,\n  getAgentAll: getAgentAll,\n  getNoneOfMatcherUrlAll: getNoneOfMatcherUrlAll,\n  getAnyOfMatcherUrlAll: getAnyOfMatcherUrlAll,\n  getAllOfMatcherUrlAll: getAllOfMatcherUrlAll,\n  getMatcher: getMatcher,\n  getMatcherAll: getMatcherAll,\n  hasAuthenticated: hasAuthenticated,\n  hasCreator: hasCreator,\n  hasPublic: hasPublic,\n  removeAgent: removeAgent,\n  removeNoneOfMatcherUrl: removeNoneOfMatcherUrl,\n  removeAnyOfMatcherUrl: removeAnyOfMatcherUrl,\n  removeAllOfMatcherUrl: removeAllOfMatcherUrl,\n  removeMatcher: removeMatcher,\n  setAgent: setAgent,\n  setAuthenticated: setAuthenticated,\n  setCreator: setCreator,\n  setNoneOfMatcherUrl: setNoneOfMatcherUrl,\n  setAnyOfMatcherUrl: setAnyOfMatcherUrl,\n  setPublic: setPublic,\n  setAllOfMatcherUrl: setAllOfMatcherUrl,\n  setMatcher: setMatcher,\n  addClient: addClient,\n  getClientAll: getClientAll,\n  removeClient: removeClient,\n  removeAuthenticated: removeAuthenticated,\n  removeCreator: removeCreator,\n  removePublic: removePublic,\n  createResourceMatcherFor: createResourceMatcherFor,\n  getResourceMatcher: getResourceMatcher,\n  getResourceMatcherAll: getResourceMatcherAll,\n  removeResourceMatcher: removeResourceMatcher,\n  setResourceMatcher: setResourceMatcher,\n  addMockAcrTo: addMockAcrTo,\n  mockAcrFor: mockAcrFor,\n  getVcAccess: getVcAccess,\n  setVcAccess: setVcAccess\n});\n\nexports.FetchError = FetchError;\nexports.SolidClientError = SolidClientError;\nexports.ThingExpectedError = ThingExpectedError;\nexports.access = universal;\nexports.access_v1 = universal_v1;\nexports.access_v2 = universal_v2;\nexports.acp_ess_1 = ess1;\nexports.acp_ess_2 = ess2;\nexports.acp_v1 = acp_v1;\nexports.acp_v2 = acp_v2;\nexports.acp_v3 = acp_v3;\nexports.acp_v4 = acp_v4;\nexports.addBoolean = addBoolean;\nexports.addDate = addDate;\nexports.addDatetime = addDatetime;\nexports.addDecimal = addDecimal;\nexports.addInteger = addInteger;\nexports.addIri = addIri;\nexports.addJwkToJwks = addJwkToJwks;\nexports.addLiteral = addLiteral;\nexports.addMockFallbackAclTo = addMockFallbackAclTo;\nexports.addMockResourceAclTo = addMockResourceAclTo;\nexports.addNamedNode = addNamedNode;\nexports.addPublicKeyToProfileJwks = addPublicKeyToProfileJwks;\nexports.addStringEnglish = addStringEnglish;\nexports.addStringNoLocale = addStringNoLocale;\nexports.addStringWithLocale = addStringWithLocale;\nexports.addTerm = addTerm;\nexports.addTime = addTime;\nexports.addUrl = addUrl;\nexports.asIri = asIri;\nexports.asUrl = asUrl;\nexports.buildThing = buildThing;\nexports.changeLogAsMarkdown = changeLogAsMarkdown;\nexports.createAcl = createAcl;\nexports.createAclFromFallbackAcl = createAclFromFallbackAcl;\nexports.createContainerAt = createContainerAt;\nexports.createContainerInContainer = createContainerInContainer;\nexports.createSolidDataset = createSolidDataset;\nexports.createThing = createThing;\nexports.deleteAclFor = deleteAclFor;\nexports.deleteContainer = deleteContainer;\nexports.deleteFile = deleteFile;\nexports.deleteSolidDataset = deleteSolidDataset;\nexports.fromRdfJsDataset = fromRdfJsDataset;\nexports.getAgentAccess = getAgentAccess$5;\nexports.getAgentAccessAll = getAgentAccessAll$5;\nexports.getAgentDefaultAccess = getAgentDefaultAccess;\nexports.getAgentDefaultAccessAll = getAgentDefaultAccessAll;\nexports.getAgentResourceAccess = getAgentResourceAccess;\nexports.getAgentResourceAccessAll = getAgentResourceAccessAll;\nexports.getAltProfileUrlAllFrom = getAltProfileUrlAllFrom;\nexports.getBoolean = getBoolean;\nexports.getBooleanAll = getBooleanAll;\nexports.getContainedResourceUrlAll = getContainedResourceUrlAll;\nexports.getContentType = getContentType$1;\nexports.getDate = getDate;\nexports.getDateAll = getDateAll;\nexports.getDatetime = getDatetime;\nexports.getDatetimeAll = getDatetimeAll;\nexports.getDecimal = getDecimal;\nexports.getDecimalAll = getDecimalAll;\nexports.getEffectiveAccess = getEffectiveAccess;\nexports.getFallbackAcl = getFallbackAcl;\nexports.getFile = getFile;\nexports.getFileWithAcl = getFileWithAcl;\nexports.getGroupAccess = getGroupAccess$2;\nexports.getGroupAccessAll = getGroupAccessAll$2;\nexports.getGroupDefaultAccess = getGroupDefaultAccess;\nexports.getGroupDefaultAccessAll = getGroupDefaultAccessAll;\nexports.getGroupResourceAccess = getGroupResourceAccess;\nexports.getGroupResourceAccessAll = getGroupResourceAccessAll;\nexports.getInteger = getInteger;\nexports.getIntegerAll = getIntegerAll;\nexports.getIri = getIri;\nexports.getIriAll = getIriAll;\nexports.getJsonLdParser = getJsonLdParser;\nexports.getLinkedResourceUrlAll = getLinkedResourceUrlAll;\nexports.getLiteral = getLiteral;\nexports.getLiteralAll = getLiteralAll;\nexports.getNamedNode = getNamedNode;\nexports.getNamedNodeAll = getNamedNodeAll;\nexports.getPodOwner = getPodOwner;\nexports.getPodUrlAll = getPodUrlAll;\nexports.getPodUrlAllFrom = getPodUrlAllFrom;\nexports.getProfileAll = getProfileAll;\nexports.getProfileJwksIri = getProfileJwksIri;\nexports.getPropertyAll = getPropertyAll;\nexports.getPublicAccess = getPublicAccess$5;\nexports.getPublicDefaultAccess = getPublicDefaultAccess;\nexports.getPublicResourceAccess = getPublicResourceAccess;\nexports.getResourceAcl = getResourceAcl;\nexports.getResourceInfo = getResourceInfo;\nexports.getResourceInfoWithAcl = getResourceInfoWithAcl;\nexports.getSolidDataset = getSolidDataset;\nexports.getSolidDatasetWithAcl = getSolidDatasetWithAcl;\nexports.getSourceIri = getSourceIri;\nexports.getSourceUrl = getSourceUrl;\nexports.getStringByLocaleAll = getStringByLocaleAll;\nexports.getStringEnglish = getStringEnglish;\nexports.getStringEnglishAll = getStringEnglishAll;\nexports.getStringNoLocale = getStringNoLocale;\nexports.getStringNoLocaleAll = getStringNoLocaleAll;\nexports.getStringWithLocale = getStringWithLocale;\nexports.getStringWithLocaleAll = getStringWithLocaleAll;\nexports.getTerm = getTerm;\nexports.getTermAll = getTermAll;\nexports.getThing = getThing;\nexports.getThingAll = getThingAll;\nexports.getTime = getTime;\nexports.getTimeAll = getTimeAll;\nexports.getTurtleParser = getTurtleParser;\nexports.getUrl = getUrl;\nexports.getUrlAll = getUrlAll;\nexports.getWebIdDataset = getWebIdDataset;\nexports.getWellKnownSolid = getWellKnownSolid;\nexports.hasAccessibleAcl = hasAccessibleAcl;\nexports.hasAcl = hasAcl;\nexports.hasFallbackAcl = hasFallbackAcl;\nexports.hasResourceAcl = hasResourceAcl;\nexports.hasResourceInfo = hasResourceInfo;\nexports.hasServerResourceInfo = hasServerResourceInfo;\nexports.isContainer = isContainer;\nexports.isPodOwner = isPodOwner;\nexports.isRawData = isRawData;\nexports.isThing = isThing;\nexports.isThingLocal = isThingLocal;\nexports.mockContainerFrom = mockContainerFrom;\nexports.mockFetchError = mockFetchError;\nexports.mockFileFrom = mockFileFrom;\nexports.mockSolidDatasetFrom = mockSolidDatasetFrom;\nexports.mockThingFrom = mockThingFrom;\nexports.overwriteFile = overwriteFile;\nexports.removeAll = removeAll;\nexports.removeBoolean = removeBoolean;\nexports.removeDate = removeDate;\nexports.removeDatetime = removeDatetime;\nexports.removeDecimal = removeDecimal;\nexports.removeInteger = removeInteger;\nexports.removeIri = removeIri;\nexports.removeLiteral = removeLiteral;\nexports.removeNamedNode = removeNamedNode;\nexports.removeStringEnglish = removeStringEnglish;\nexports.removeStringNoLocale = removeStringNoLocale;\nexports.removeStringWithLocale = removeStringWithLocale;\nexports.removeThing = removeThing;\nexports.removeTime = removeTime;\nexports.removeUrl = removeUrl;\nexports.responseToResourceInfo = responseToResourceInfo;\nexports.responseToSolidDataset = responseToSolidDataset;\nexports.saveAclFor = saveAclFor;\nexports.saveFileInContainer = saveFileInContainer;\nexports.saveSolidDatasetAt = saveSolidDatasetAt;\nexports.saveSolidDatasetInContainer = saveSolidDatasetInContainer;\nexports.setAgentDefaultAccess = setAgentDefaultAccess;\nexports.setAgentResourceAccess = setAgentResourceAccess$1;\nexports.setBoolean = setBoolean;\nexports.setDate = setDate;\nexports.setDatetime = setDatetime;\nexports.setDecimal = setDecimal;\nexports.setGroupDefaultAccess = setGroupDefaultAccess;\nexports.setGroupResourceAccess = setGroupResourceAccess$1;\nexports.setInteger = setInteger;\nexports.setIri = setIri;\nexports.setLiteral = setLiteral;\nexports.setNamedNode = setNamedNode;\nexports.setProfileJwks = setProfileJwks;\nexports.setPublicDefaultAccess = setPublicDefaultAccess;\nexports.setPublicResourceAccess = setPublicResourceAccess$1;\nexports.setStringNoLocale = setStringNoLocale;\nexports.setStringWithLocale = setStringWithLocale;\nexports.setTerm = setTerm;\nexports.setThing = setThing;\nexports.setTime = setTime;\nexports.setUrl = setUrl;\nexports.solidDatasetAsMarkdown = solidDatasetAsMarkdown;\nexports.solidDatasetAsTurtle = solidDatasetAsTurtle;\nexports.thingAsMarkdown = thingAsMarkdown;\nexports.toRdfJsDataset = toRdfJsDataset;\nexports.universalAccess = index;\n"],"mappings":"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aAAa,EAAET,GAAG,CAACW,KAAK,EAAEw1B,SAAS,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwB,CAAC31B,aAAa,EAAE;EAC7C,OAAO8W,SAAS,CAAC9W,aAAa,EAAET,GAAG,CAACW,KAAK,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS01B,wBAAwB,CAAC51B,aAAa,EAAE01B,SAAS,EAAE;EACxD,OAAO7R,SAAS,CAAC7jB,aAAa,EAAET,GAAG,CAACW,KAAK,EAAEw1B,SAAS,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,2BAA2B,CAAC71B,aAAa,EAAE;EAChD,OAAOyjB,SAAS,CAACzjB,aAAa,EAAET,GAAG,CAACW,KAAK,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS41B,2BAA2B,CAAC91B,aAAa,EAAE01B,SAAS,EAAE;EAC3D,OAAO1T,MAAM,CAAChiB,aAAa,EAAET,GAAG,CAACY,YAAY,EAAEu1B,SAAS,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,8BAA8B,CAAC/1B,aAAa,EAAE;EACnD,OAAO8W,SAAS,CAAC9W,aAAa,EAAET,GAAG,CAACY,YAAY,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS61B,8BAA8B,CAACh2B,aAAa,EAAE01B,SAAS,EAAE;EAC9D,OAAO7R,SAAS,CAAC7jB,aAAa,EAAET,GAAG,CAACY,YAAY,EAAEu1B,SAAS,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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CA;AACA;AACA;AACA,SAASygC,MAAM,CAACvmB,KAAK,EAAE;EACnB,OAAO2B,SAAS,CAAC3B,KAAK,EAAEvW,GAAG,CAACC,IAAI,CAAC,CAAClE,QAAQ,CAAC4E,GAAG,CAACO,IAAI,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS67B,eAAe,CAACrC,MAAM,EAAE5Q,IAAI,EAAE;EACnC,OAAO1G,MAAM,CAACsX,MAAM,EAAE/5B,GAAG,CAACe,KAAK,EAAEooB,IAAI,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkT,kBAAkB,CAACtC,MAAM,EAAE5Q,IAAI,EAAE;EACtC,OAAO7E,SAAS,CAACyV,MAAM,EAAE/5B,GAAG,CAACe,KAAK,EAAEooB,IAAI,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmT,eAAe,CAACvC,MAAM,EAAE5Q,IAAI,EAAE;EACnC,OAAOlD,MAAM,CAAC8T,MAAM,EAAE/5B,GAAG,CAACe,KAAK,EAAEooB,IAAI,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoT,kBAAkB,CAACxC,MAAM,EAAE;EAChC,OAAOxiB,SAAS,CAACwiB,MAAM,EAAE/5B,GAAG,CAACe,KAAK,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASy7B,eAAe,CAACzC,MAAM,EAAE5Q,IAAI,EAAE;EACnC,OAAO1G,MAAM,CAACsX,MAAM,EAAE/5B,GAAG,CAACgB,KAAK,EAAEmoB,IAAI,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsT,kBAAkB,CAAC1C,MAAM,EAAE5Q,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AqB,CAAC/O,MAAM,EAAEhU,OAAO,EAAE;EAC5C,OAAOzB,SAAS,CAACyV,MAAM,EAAE/5B,GAAG,CAACe,KAAK,EAAEglB,OAAO,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgjB,kBAAkB,CAAChP,MAAM,EAAEhU,OAAO,EAAE;EACzC,OAAOE,MAAM,CAAC8T,MAAM,EAAE/5B,GAAG,CAACe,KAAK,EAAEglB,OAAO,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASijB,qBAAqB,CAACjP,MAAM,EAAE;EACnC,OAAOxiB,SAAS,CAACwiB,MAAM,EAAE/5B,GAAG,CAACe,KAAK,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkoC,kBAAkB,CAAClP,MAAM,EAAEhU,OAAO,EAAE;EACzC,OAAOtD,MAAM,CAACsX,MAAM,EAAE/5B,GAAG,CAACgB,KAAK,EAAE+kB,OAAO,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmjB,qBAAqB,CAACnP,MAAM,EAAEhU,OAAO,EAAE;EAC5C,OAAOzB,SAAS,CAACyV,MAAM,EAAE/5B,GAAG,CAACgB,KAAK,EAAE+kB,OAAO,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASojB,kBAAkB,CAACpP,MAAM,EAAEhU,OAAO,EAAE;EACzC,OAAOE,MAAM,CAAC8T,MAAM,EAAE/5B,GAAG,CAACgB,KAAK,EAAE+kB,OAAO,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqjB,qBAAqB,CAACrP,MAAM,EAAE;EACnC,OAAOxiB,SAAS,CAACwiB,MAAM,EAAE/5B,GAAG,CAACgB,KAAK,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqoC,mBAAmB,CAACtP,MAAM,EAAEhU,OAAO,EAAE;EAC1C,OAAOtD,MAAM,CAACsX,MAAM,EAAE/5B,GAAG,CAACiB,MAAM,EAAE8kB,OAAO,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASujB,sBAAsB,CAACvP,MAAM,EAAEhU,OAAO,EAAE;EAC7C,OAAOzB,SAAS,CAACyV,MAAM,EAAE/5B,GAAG,CAACiB,MAAM,EAAE8kB,OAAO,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwjB,mBAAmB,CAACxP,MAAM,EAAEhU,OAAO,EAAE;EAC1C,OAAOE,MAAM,CAAC8T,MAAM,EAAE/5B,GAAG,CAACiB,MAAM,EAAE8kB,OAAO,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyjB,sBAAsB,CAACzP,MAAM,EAAE;EACpC,OAAOxiB,SAAS,CAACwiB,MAAM,EAAE/5B,GAAG,CAACiB,MAAM,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwoC,aAAa,CAACluC,GAAG,EAAE;EACxB,MAAM0hC,SAAS,GAAGhjC,oBAAoB,CAACsB,GAAG,CAAC;EAC3C,IAAImuC,YAAY,GAAG7tB,WAAW,CAAC;IAAEtgB,GAAG,EAAE0hC;EAAU,CAAC,CAAC;EAClDyM,YAAY,GAAG1jB,MAAM,CAAC0jB,YAAY,EAAErqC,GAAG,CAACC,IAAI,EAAEU,GAAG,CAACQ,OAAO,CAAC;EAC1D,OAAOkpC,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwB,CAAC/S,eAAe,EAAExpB,IAAI,EAAE;EACrD,MAAM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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuY,yBAAyB,CAACt1C,QAAQ,EAAE8xC,OAAO,EAAE/nC,KAAK,EAAE/B,MAAM,EAAE;EACjE,OAAO2rC,yBAAyB,CAAC3zC,QAAQ,EAAE8xC,OAAO,EAAEhrC,GAAG,CAACjB,KAAK,EAAEkE,KAAK,EAAE/B,MAAM,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASutC,uBAAuB,CAACv1C,QAAQ,EAAE8xC,OAAO,EAAEiB,QAAQ,EAAE/qC,MAAM,EAAE;EAClE,OAAO2rC,yBAAyB,CAAC3zC,QAAQ,EAAE8xC,OAAO,EAAEhrC,GAAG,CAACoB,KAAK,EAAE6qC,QAAQ,EAAE/qC,MAAM,CAAC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwtC,0BAA0B,CAACx1C,QAAQ,EAAE8xC,OAAO,EAAE9pC,MAAM,EAAE;EAC3D,OAAO2rC,yBAAyB,CAAC3zC,QAAQ,EAAE8xC,OAAO,EAAEhrC,GAAG,CAACjB,KAAK,EAAEiB,GAAG,CAACsB,WAAW,EAAEJ,MAAM,CAAC;AAC3F;AACA,SAASisC,sBAAsB,CAACpT,MAAM,EAAEkR,aAAa,EAAEzf,KAAK,EAAEwf,OAAO,EAAE;EACnE;EACA;EACA;EACA;EACA,MAAM5I,UAAU,GAAG7qB,SAAS,CAACwiB,MAAM,EAAE/5B,GAAG,CAACe,KAAK,CAAC,CAACtD,GAAG,CAAEmgC,OAAO,IAAKoN,OA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}