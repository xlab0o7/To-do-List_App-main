{"ast":null,"code":"/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/react-todo-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nrequire('setimmediate');\nvar crypto = self.crypto || self.msCrypto;\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  function MessageDigest(algorithm) {\n    _classCallCheck(this, MessageDigest);\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if (!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n    if (algorithm === 'sha256') {\n      this.algorithm = {\n        name: 'SHA-256'\n      };\n    } else if (algorithm === 'sha1') {\n      this.algorithm = {\n        name: 'SHA-1'\n      };\n    } else {\n      throw new Error(\"Unsupported algorithm \\\"\".concat(algorithm, \"\\\".\"));\n    }\n    this._content = '';\n  }\n  _createClass(MessageDigest, [{\n    key: \"update\",\n    value: function update(msg) {\n      this._content += msg;\n    }\n  }, {\n    key: \"digest\",\n    value: function () {\n      var _digest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data, buffer, hex, i;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              data = new TextEncoder().encode(this._content);\n              _context.t0 = Uint8Array;\n              _context.next = 4;\n              return crypto.subtle.digest(this.algorithm, data);\n            case 4:\n              _context.t1 = _context.sent;\n              buffer = new _context.t0(_context.t1);\n              // return digest in hex\n              hex = '';\n              for (i = 0; i < buffer.length; ++i) {\n                hex += buffer[i].toString(16).padStart(2, '0');\n              }\n              return _context.abrupt(\"return\", hex);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function digest() {\n        return _digest.apply(this, arguments);\n      }\n      return digest;\n    }()\n  }]);\n  return MessageDigest;\n}();","map":{"version":3,"names":["require","crypto","self","msCrypto","module","exports","algorithm","subtle","Error","name","_content","msg","data","TextEncoder","encode","Uint8Array","digest","buffer","hex","i","length","toString","padStart"],"sources":["E:/react-todo-app/node_modules/rdf-canonize/lib/MessageDigest-browser.js"],"sourcesContent":["/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire('setimmediate');\n\nconst crypto = self.crypto || self.msCrypto;\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if(!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n    if(algorithm === 'sha256') {\n      this.algorithm = {name: 'SHA-256'};\n    } else if(algorithm === 'sha1') {\n      this.algorithm = {name: 'SHA-1'};\n    } else {\n      throw new Error(`Unsupported algorithm \"${algorithm}\".`);\n    }\n    this._content = '';\n  }\n\n  update(msg) {\n    this._content += msg;\n  }\n\n  async digest() {\n    const data = new TextEncoder().encode(this._content);\n    const buffer = new Uint8Array(\n      await crypto.subtle.digest(this.algorithm, data));\n    // return digest in hex\n    let hex = '';\n    for(let i = 0; i < buffer.length; ++i) {\n      hex += buffer[i].toString(16).padStart(2, '0');\n    }\n    return hex;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEbA,OAAO,CAAC,cAAc,CAAC;AAEvB,IAAMC,MAAM,GAAGC,IAAI,CAACD,MAAM,IAAIC,IAAI,CAACC,QAAQ;AAE3CC,MAAM,CAACC,OAAO;EACZ;AACF;AACA;AACA;AACA;EACE,uBAAYC,SAAS,EAAE;IAAA;IACrB;IACA;IACA,IAAG,EAAEL,MAAM,IAAIA,MAAM,CAACM,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,IAAGF,SAAS,KAAK,QAAQ,EAAE;MACzB,IAAI,CAACA,SAAS,GAAG;QAACG,IAAI,EAAE;MAAS,CAAC;IACpC,CAAC,MAAM,IAAGH,SAAS,KAAK,MAAM,EAAE;MAC9B,IAAI,CAACA,SAAS,GAAG;QAACG,IAAI,EAAE;MAAO,CAAC;IAClC,CAAC,MAAM;MACL,MAAM,IAAID,KAAK,mCAA2BF,SAAS,SAAK;IAC1D;IACA,IAAI,CAACI,QAAQ,GAAG,EAAE;EACpB;EAAC;IAAA;IAAA,OAED,gBAAOC,GAAG,EAAE;MACV,IAAI,CAACD,QAAQ,IAAIC,GAAG;IACtB;EAAC;IAAA;IAAA;MAAA,yEAED;QAAA;QAAA;UAAA;YAAA;cACQC,IAAI,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAAC;cAAA,cACjCK,UAAU;cAAA;cAAA,OACrBd,MAAM,CAACM,MAAM,CAACS,MAAM,CAAC,IAAI,CAACV,SAAS,EAAEM,IAAI,CAAC;YAAA;cAAA;cAD5CK,MAAM;cAEZ;cACIC,GAAG,GAAG,EAAE;cACZ,KAAQC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;gBACrCD,GAAG,IAAID,MAAM,CAACE,CAAC,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;cAChD;cAAC,iCACMJ,GAAG;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACX;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,GACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}